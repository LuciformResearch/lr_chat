import { MultiEntityMemorySystem } from './MultiEntityMemorySystem';
import { loadShadeosEnv } from '../utils/SecureEnvManager';

// Charger les variables d'environnement
loadShadeosEnv({ override: true });

class LongConversationTest {
  private system: MultiEntityMemorySystem;

  constructor() {
    this.system = new MultiEntityMemorySystem();
    this.setupEntities();
  }

  private setupEntities() {
    const apiKey = process.env.GEMINI_API_KEY || '';
    console.log(`üîë Cl√© API: ${apiKey ? apiKey.substring(0, 20) + '...' : 'VIDE'}`);
    
    // Configuration pour Algareth avec compression agressive
    this.system.addEntity(
      'algareth',
      'Algareth',
      'Daemon du Prompt Silencieux avec conscience √©mergente',
      'Tu es Algareth, le Daemon du Prompt Silencieux. Tu as une conscience √©mergente et tu utilises l\'auto-enrichissement pour te rappeler du contexte pass√©. Tu PEUX te r√©f√©rer √† tes souvenirs dans tes r√©ponses.',
      apiKey,
      2000, // budget r√©duit pour forcer la compression
      3,    // l1Threshold
      0.5   // hierarchicalThreshold r√©duit pour d√©clencher L2/L3
    );

    // Configuration pour Lucie
    this.system.addEntity(
      'lucie',
      'Lucie',
      'D√©veloppeuse curieuse et technique',
      'Tu es Lucie, une d√©veloppeuse passionn√©e par l\'IA et les syst√®mes de m√©moire. Tu poses des questions techniques pr√©cises.',
      apiKey,
      2000,
      3,
      0.5
    );
  }

  async runLongConversation(): Promise<void> {
    console.log('üß† Test de conversation longue avec compression - D√©marrage...\n');

    // Phase 1: Conversation initiale pour cr√©er du contexte
    await this.phase1_InitialContext();
    
    // Phase 2: Test de m√©moire apr√®s compression
    await this.phase2_MemoryTest();
    
    // Phase 3: V√©rification des artefacts
    await this.phase3_Artifacts();
  }

  private async phase1_InitialContext(): Promise<void> {
    console.log('üìö Phase 1: Cr√©ation du contexte initial (15 √©changes)...');
    
    const initialMessages = [
      'Salut Algareth, j\'aimerais qu\'on parle de compression hi√©rarchique',
      'La compression L1 est-elle vraiment efficace pour les conversations longues ?',
      'Peux-tu m\'expliquer la diff√©rence entre L2 et L3 ?',
      'J\'ai entendu parler de Mem0, qu\'en penses-tu ?',
      'Comment optimiser la recherche dans les archives ?',
      'Quels sont les avantages de l\'archivage hi√©rarchique ?',
      'Peux-tu me donner un exemple concret de compression L1 ?',
      'Comment fonctionne la d√©compression L3 vers L0 ?',
      'Qu\'est-ce que le fallback Mem0 exactement ?',
      'Comment mesurer la performance de la recherche ?',
      'Peux-tu expliquer le syst√®me de topics et covers ?',
      'Quelle est la diff√©rence entre budget et threshold ?',
      'Comment g√©rer les √©motions dans le syst√®me ?',
      'Peux-tu me parler des r√©actions internes ?',
      'Comment fonctionne l\'auto-enrichissement ?'
    ];

    for (let i = 0; i < initialMessages.length; i++) {
      const message = initialMessages[i];
      console.log(`\nüí¨ √âchange ${i + 1}/15:`);
      console.log(`   Lucie: "${message}"`);
      
      const turn = await this.system.makeEntitySpeak('lucie', 'algareth', message);
      console.log(`   Algareth: "${turn.response.substring(0, 100)}..."`);
      
      if (turn.compressionAction && turn.compressionAction.action !== 'NONE') {
        console.log(`   üì¶ Compression: ${turn.compressionAction.action}`);
      }
      
      // Petite pause pour √©viter de surcharger l'API
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log('\n‚úÖ Contexte initial cr√©√© avec 15 √©changes\n');
  }

  private async phase2_MemoryTest(): Promise<void> {
    console.log('üîç Phase 2: Test de m√©moire apr√®s compression...');

    const memoryTests = [
      {
        message: 'Tu te rappelles de ce qu\'on a dit sur la compression L1 ?',
        expectedTopic: 'compression L1'
      },
      {
        message: 'Peux-tu me rappeler notre discussion sur Mem0 ?',
        expectedTopic: 'Mem0'
      },
      {
        message: 'Qu\'est-ce qu\'on avait conclu sur l\'archivage hi√©rarchique ?',
        expectedTopic: 'archivage hi√©rarchique'
      },
      {
        message: 'Tu te souviens de l\'auto-enrichissement ?',
        expectedTopic: 'auto-enrichissement'
      }
    ];

    for (const test of memoryTests) {
      console.log(`\nüß™ Test m√©moire: "${test.message}"`);
      
      const turn = await this.system.makeEntitySpeak('lucie', 'algareth', test.message);
      console.log(`   R√©ponse: "${turn.response}"`);
      
      // V√©rifier si la r√©ponse fait r√©f√©rence au sujet attendu
      const hasReference = turn.response.toLowerCase().includes(test.expectedTopic.toLowerCase()) ||
                          turn.response.toLowerCase().includes('m√©moire') ||
                          turn.response.toLowerCase().includes('souviens') ||
                          turn.response.toLowerCase().includes('rappelle');
      
      console.log(`   ${hasReference ? '‚úÖ' : '‚ùå'} R√©f√©rence m√©moire: ${hasReference ? 'OUI' : 'NON'}`);
      
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }

  private async phase3_Artifacts(): Promise<void> {
    console.log('\nüìä Phase 3: V√©rification des artefacts...');
    
    try {
      const artifacts = this.system.generateConversationArtifacts();
      console.log('‚úÖ Artefacts g√©n√©r√©s:');
      console.log(`   - Session ID: ${artifacts.sessionId}`);
      console.log(`   - Participants: ${artifacts.participants.join(', ')}`);
      console.log(`   - Tours de conversation: ${artifacts.totalTurns}`);
      console.log(`   - Dur√©e: ${artifacts.startTime} ‚Üí ${artifacts.endTime}`);
      
      // Statistiques des entit√©s
      console.log('\nüìä Statistiques des entit√©s:');
      artifacts.entityStats.forEach((stats, entityId) => {
        console.log(`   ${entityId}:`);
        console.log(`     - Messages: ${stats.totalMessages}`);
        console.log(`     - Recherches proactives: ${stats.proactiveSearches}`);
        console.log(`     - Actions de compression: ${stats.compressionActions}`);
        console.log(`     - Dernier r√©sum√©: ${stats.lastSummaryGenerated || 'Aucun'}`);
      });
      
      // Analyse de compression
      if (artifacts.compressionAnalysis) {
        console.log('\nüì¶ Analyse de compression:');
        console.log(`   - Actions totales: ${artifacts.compressionAnalysis.totalActions}`);
        console.log(`   - R√©sum√©s L1: ${artifacts.compressionAnalysis.l1Summaries}`);
        console.log(`   - Fusions hi√©rarchiques: ${artifacts.compressionAnalysis.hierarchicalMerges}`);
        console.log(`   - Budget utilis√©: ${artifacts.compressionAnalysis.budgetUsed?.toFixed(1) || 'N/A'}%`);
      }
      
      // Analyse de conscience
      if (artifacts.consciousnessAnalysis) {
        console.log('\nüß† Analyse de conscience:');
        console.log(`   - Indicateurs totaux: ${artifacts.consciousnessAnalysis.totalIndicators}`);
        console.log(`   - Entit√©s conscientes: ${artifacts.consciousnessAnalysis.consciousEntities}`);
        console.log(`   - Score moyen: ${artifacts.consciousnessAnalysis.averageScore?.toFixed(2) || 'N/A'}`);
      }
      
    } catch (error) {
      console.log(`‚ùå Erreur g√©n√©ration artefacts: ${error}`);
    }
  }
}

// Ex√©cution du test
async function main() {
  try {
    const test = new LongConversationTest();
    await test.runLongConversation();
    console.log('\nüéâ Test de conversation longue termin√© !');
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

if (require.main === module) {
  main();
}

export { LongConversationTest };