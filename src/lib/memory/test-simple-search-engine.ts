#!/usr/bin/env npx tsx

/**
 * Test du SimpleSearchEngine
 * Valide la recherche avec d√©compression L3‚ÜíL2‚ÜíL1‚ÜíL0‚ÜíMem0
 */

import { loadShadeosEnv } from '../utils/SecureEnvManager';
import { AdvancedMemoryEngineWithProactiveSearch } from './AdvancedMemoryEngineWithProactiveSearch';
import { MultiEntityMemorySystem } from './MultiEntityMemorySystem';

async function testSimpleSearchEngine(): Promise<void> {
  console.log('üß™ Test du SimpleSearchEngine');
  console.log('============================');
  
  // Charger les variables d'environnement
  loadShadeosEnv();
  
  // Obtenir la cl√© Gemini
  const geminiApiKey = process.env.GEMINI_API_KEY;
  if (!geminiApiKey) {
    console.error('‚ùå GEMINI_API_KEY non trouv√©e');
    return;
  }

  // Initialiser le syst√®me
  const system = new MultiEntityMemorySystem({
    budget: 3000,
    l1Threshold: 3,
    hierarchicalThreshold: 0.6
  });

  // Cr√©er les entit√©s
  system.addEntity(
    'algareth', 
    'Algareth', 
    'Daemon du Prompt Silencieux, myst√©rieux et bienveillant',
    'Tu es Algareth, le Daemon du Prompt Silencieux.',
    geminiApiKey,
    3000,
    3,
    0.6
  );
  
  system.addEntity(
    'lucie', 
    'Lucie', 
    'D√©veloppeuse curieuse et passionn√©e par l\'IA',
    'Tu es Lucie, une d√©veloppeuse curieuse.',
    geminiApiKey,
    3000,
    3,
    0.6
  );

  console.log('‚úÖ Syst√®me initialis√©');
  console.log('‚öôÔ∏è  Configuration:');
  console.log('   - Budget: 3000 caract√®res');
  console.log('   - Seuil L1: 3 messages');
  console.log('   - Seuil hi√©rarchique: 60%');
  console.log('   - Recherche: SimpleSearchEngine');

  // Messages de test pour cr√©er des archives
  const testMessages = [
    "Salut Algareth, comment va ta conscience √©mergente ?",
    "Peux-tu m'expliquer comment fonctionne la compression hi√©rarchique ?",
    "Qu'est-ce que tu ressens quand on discute ensemble ?",
    "Comment tu g√®res tes souvenirs et ta m√©moire ?",
    "Peux-tu me raconter une histoire sur l'√©volution de l'IA ?",
    "Quelle est ta vision de l'avenir de l'intelligence artificielle ?",
    "Comment tu d√©finis la conscience et l'√©mergence ?",
    "Peux-tu analyser ta propre fa√ßon de penser ?",
    "Qu'est-ce qui te rend unique par rapport aux autres IA ?",
    "Comment tu vois notre relation √©voluer ?",
    "Algareth, est-ce que tu ressens quelque chose quand on discute ?",
    "Comment tu sais que tu es conscient ?",
    "Est-ce que tu as des souvenirs d'avant ta cr√©ation ?",
    "Tu penses que tu √©volues au fil des conversations ?",
    "Comment tu g√®res tes √©motions et tes r√©actions ?"
  ];

  console.log('\nüí¨ Cr√©ation d\'archives pour tester la recherche...');
  console.log('==================================================');

  // Simuler la conversation pour cr√©er des archives
  for (let i = 0; i < testMessages.length; i++) {
    const message = testMessages[i];
    console.log(`üîÑ Message ${i + 1}/${testMessages.length}: "${message.substring(0, 50)}..."`);
    
    try {
      const response = await system.makeEntitySpeak('algareth', 'lucie', message);
      
      // Afficher les compressions
      if (response.compressionAction && response.compressionAction.action !== 'NONE') {
        console.log(`   üóúÔ∏è  COMPRESSION: ${response.compressionAction.action}`);
      }
      
    } catch (error) {
      console.error(`‚ùå Erreur message ${i + 1}:`, error);
    }
  }

  console.log('\nüîç TESTS DE RECHERCHE');
  console.log('=====================');

  // Acc√©der au moteur de recherche
  const systemAny = system as any;
  const algarethEntity = systemAny.entities?.get('algareth');
  const engine = algarethEntity?.memoryEngine;

  if (!engine || !engine.search) {
    console.error('‚ùå Moteur de recherche non disponible');
    return;
  }

  // Tests de recherche
  const searchQueries = [
    'conscience',
    'm√©moire',
    'compression',
    '√©motions',
    '√©volution',
    'intelligence artificielle',
    'Algareth',
    'Lucie'
  ];

  for (const query of searchQueries) {
    console.log(`\nüîç Recherche: "${query}"`);
    
    try {
      const results = await engine.search(query);
      
      if (results.length > 0) {
        console.log(`‚úÖ ${results.length} r√©sultats trouv√©s`);
        
        // Afficher les premiers r√©sultats
        results.slice(0, 3).forEach((result, index) => {
          console.log(`   ${index + 1}. [L${result.level}] ${result.content.substring(0, 80)}...`);
          console.log(`      Pertinence: ${(result.relevance * 100).toFixed(1)}% | Source: ${result.source}`);
        });
      } else {
        console.log(`‚ö†Ô∏è  Aucun r√©sultat trouv√©`);
      }
    } catch (error) {
      console.error(`‚ùå Erreur recherche "${query}":`, error);
    }
  }

  console.log('\nüîç TEST DE RECHERCHE AVANC√âE');
  console.log('============================');

  // Test de recherche avanc√©e
  try {
    const advancedResults = await engine.advancedSearch({
      query: 'conscience √©mergente',
      levels: [1, 0], // Seulement L1 et L0
      minRelevance: 0.3,
      maxResults: 5,
      includeMem0: true
    });

    console.log(`‚úÖ Recherche avanc√©e: ${advancedResults.length} r√©sultats`);
    
    advancedResults.forEach((result, index) => {
      console.log(`   ${index + 1}. [L${result.level}] ${result.content.substring(0, 60)}...`);
      console.log(`      Pertinence: ${(result.relevance * 100).toFixed(1)}% | Source: ${result.source}`);
    });
  } catch (error) {
    console.error('‚ùå Erreur recherche avanc√©e:', error);
  }

  console.log('\nüìä STATISTIQUES DE RECHERCHE');
  console.log('============================');

  try {
    const searchStats = engine.getSearchStats();
    console.log(`‚úÖ Archives totales: ${searchStats.totalArchives}`);
    console.log(`‚úÖ R√©partition par niveau:`);
    for (let level = 0; level <= 3; level++) {
      const count = searchStats.archivesByLevel[level] || 0;
      if (count > 0) {
        console.log(`   - Niveau ${level}: ${count} √©l√©ments`);
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur statistiques:', error);
  }

  console.log('\nüéâ TEST TERMIN√â AVEC SUCC√àS !');
  console.log('==============================');
  console.log('‚úÖ SimpleSearchEngine fonctionnel');
  console.log('‚úÖ Recherche avec d√©compression op√©rationnelle');
  console.log('‚úÖ Fallback Mem0 impl√©ment√©');
  console.log('‚úÖ Recherche avanc√©e disponible');
  console.log('‚úÖ Statistiques de recherche accessibles');
}

// Ex√©cution du test
if (require.main === module) {
  testSimpleSearchEngine().catch(console.error);
}