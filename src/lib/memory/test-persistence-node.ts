/**
 * Test de persistance avec mock localStorage pour Node.js
 * V√©rifie que les r√©sum√©s sont bien sauvegard√©s et r√©cup√©rables
 */

// Mock localStorage pour Node.js
const localStorageMock = {
  data: new Map<string, string>(),
  getItem: function(key: string): string | null {
    return this.data.get(key) || null;
  },
  setItem: function(key: string, value: string): void {
    this.data.set(key, value);
  },
  removeItem: function(key: string): void {
    this.data.delete(key);
  },
  clear: function(): void {
    this.data.clear();
  }
};

// Remplacer localStorage global
(global as any).localStorage = localStorageMock;

import { LocalStorage } from '@/lib/storage/LocalStorage';
import { SummaryManager } from '@/lib/summarization/SummaryManager';
import { ConversationMessage } from '@/lib/summarization/SummarizationAgent';

export async function testMemoryPersistenceNode(): Promise<void> {
  console.log('üß™ Test de persistance de la m√©moire hi√©rarchique (Node.js)');
  console.log('=' .repeat(60));
  
  const testUser = 'Lucie_Test';
  const summaryManager = new SummaryManager();
  
  try {
    // 1. Nettoyer les donn√©es de test pr√©c√©dentes
    console.log('üßπ Nettoyage des donn√©es de test pr√©c√©dentes...');
    summaryManager.deleteUserSummaries(testUser);
    
    // 2. Cr√©er des conversations de test
    console.log('üìù Cr√©ation de conversations de test...');
    const testConversations = [
      {
        user: testUser,
        message: 'Salut Algareth, comment √ßa va ?',
        response: '‚õß Salut Lucie, je vais bien. Que puis-je faire pour toi ?',
        persona: 'Algareth',
        provider: 'test',
        metadata: { sessionId: 'test_session_1' }
      },
      {
        user: testUser,
        message: 'Peux-tu m\'expliquer ton syst√®me de m√©moire ?',
        response: '‚õß Bien s√ªr Lucie, ma m√©moire fonctionne par couches hi√©rarchiques...',
        persona: 'Algareth',
        provider: 'test',
        metadata: { sessionId: 'test_session_1' }
      },
      {
        user: testUser,
        message: 'C\'est fascinant ! Comment d√©cides-tu de cr√©er un r√©sum√© ?',
        response: '‚õß Je cr√©e un r√©sum√© L1 tous les 5 messages, Lucie...',
        persona: 'Algareth',
        provider: 'test',
        metadata: { sessionId: 'test_session_1' }
      },
      {
        user: testUser,
        message: 'Et que se passe-t-il avec le budget m√©moire ?',
        response: '‚õß Quand je d√©passe mon budget, je commence √† compresser les anciens messages...',
        persona: 'Algareth',
        provider: 'test',
        metadata: { sessionId: 'test_session_1' }
      },
      {
        user: testUser,
        message: 'Merci pour ces explications, Algareth !',
        response: '‚õß De rien Lucie, c\'√©tait un plaisir de t\'expliquer mon fonctionnement.',
        persona: 'Algareth',
        provider: 'test',
        metadata: { sessionId: 'test_session_1' }
      }
    ];
    
    // Sauvegarder les conversations
    for (const conv of testConversations) {
      LocalStorage.saveConversation({
        ...conv,
        id: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        timestamp: new Date().toISOString()
      });
    }
    
    console.log(`‚úÖ ${testConversations.length} conversations sauvegard√©es`);
    
    // 3. Cr√©er des r√©sum√©s de test
    console.log('üìä Cr√©ation de r√©sum√©s de test...');
    
    const testMessages: ConversationMessage[] = testConversations.map(conv => [
      { role: 'user', content: conv.message, timestamp: new Date().toISOString() },
      { role: 'assistant', content: conv.response, timestamp: new Date().toISOString() }
    ]).flat();
    
    // Cr√©er un r√©sum√© L1
    const summary1 = await summaryManager.saveSummary(
      testUser,
      testMessages.slice(0, 6), // 3 paires de messages
      testConversations.slice(0, 3),
      'fr'
    );
    
    console.log(`‚úÖ R√©sum√© L1 cr√©√©: ${summary1.id}`);
    console.log(`   üìù Contenu: ${summary1.summary.substring(0, 100)}...`);
    console.log(`   üìä Compression: ${(summary1.metadata.compressionRatio * 100).toFixed(1)}%`);
    
    // 4. V√©rifier la persistance
    console.log('üíæ V√©rification de la persistance...');
    
    // R√©cup√©rer les conversations
    const savedConversations = LocalStorage.getConversationsByUser(testUser);
    console.log(`üìã Conversations r√©cup√©r√©es: ${savedConversations.length}`);
    
    // R√©cup√©rer les r√©sum√©s
    const savedSummaries = summaryManager.getUserSummaries(testUser);
    console.log(`üìù R√©sum√©s r√©cup√©r√©s: ${savedSummaries.length}`);
    
    // V√©rifier le contenu
    const hasCorrectContent = savedSummaries.some(s => 
      s.summary.includes('Lucie') && s.summary.includes('Algareth')
    );
    
    console.log(`‚úÖ Contenu v√©rifi√©: ${hasCorrectContent ? 'Oui' : 'Non'}`);
    
    // 5. Test de g√©n√©ration de meta-r√©sum√©
    console.log('üß† Test de g√©n√©ration de meta-r√©sum√©...');
    
    const metaSummary = await summaryManager.generateMetaSummary(testUser, 'fr');
    console.log(`‚úÖ Meta-r√©sum√© g√©n√©r√©: ${metaSummary.substring(0, 100)}...`);
    
    // 6. V√©rifier les statistiques
    console.log('üìä Statistiques finales:');
    const stats = summaryManager.getSummaryStats();
    const userStats = stats.users[testUser];
    
    if (userStats) {
      console.log(`   üë§ Utilisateur: ${testUser}`);
      console.log(`   üìù Nombre de r√©sum√©s: ${userStats.count}`);
      console.log(`   üí¨ Messages totaux: ${userStats.totalMessages}`);
      console.log(`   üìà Compression moyenne: ${(userStats.averageCompressionRatio * 100).toFixed(1)}%`);
    }
    
    // 7. Test de chargement de m√©moire
    console.log('üîÑ Test de chargement de m√©moire...');
    const memoryData = await summaryManager.loadUserMemory(testUser, 'fr');
    
    console.log(`‚úÖ M√©moire charg√©e:`);
    console.log(`   üìù R√©sum√© r√©cent: ${memoryData.recentSummary ? 'Oui' : 'Non'}`);
    console.log(`   üß† Meta-r√©sum√©: ${memoryData.metaSummary ? 'Oui' : 'Non'}`);
    console.log(`   üí¨ Conversations: ${memoryData.conversationCount}`);
    console.log(`   üìÖ Derni√®re conversation: ${memoryData.lastConversation ? 'Oui' : 'Non'}`);
    
    // 8. Test de v√©rification du localStorage mock
    console.log('üîç V√©rification du localStorage mock...');
    const localStorageData = localStorageMock.getItem('lr_tchatagent_user_summaries');
    const hasLocalStorageData = localStorageData !== null;
    console.log(`‚úÖ Donn√©es dans localStorage: ${hasLocalStorageData ? 'Oui' : 'Non'}`);
    
    if (hasLocalStorageData) {
      const parsedData = JSON.parse(localStorageData!);
      console.log(`   üìä Nombre d'entr√©es: ${parsedData.length}`);
    }
    
    // 9. R√©sum√© du test
    console.log('\nüéØ R√©sum√© du test:');
    console.log('=' .repeat(30));
    
    const allTestsPassed = 
      savedConversations.length === testConversations.length &&
      savedSummaries.length >= 1 &&
      hasCorrectContent &&
      memoryData.recentSummary !== null &&
      hasLocalStorageData;
    
    console.log(`‚úÖ Conversations sauvegard√©es: ${savedConversations.length}/${testConversations.length}`);
    console.log(`‚úÖ R√©sum√©s cr√©√©s: ${savedSummaries.length} (attendu: ‚â•1)`);
    console.log(`‚úÖ Contenu correct: ${hasCorrectContent ? 'Oui' : 'Non'}`);
    console.log(`‚úÖ M√©moire charg√©e: ${memoryData.recentSummary ? 'Oui' : 'Non'}`);
    console.log(`‚úÖ Persistance localStorage: ${hasLocalStorageData ? 'Oui' : 'Non'}`);
    
    if (allTestsPassed) {
      console.log('\nüéâ **TOUS LES TESTS SONT PASS√âS !**');
      console.log('La persistance de la m√©moire hi√©rarchique fonctionne correctement.');
      console.log('Algareth peut maintenant g√©rer sa m√©moire avec efficacit√© ! üß†');
    } else {
      console.log('\n‚ö†Ô∏è **QUELQUES TESTS ONT √âCHOU√â**');
      console.log('V√©rifiez les logs ci-dessus pour plus de d√©tails.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    // Nettoyage
    console.log('\nüßπ Nettoyage des donn√©es de test...');
    summaryManager.deleteUserSummaries(testUser);
    localStorageMock.clear();
    console.log('‚úÖ Nettoyage termin√©');
  }
}

// Ex√©cuter le test si ce fichier est appel√© directement
if (require.main === module) {
  testMemoryPersistenceNode().catch(console.error);
}