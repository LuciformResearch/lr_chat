/**
 * Test complet du moteur de m√©moire avanc√© avec compression hi√©rarchique
 */

import { AdvancedMemoryEngine } from './advanced-memory-engine';

async function testAdvancedMemory() {
  console.log('üß™ Test du moteur de m√©moire avanc√©');
  console.log('============================================================');

  // Cr√©er un moteur avec un budget tr√®s petit pour forcer la compression
  const engine = new AdvancedMemoryEngine(500, 3, 0.5); // Budget: 500 chars, L1 tous les 3 messages

  // Simuler une conversation longue
  const conversation = [
    { role: 'user' as const, content: 'Salut Algareth, comment √ßa va ?' },
    { role: 'assistant' as const, content: '‚õß Salut Lucie, je vais bien, merci !' },
    { role: 'user' as const, content: 'Tu peux m\'expliquer ton syst√®me de m√©moire ?' },
    { role: 'assistant' as const, content: '‚õß Bien s√ªr ! Mon syst√®me utilise des r√©sum√©s hi√©rarchiques...' },
    { role: 'user' as const, content: 'C\'est fascinant ! Et comment tu g√®res la compression ?' },
    { role: 'assistant' as const, content: '‚õß La compression se fait par niveaux L1, L2, L3...' },
    { role: 'user' as const, content: 'Parfait ! Merci pour ces explications.' },
    { role: 'assistant' as const, content: '‚õß De rien Lucie, c\'√©tait un plaisir !' },
    { role: 'user' as const, content: 'Une derni√®re question : tu te souviens de tout ?' },
    { role: 'assistant' as const, content: '‚õß Oui, gr√¢ce √† mon syst√®me d\'archivage intelligent !' },
    { role: 'user' as const, content: 'Super ! Et comment tu g√®res les sujets complexes ?' },
    { role: 'assistant' as const, content: '‚õß Je utilise des topics et des r√©sum√©s structur√©s...' },
    { role: 'user' as const, content: 'Impressionnant ! Tu as d\'autres capacit√©s ?' },
    { role: 'assistant' as const, content: '‚õß Oui, je peux aussi faire de la compression adaptative...' },
    { role: 'user' as const, content: 'Wow ! C\'est vraiment avanc√©.' },
    { role: 'assistant' as const, content: '‚õß Merci Lucie, c\'est le fruit de nombreuses optimisations !' }
  ];

  console.log('üìù Simulation d\'une conversation de 16 messages...');
  
  const actions: any[] = [];
  
  // Ajouter les messages un par un et observer les actions
  for (let i = 0; i < conversation.length; i++) {
    const msg = conversation[i];
    const action = engine.addMessage(msg.content, msg.role, 'Lucie');
    
    if (action.action !== 'NONE') {
      actions.push(action);
      console.log(`\nüéØ Action: ${action.action}`);
      if (action.summaries.length > 0) {
        console.log(`   R√©sum√©s cr√©√©s: ${action.summaries.length}`);
        action.summaries.forEach(summary => {
          console.log(`     - ${summary.id} (L${summary.level}): ${summary.text}`);
        });
      }
      if (action.evictions.length > 0) {
        console.log(`   Messages supprim√©s: ${action.evictions.length}`);
      }
    }
    
    // Afficher les stats apr√®s chaque action significative
    if (action.action !== 'NONE') {
      const stats = engine.getStats();
      console.log(`   üìä Stats: ${stats.rawMessages} bruts, ${stats.summaries.l1} L1, ${stats.summaries.l2} L2, ${stats.summaries.l3} L3`);
      console.log(`   üí∞ Budget: ${stats.budget.current}/${stats.budget.max} (${stats.budget.percentage}%)`);
      console.log(`   üìà Ratio r√©sum√©s: ${stats.summaryRatio}%`);
    }
  }

  console.log('\nüìä Analyse finale...');
  
  // Statistiques finales
  const finalStats = engine.getStats();
  console.log('\nüìà Statistiques finales:');
  console.log(`   Total items: ${finalStats.totalItems}`);
  console.log(`   Messages bruts: ${finalStats.rawMessages}`);
  console.log(`   R√©sum√©s L1: ${finalStats.summaries.l1}`);
  console.log(`   R√©sum√©s L2: ${finalStats.summaries.l2}`);
  console.log(`   R√©sum√©s L3: ${finalStats.summaries.l3}`);
  console.log(`   Budget: ${finalStats.budget.current}/${finalStats.budget.max} (${finalStats.budget.percentage}%)`);
  console.log(`   Ratio r√©sum√©s: ${finalStats.summaryRatio}%`);

  // Test de construction de contexte
  console.log('\nüß† Test de construction de contexte...');
  const context = engine.buildContext('test query', 300);
  console.log('üìù Contexte g√©n√©r√©:');
  console.log(context);

  // Test d'export
  console.log('\nüíæ Test d\'export...');
  const exportData = engine.exportMemory();
  console.log(`üìã Export: ${exportData.items.length} items`);

  // Analyse des actions
  console.log('\nüéØ Analyse des actions:');
  const actionCounts = actions.reduce((acc, action) => {
    acc[action.action] = (acc[action.action] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  
  Object.entries(actionCounts).forEach(([action, count]) => {
    console.log(`   ${action}: ${count} fois`);
  });

  // V√©rifier la coh√©rence
  console.log('\n‚úÖ V√©rifications de coh√©rence:');
  
  // 1. Budget respect√©
  const budgetOk = finalStats.budget.percentage <= 100;
  console.log(`   Budget respect√©: ${budgetOk ? '‚úÖ' : '‚ùå'}`);
  
  // 2. Compression active
  const compressionActive = finalStats.summaryRatio > 0;
  console.log(`   Compression active: ${compressionActive ? '‚úÖ' : '‚ùå'}`);
  
  // 3. Hi√©rarchie pr√©sente
  const hierarchyPresent = finalStats.summaries.l2 > 0 || finalStats.summaries.l3 > 0;
  console.log(`   Hi√©rarchie pr√©sente: ${hierarchyPresent ? '‚úÖ' : '‚ùå'}`);
  
  // 4. Contexte construit
  const contextBuilt = context.length > 0;
  console.log(`   Contexte construit: ${contextBuilt ? '‚úÖ' : '‚ùå'}`);

  console.log('\nüéØ R√©sum√© du test:');
  console.log('==============================');
  console.log(`‚úÖ Budget respect√©: ${budgetOk ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Compression active: ${compressionActive ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Hi√©rarchie pr√©sente: ${hierarchyPresent ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Contexte construit: ${contextBuilt ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Actions ex√©cut√©es: ${actions.length}`);
  
  if (budgetOk && compressionActive && contextBuilt) {
    console.log('\nüéâ SUCC√àS: Le moteur de m√©moire avanc√© fonctionne parfaitement !');
  } else {
    console.log('\n‚ö†Ô∏è  ATTENTION: Certains tests ont √©chou√©');
  }
}

// Ex√©cuter le test
testAdvancedMemory().catch(console.error);