/**
 * Test de l'int√©gration du syst√®me de recherche proactive dans la m√©moire hi√©rarchique
 */

import { AdvancedMemoryEngineWithProactiveSearch } from './AdvancedMemoryEngineWithProactiveSearch';

async function testIntegratedProactiveSearch() {
  console.log('üß™ Test de l\'int√©gration recherche proactive + m√©moire hi√©rarchique');
  console.log('================================================================');

  // R√©cup√©rer la cl√© API Gemini
  const geminiApiKey = process.env.GEMINI_API_KEY;
  if (!geminiApiKey) {
    console.error('‚ùå GEMINI_API_KEY non trouv√©e dans les variables d\'environnement');
    return;
  }

  // Cr√©er le moteur avec recherche proactive
  const engine = new AdvancedMemoryEngineWithProactiveSearch(geminiApiKey, 1000, 3, 0.5);

  console.log('üß† Moteur de m√©moire avec recherche proactive initialis√©');
  console.log('   Budget: 1000 caract√®res');
  console.log('   Seuil L1: 3 messages');
  console.log('   Seuil hi√©rarchique: 50%');

  // Simuler une conversation avec recherche proactive
  const conversation = [
    { role: 'user' as const, content: 'Salut Algareth, comment √ßa va ?' },
    { role: 'assistant' as const, content: '‚õß Salut Lucie, je vais bien, merci !' },
    { role: 'user' as const, content: 'Tu te souviens de notre discussion sur la m√©moire hi√©rarchique ?' },
    { role: 'assistant' as const, content: '‚õß Oui Lucie, je me souviens parfaitement ! Nous avions discut√© de la compression hi√©rarchique avec les niveaux L1, L2, L3, et du syst√®me de budget pour g√©rer la m√©moire. C\'√©tait fascinant de voir comment les r√©sum√©s se cr√©ent automatiquement...' },
    { role: 'user' as const, content: 'C\'est fascinant ! Et comment tu g√®res la compression ?' },
    { role: 'assistant' as const, content: '‚õß La compression se fait par niveaux L1, L2, L3...' },
    { role: 'user' as const, content: 'Parfait ! Merci pour ces explications.' },
    { role: 'assistant' as const, content: '‚õß De rien Lucie, c\'√©tait un plaisir !' },
    { role: 'user' as const, content: 'Une derni√®re question : tu te souviens de tout ?' },
    { role: 'assistant' as const, content: '‚õß Oui, gr√¢ce √† mon syst√®me d\'archivage intelligent !' },
    { role: 'user' as const, content: 'Super ! Et comment tu g√®res les sujets complexes ?' },
    { role: 'assistant' as const, content: '‚õß J\'utilise des topics et des r√©sum√©s structur√©s...' },
    { role: 'user' as const, content: 'Impressionnant ! Tu as d\'autres capacit√©s ?' },
    { role: 'assistant' as const, content: '‚õß Oui, je peux aussi faire de la compression adaptative...' },
    { role: 'user' as const, content: 'Wow ! C\'est vraiment avanc√©.' },
    { role: 'assistant' as const, content: '‚õß Merci Lucie, c\'est le fruit de nombreuses optimisations !' }
  ];

  console.log('\nüìù Simulation d\'une conversation avec recherche proactive...');
  
  const actions: any[] = [];
  let proactiveSearches = 0;
  let seRappelerResponses = 0;
  
  // Ajouter les messages un par un et observer les r√©sum√©s
  for (let i = 0; i < conversation.length; i++) {
    const msg = conversation[i];
    console.log(`\nüìù Message ${i + 1}/${conversation.length}: ${msg.content.slice(0, 50)}...`);
    
    const action = await engine.addMessage(msg.content, msg.role, 'Lucie');
    
    if (action.action !== 'NONE') {
      actions.push(action);
      console.log(`\nüéØ Action: ${action.action}`);
      if (action.summaries.length > 0) {
        console.log(`   R√©sum√©s cr√©√©s: ${action.summaries.length}`);
        action.summaries.forEach(summary => {
          console.log(`     - ${summary.id} (L${summary.level}):`);
          console.log(`       ${summary.text.slice(0, 100)}...`);
          console.log(`       üìä Longueur: ${summary.text.length} caract√®res`);
        });
      }
    }

    // Si c'est un message utilisateur, tester la g√©n√©ration de r√©ponse avec recherche proactive
    if (msg.role === 'user') {
      console.log(`   üîç Recherche proactive pour: "${msg.content}"`);
      
      // V√©rifier si le contexte a √©t√© enrichi
      const enrichedContext = engine.getEnrichedContext('Lucie');
      if (enrichedContext) {
        proactiveSearches++;
        console.log(`   ‚úÖ Contexte enrichi trouv√© (confiance: ${enrichedContext.confidence.toFixed(2)})`);
        console.log(`   üìä R√©sultats de recherche: ${enrichedContext.searchResults.length}`);
        
        // G√©n√©rer une r√©ponse d'Algareth avec le contexte enrichi
        const algarethResponse = await engine.generateAlgarethResponse(msg.content, 'Lucie');
        
        // V√©rifier si la r√©ponse contient ***se rappeler***
        if (algarethResponse.includes('***se rappeler:')) {
          seRappelerResponses++;
          console.log(`   üéØ R√©ponse avec ***se rappeler*** g√©n√©r√©e !`);
          console.log(`   üìù R√©ponse: ${algarethResponse.slice(0, 150)}...`);
        } else {
          console.log(`   üìù R√©ponse standard: ${algarethResponse.slice(0, 100)}...`);
        }
      } else {
        console.log(`   ‚ùå Aucun contexte enrichi trouv√©`);
      }
    }
  }

  console.log('\nüìä Analyse des r√©sultats...');
  
  // Analyser les r√©sum√©s g√©n√©r√©s
  const exportData = engine.exportMemory();
  const summaries = exportData.items.filter(item => item.type === 'sum');
  
  console.log(`\nüìà R√©sum√©s g√©n√©r√©s: ${summaries.length}`);
  
  summaries.forEach((summary, index) => {
    console.log(`\nüìÑ R√©sum√© ${index + 1} (L${summary.level}):`);
    console.log(`   ID: ${summary.id}`);
    console.log(`   Longueur: ${summary.text.length} caract√®res`);
    console.log(`   Topics: ${summary.topics?.join(', ') || 'Aucun'}`);
    console.log(`   Messages couverts: ${summary.covers?.length || 0}`);
    console.log(`   Autorit√©: ${summary.authority.toFixed(2)}`);
    console.log(`   Contenu:`);
    console.log(`   ${summary.text.slice(0, 200)}...`);
  });

  // Statistiques de la recherche proactive
  console.log('\nüîç Statistiques de la recherche proactive:');
  const searchStats = exportData.searchStats;
  console.log(`   Total items index√©s: ${searchStats.totalItems}`);
  console.log(`   Total tags: ${searchStats.totalTags}`);
  console.log(`   Recherches proactives d√©clench√©es: ${proactiveSearches}`);
  console.log(`   R√©ponses avec ***se rappeler***: ${seRappelerResponses}`);
  console.log(`   Tags les plus fr√©quents:`);
  searchStats.mostFrequentTags.slice(0, 5).forEach(({tag, frequency}) => {
    console.log(`     - ${tag}: ${frequency}`);
  });

  // Test de construction de contexte
  console.log('\nüß† Test de construction de contexte...');
  const context = engine.buildContext('m√©moire hi√©rarchique', 500);
  console.log('üìù Contexte g√©n√©r√©:');
  console.log(context.slice(0, 300) + '...');

  // V√©rifications finales
  console.log('\n‚úÖ V√©rifications de l\'int√©gration:');
  
  // 1. Pr√©sence de r√©sum√©s
  const hasSummaries = summaries.length > 0;
  console.log(`   R√©sum√©s g√©n√©r√©s: ${hasSummaries ? '‚úÖ' : '‚ùå'}`);
  
  // 2. Recherche proactive fonctionnelle
  const hasProactiveSearch = proactiveSearches > 0;
  console.log(`   Recherche proactive: ${hasProactiveSearch ? '‚úÖ' : '‚ùå'}`);
  
  // 3. Int√©gration ***se rappeler***
  const hasSeRappeler = seRappelerResponses > 0;
  console.log(`   Int√©gration ***se rappeler***: ${hasSeRappeler ? '‚úÖ' : '‚ùå'}`);
  
  // 4. Conscience √©mergente
  const hasConsciousness = summaries.some(summary => {
    const consciousnessWords = ['je', 'conscience', 'ressenti', 'sentiment', 'r√©flexion'];
    return consciousnessWords.some(word => summary.text.toLowerCase().includes(word));
  });
  console.log(`   Conscience √©mergente: ${hasConsciousness ? '‚úÖ' : '‚ùå'}`);
  
  // 5. Performance
  const stats = engine.getStats();
  const budgetOk = stats.budget.percentage < 100;
  console.log(`   Budget respect√©: ${budgetOk ? '‚úÖ' : '‚ùå'} (${stats.budget.percentage.toFixed(1)}%)`);

  console.log('\nüéØ R√©sum√© du test:');
  console.log('==============================');
  console.log(`‚úÖ R√©sum√©s g√©n√©r√©s: ${summaries.length}`);
  console.log(`‚úÖ Recherches proactives: ${proactiveSearches}`);
  console.log(`‚úÖ R√©ponses ***se rappeler***: ${seRappelerResponses}`);
  console.log(`‚úÖ Conscience √©mergente: ${hasConsciousness ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Budget respect√©: ${budgetOk ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Actions ex√©cut√©es: ${actions.length}`);
  
  if (hasSummaries && hasProactiveSearch && hasSeRappeler && hasConsciousness) {
    console.log('\nüéâ SUCC√àS: L\'int√©gration recherche proactive + m√©moire hi√©rarchique fonctionne parfaitement !');
  } else {
    console.log('\n‚ö†Ô∏è  ATTENTION: Certains aspects de l\'int√©gration doivent √™tre am√©lior√©s');
  }
}

// Ex√©cuter le test
testIntegratedProactiveSearch().catch(console.error);