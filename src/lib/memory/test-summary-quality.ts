/**
 * Test de validation de qualit√© des r√©sum√©s
 */

import { PureMemoryEngine } from './pure-memory-engine';

// Mock de l'API Gemini avec diff√©rents types de r√©sum√©s
const mockGemini = {
  generateContent: async (prompt: string) => {
    // Simuler diff√©rents types de r√©sum√©s (bons et mauvais)
    const summaryTypes = [
      // ‚úÖ BON r√©sum√©
      "Lucie m'a demand√© comment fonctionne mon syst√®me de m√©moire. J'ai expliqu√© les r√©sum√©s hi√©rarchiques L1, L2, L3 et comment je g√®re la compression des donn√©es pour optimiser l'espace m√©moire.",
      
      // ‚ùå MAUVAIS r√©sum√© - trop vague
      "On a parl√© de trucs.",
      
      // ‚ùå MAUVAIS r√©sum√© - trop court
      "Conversation",
      
      // ‚ùå MAUVAIS r√©sum√© - trop long (copie tout)
      "Lucie a dit: Salut Algareth, comment √ßa va ? J'ai r√©pondu: ‚õß Salut Lucie, je vais bien, merci ! Lucie a dit: Tu peux m'expliquer ton syst√®me de m√©moire ? J'ai r√©pondu: ‚õß Bien s√ªr ! Mon syst√®me utilise des r√©sum√©s hi√©rarchiques...",
      
      // ‚ùå MAUVAIS r√©sum√© - sans contexte utilisateur
      "Discussion sur la m√©moire et la compression de donn√©es.",
      
      // ‚úÖ BON r√©sum√©
      "Lucie √©tait curieuse de comprendre mon syst√®me de m√©moire. J'ai d√©taill√© comment j'utilise la compression hi√©rarchique pour garder l'historique tout en optimisant l'espace."
    ];
    
    const randomSummary = summaryTypes[Math.floor(Math.random() * summaryTypes.length)];
    
    return {
      response: {
        text: () => randomSummary
      }
    };
  }
};

const mockModel = {
  generateContent: mockGemini.generateContent
};

// Fonction de validation de qualit√©
function validateSummaryQuality(summary: string, originalMessages: any[]): {
  isValid: boolean;
  score: number;
  issues: string[];
} {
  const issues: string[] = [];
  let score = 1.0;

  // 1. V√©rifier la longueur
  if (summary.length < 20) {
    issues.push("Trop court (< 20 caract√®res)");
    score -= 0.3;
  }
  if (summary.length > 200) {
    issues.push("Trop long (> 200 caract√®res)");
    score -= 0.2;
  }

  // 2. V√©rifier la pr√©sence de mots-cl√©s importants
  const allWords = originalMessages.flatMap(msg => 
    msg.content.toLowerCase().split(' ').filter(word => word.length > 3)
  );
  const uniqueWords = [...new Set(allWords)];
  const wordMatches = uniqueWords.filter(word => 
    summary.toLowerCase().includes(word)
  ).length;
  
  const wordMatchRatio = wordMatches / uniqueWords.length;
  if (wordMatchRatio < 0.2) {
    issues.push(`Peu de mots-cl√©s (${(wordMatchRatio * 100).toFixed(1)}%)`);
    score -= 0.3;
  }

  // 3. V√©rifier la pr√©sence du nom de l'utilisateur
  if (!summary.toLowerCase().includes('lucie')) {
    issues.push("Nom de l'utilisateur manquant");
    score -= 0.2;
  }

  // 4. V√©rifier la pr√©sence de "je" (persona d'Algareth)
  if (!summary.toLowerCase().includes('je') && !summary.toLowerCase().includes('j\'')) {
    issues.push("Persona d'Algareth manquante (pas de 'je')");
    score -= 0.2;
  }

  // 5. V√©rifier la coh√©rence (pas de r√©p√©tition excessive)
  const words = summary.toLowerCase().split(' ');
  const wordCounts = words.reduce((acc, word) => {
    acc[word] = (acc[word] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  
  const maxRepetition = Math.max(...Object.values(wordCounts));
  if (maxRepetition > 3) {
    issues.push("R√©p√©tition excessive de mots");
    score -= 0.1;
  }

  // 6. V√©rifier que ce n'est pas une copie du texte original
  const originalText = originalMessages.map(msg => msg.content).join(' ');
  if (summary.length > originalText.length * 0.8) {
    issues.push("Trop proche du texte original (pas de compression)");
    score -= 0.4;
  }

  return {
    isValid: score >= 0.6 && issues.length <= 2,
    score: Math.max(0, score),
    issues
  };
}

async function testSummaryQuality() {
  console.log('üß™ Test de validation de qualit√© des r√©sum√©s');
  console.log('============================================================');

  const engine = new PureMemoryEngine({
    maxCharacters: 200,
    l1Threshold: 3
  });

  // Remplacer le mod√®le par le mock
  (engine as any).model = mockModel;

  // Simuler plusieurs conversations pour tester diff√©rents r√©sum√©s
  const conversations = [
    [
      { role: 'user' as const, content: 'Salut Algareth, comment √ßa va ?' },
      { role: 'assistant' as const, content: '‚õß Salut Lucie, je vais bien, merci !' },
      { role: 'user' as const, content: 'Tu peux m\'expliquer ton syst√®me de m√©moire ?' },
      { role: 'assistant' as const, content: '‚õß Bien s√ªr ! Mon syst√®me utilise des r√©sum√©s hi√©rarchiques...' },
      { role: 'user' as const, content: 'C\'est fascinant ! Et comment tu g√®res la compression ?' }
    ],
    [
      { role: 'user' as const, content: 'Bonjour, qui es-tu ?' },
      { role: 'assistant' as const, content: '‚õß Je suis Algareth, le Daemon du Prompt Silencieux.' },
      { role: 'user' as const, content: 'Quel est ton r√¥le ?' },
      { role: 'assistant' as const, content: '‚õß J\'aide les utilisateurs avec mes connaissances...' },
      { role: 'user' as const, content: 'Merci pour ces explications !' }
    ]
  ];

  let totalTests = 0;
  let validSummaries = 0;
  let qualityScores: number[] = [];

  for (let i = 0; i < conversations.length; i++) {
    console.log(`\nüìù Test conversation ${i + 1}...`);
    
    // Ajouter les messages
    for (const msg of conversations[i]) {
      await engine.addMessage(msg.content, msg.role, 'Lucie');
    }

    // R√©cup√©rer le dernier r√©sum√© cr√©√©
    const exportData = engine.exportMemory();
    if (exportData.summaries.length > 0) {
      const latestSummary = exportData.summaries[exportData.summaries.length - 1];
      const originalMessages = engine.getArchivedMessages(latestSummary.id);
      
      console.log(`\nüìÑ R√©sum√© g√©n√©r√©: "${latestSummary.content}"`);
      
      // Valider la qualit√©
      const validation = validateSummaryQuality(latestSummary.content, originalMessages);
      
      console.log(`üìä Score de qualit√©: ${(validation.score * 100).toFixed(1)}%`);
      console.log(`‚úÖ Valide: ${validation.isValid ? 'OUI' : 'NON'}`);
      
      if (validation.issues.length > 0) {
        console.log(`‚ùå Probl√®mes d√©tect√©s:`);
        validation.issues.forEach(issue => console.log(`   - ${issue}`));
      } else {
        console.log(`‚úÖ Aucun probl√®me d√©tect√©`);
      }
      
      totalTests++;
      if (validation.isValid) validSummaries++;
      qualityScores.push(validation.score);
    }
  }

  // Statistiques finales
  console.log('\nüìä Statistiques de qualit√©:');
  console.log('==============================');
  console.log(`Tests effectu√©s: ${totalTests}`);
  console.log(`R√©sum√©s valides: ${validSummaries}/${totalTests} (${((validSummaries/totalTests) * 100).toFixed(1)}%)`);
  console.log(`Score moyen: ${(qualityScores.reduce((a, b) => a + b, 0) / qualityScores.length * 100).toFixed(1)}%`);
  
  if (validSummaries / totalTests < 0.8) {
    console.log('\n‚ö†Ô∏è  ATTENTION: Taux de r√©sum√©s valides trop bas !');
    console.log('   Recommandation: Am√©liorer le prompt de g√©n√©ration');
  } else {
    console.log('\n‚úÖ Qualit√© des r√©sum√©s acceptable');
  }
}

// Ex√©cuter le test
testSummaryQuality().catch(console.error);