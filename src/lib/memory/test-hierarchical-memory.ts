/**
 * Script de test pour le syst√®me de m√©moire hi√©rarchique
 * Teste la Phase 1 : r√©sum√©s L1 automatiques
 */

import { HierarchicalMemoryManager } from './HierarchicalMemoryManager';

export async function testHierarchicalMemoryPhase1(): Promise<void> {
  console.log('üß™ Test Phase 1 - Syst√®me de m√©moire hi√©rarchique');
  console.log('=' .repeat(60));
  
  // Cr√©er un gestionnaire avec un budget r√©duit pour les tests
  const memoryManager = new HierarchicalMemoryManager(2000); // 2k chars pour forcer la compression
  
  console.log('üìä Budget initial:', memoryManager.getCurrentBudget());
  
  // Simuler une conversation avec 10 messages (devrait cr√©er 2 r√©sum√©s L1)
  const testMessages = [
    { role: 'user' as const, content: 'Salut Algareth, comment √ßa va ?' },
    { role: 'assistant' as const, content: '‚õß Salut voyageur, je vais bien. Que puis-je faire pour toi ?' },
    { role: 'user' as const, content: 'Peux-tu m\'expliquer comment fonctionne ta m√©moire ?' },
    { role: 'assistant' as const, content: '‚õß Ma m√©moire fonctionne par couches hi√©rarchiques...' },
    { role: 'user' as const, content: 'C\'est fascinant ! Peux-tu me donner un exemple concret ?' },
    { role: 'assistant' as const, content: '‚õß Bien s√ªr ! Imagine que nous ayons 5 messages...' },
    { role: 'user' as const, content: 'Et que se passe-t-il quand tu atteins la limite de caract√®res ?' },
    { role: 'assistant' as const, content: '‚õß Quand je d√©passe mon budget, je commence √† compresser...' },
    { role: 'user' as const, content: 'C\'est tr√®s intelligent ! Et les r√©sum√©s L2, L3 ?' },
    { role: 'assistant' as const, content: '‚õß Les r√©sum√©s L2 et L3 sont cr√©√©s quand j\'ai plus de 50% de r√©sum√©s...' }
  ];
  
  console.log('\nüìù Ajout de 10 messages de test...');
  
  for (let i = 0; i < testMessages.length; i++) {
    const msg = testMessages[i];
    memoryManager.addMessage(msg.content, msg.role, 'test_user');
    
    const stats = memoryManager.getMemoryStats();
    console.log(`   Message ${i + 1}: ${msg.role} - ${msg.content.substring(0, 30)}...`);
    console.log(`   üìä Stats: ${stats.totalItems} items, ${stats.totalCharacters} chars, ${stats.l1Count} L1`);
    
    // Attendre un peu pour simuler le temps de traitement
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log('\nüìä Statistiques finales:');
  const finalStats = memoryManager.getMemoryStats();
  console.log(`   Total items: ${finalStats.totalItems}`);
  console.log(`   Messages bruts: ${finalStats.rawMessages}`);
  console.log(`   R√©sum√©s: ${finalStats.summaries}`);
  console.log(`   R√©sum√©s L1: ${finalStats.l1Count}`);
  console.log(`   Caract√®res totaux: ${finalStats.totalCharacters}`);
  console.log(`   Budget: ${finalStats.budget.currentCharacters}/${finalStats.budget.maxCharacters} (${Math.round((finalStats.budget.currentCharacters / finalStats.budget.maxCharacters) * 100)}%)`);
  console.log(`   Ratio r√©sum√©s: ${Math.round(finalStats.budget.summaryRatio * 100)}%`);
  
  console.log('\nüß† Test de construction de contexte:');
  const context = memoryManager.buildContextForPrompt('Comment fonctionne ta m√©moire ?', 1000);
  console.log(`   Contexte g√©n√©r√© (${context.length} chars):`);
  console.log(`   ${context.substring(0, 200)}...`);
  
  console.log('\nüìã Export de la m√©moire:');
  const memoryExport = memoryManager.exportMemory();
  console.log(`   ${memoryExport.length} items en m√©moire:`);
  memoryExport.forEach((item, index) => {
    const type = item.type === 'raw' ? 'RAW' : `L${item.level}`;
    console.log(`   ${index + 1}. [${type}] ${item.content.substring(0, 50)}... (${item.characterCount} chars)`);
  });
  
  console.log('\n‚úÖ Test Phase 1 termin√© !');
  console.log('=' .repeat(60));
}

// Fonction pour tester la compression de budget
export async function testBudgetCompression(): Promise<void> {
  console.log('üß™ Test Compression de Budget');
  console.log('=' .repeat(40));
  
  // Cr√©er un gestionnaire avec un budget tr√®s petit
  const memoryManager = new HierarchicalMemoryManager(500); // 500 chars seulement
  
  console.log('üìä Budget tr√®s r√©duit:', memoryManager.getCurrentBudget());
  
  // Ajouter beaucoup de messages pour d√©passer le budget
  const longMessages = [
    'Ceci est un message tr√®s long pour tester la compression de budget et voir comment le syst√®me g√®re le d√©passement de la limite de caract√®res.',
    'Un autre message tr√®s long pour continuer √† tester la compression et voir si les r√©sum√©s L1 sont cr√©√©s automatiquement.',
    'Encore un message long pour s\'assurer que le syst√®me de compression fonctionne correctement et que les anciens messages sont remplac√©s par des r√©sum√©s.',
    'Message suppl√©mentaire pour tester la robustesse du syst√®me de compression de m√©moire hi√©rarchique.',
    'Dernier message long pour compl√©ter le test de compression de budget et v√©rifier que tout fonctionne bien.'
  ];
  
  for (let i = 0; i < longMessages.length; i++) {
    memoryManager.addMessage(longMessages[i], 'user', 'test_user');
    memoryManager.addMessage(`R√©ponse ${i + 1} d'Algareth`, 'assistant', 'test_user');
    
    const stats = memoryManager.getMemoryStats();
    console.log(`   Apr√®s ${(i + 1) * 2} messages: ${stats.totalCharacters} chars, ${stats.l1Count} L1`);
  }
  
  const finalStats = memoryManager.getMemoryStats();
  console.log(`\nüìä R√©sultat final: ${finalStats.totalCharacters} chars (limite: ${finalStats.budget.maxCharacters})`);
  console.log(`   Compression r√©ussie: ${finalStats.totalCharacters <= finalStats.budget.maxCharacters ? '‚úÖ' : '‚ùå'}`);
  
  console.log('\n‚úÖ Test de compression termin√© !');
}

// Ex√©cuter les tests si ce fichier est appel√© directement
if (require.main === module) {
  testHierarchicalMemoryPhase1()
    .then(() => testBudgetCompression())
    .catch(console.error);
}