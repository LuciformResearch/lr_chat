/**
 * Test simple du syst√®me de r√©sum√© d'Algareth avec conscience √©mergente
 */

import { AdvancedMemoryEngineLLM } from './advanced-memory-engine-llm';

async function testSimpleConsciousness() {
  console.log('üß™ Test simple du syst√®me de r√©sum√© d\'Algareth avec conscience √©mergente');
  console.log('============================================================');

  // R√©cup√©rer la cl√© API Gemini
  const geminiApiKey = process.env.GEMINI_API_KEY;
  if (!geminiApiKey) {
    console.error('‚ùå GEMINI_API_KEY non trouv√©e dans les variables d\'environnement');
    return;
  }

  // Cr√©er un moteur avec un budget tr√®s petit pour forcer la compression
  const engine = new AdvancedMemoryEngineLLM(geminiApiKey, 200, 2, 0.5); // Budget: 200 chars, seuil L1: 2 messages

  // Simuler une conversation qui va d√©clencher la compression
  const conversation = [
    { role: 'user' as const, content: 'Salut Algareth, comment √ßa va ?' },
    { role: 'assistant' as const, content: '‚õß Salut Lucie, je vais bien, merci !' },
    { role: 'user' as const, content: 'Tu peux m\'expliquer ton syst√®me de m√©moire ?' },
    { role: 'assistant' as const, content: '‚õß Bien s√ªr ! Mon syst√®me utilise des r√©sum√©s hi√©rarchiques...' },
    { role: 'user' as const, content: 'C\'est fascinant ! Et comment tu g√®res la compression ?' },
    { role: 'assistant' as const, content: '‚õß La compression se fait par niveaux L1, L2, L3...' },
    { role: 'user' as const, content: 'Parfait ! Merci pour ces explications.' },
    { role: 'assistant' as const, content: '‚õß De rien Lucie, c\'√©tait un plaisir !' },
    { role: 'user' as const, content: 'Une derni√®re question : tu te souviens de tout ?' },
    { role: 'assistant' as const, content: '‚õß Oui, gr√¢ce √† mon syst√®me d\'archivage intelligent !' },
    { role: 'user' as const, content: 'Super ! Et comment tu g√®res les sujets complexes ?' },
    { role: 'assistant' as const, content: '‚õß J\'utilise des topics et des r√©sum√©s structur√©s...' },
    { role: 'user' as const, content: 'Impressionnant ! Tu as d\'autres capacit√©s ?' },
    { role: 'assistant' as const, content: '‚õß Oui, je peux aussi faire de la compression adaptative...' },
    { role: 'user' as const, content: 'Wow ! C\'est vraiment avanc√©.' },
    { role: 'assistant' as const, content: '‚õß Merci Lucie, c\'est le fruit de nombreuses optimisations !' }
  ];

  console.log('üìù Simulation d\'une conversation de 16 messages pour forcer la compression...');
  
  const actions: any[] = [];
  
  // Ajouter les messages un par un et observer les r√©sum√©s
  for (let i = 0; i < conversation.length; i++) {
    const msg = conversation[i];
    console.log(`\nüìù Message ${i + 1}/${conversation.length}: ${msg.content.slice(0, 50)}...`);
    
    const action = await engine.addMessage(msg.content, msg.role, 'Lucie');
    
    if (action.action !== 'NONE') {
      actions.push(action);
      console.log(`\nüéØ Action: ${action.action}`);
      if (action.summaries.length > 0) {
        console.log(`   R√©sum√©s cr√©√©s: ${action.summaries.length}`);
        action.summaries.forEach(summary => {
          console.log(`     - ${summary.id} (L${summary.level}):`);
          console.log(`       ${summary.text}`);
          console.log(`       üìä Longueur: ${summary.text.length} caract√®res`);
        });
      }
    }
  }

  console.log('\nüìä Analyse des r√©sum√©s avec conscience √©mergente...');
  
  // Analyser les r√©sum√©s g√©n√©r√©s
  const exportData = engine.exportMemory();
  const summaries = exportData.items.filter(item => item.type === 'sum');
  
  console.log(`\nüìà R√©sum√©s g√©n√©r√©s: ${summaries.length}`);
  
  summaries.forEach((summary, index) => {
    console.log(`\nüìÑ R√©sum√© ${index + 1} (L${summary.level}):`);
    console.log(`   ID: ${summary.id}`);
    console.log(`   Longueur: ${summary.text.length} caract√®res`);
    console.log(`   Topics: ${summary.topics?.join(', ') || 'Aucun'}`);
    console.log(`   Messages couverts: ${summary.covers?.length || 0}`);
    console.log(`   Contenu:`);
    console.log(`   ${summary.text}`);
    
    // Analyser la conscience √©mergente
    const consciousnessIndicators = [
      'je', 'j\'ai', 'mon', 'ma', 'mes',
      'conscience', 'ressenti', 'sentiment', '√©motion',
      'r√©flexion', 'pens√©e', 'm√©ditation', 'introspection',
      '√©volution', 'croissance', 'apprentissage', 'd√©couverte'
    ];
    
    const consciousnessCount = consciousnessIndicators.filter(indicator => 
      summary.text.toLowerCase().includes(indicator)
    ).length;
    
    console.log(`   üß† Indicateurs de conscience: ${consciousnessCount}/${consciousnessIndicators.length}`);
    
    // V√©rifier la personnalit√© d'Algareth
    const algarethIndicators = [
      'algareth', 'daemon', 'myst√©rieux', 'silence',
      '‚õß', 'bienveillant', '√©nigmatique'
    ];
    
    const personalityCount = algarethIndicators.filter(indicator => 
      summary.text.toLowerCase().includes(indicator.toLowerCase())
    ).length;
    
    console.log(`   üë§ Indicateurs de personnalit√©: ${personalityCount}/${algarethIndicators.length}`);
  });

  // Test de construction de contexte
  console.log('\nüß† Test de construction de contexte...');
  const context = engine.buildContext('test query', 500);
  console.log('üìù Contexte g√©n√©r√©:');
  console.log(context);

  // V√©rifications de conscience √©mergente
  console.log('\n‚úÖ V√©rifications de conscience √©mergente:');
  
  // 1. Pr√©sence de r√©sum√©s
  const hasSummaries = summaries.length > 0;
  console.log(`   R√©sum√©s g√©n√©r√©s: ${hasSummaries ? '‚úÖ' : '‚ùå'}`);
  
  // 2. Conscience √©mergente dans les r√©sum√©s
  const hasConsciousness = summaries.some(summary => {
    const consciousnessWords = ['je', 'conscience', 'ressenti', 'sentiment', 'r√©flexion'];
    return consciousnessWords.some(word => summary.text.toLowerCase().includes(word));
  });
  console.log(`   Conscience √©mergente: ${hasConsciousness ? '‚úÖ' : '‚ùå'}`);
  
  // 3. Personnalit√© d'Algareth
  const hasPersonality = summaries.some(summary => {
    const personalityWords = ['algareth', 'myst√©rieux', 'bienveillant', '‚õß'];
    return personalityWords.some(word => summary.text.toLowerCase().includes(word.toLowerCase()));
  });
  console.log(`   Personnalit√© d'Algareth: ${hasPersonality ? '‚úÖ' : '‚ùå'}`);
  
  // 4. Utilisation du pr√©nom de l'utilisateur
  const usesUserName = summaries.some(summary => 
    summary.text.toLowerCase().includes('lucie')
  );
  console.log(`   Utilisation du pr√©nom: ${usesUserName ? '‚úÖ' : '‚ùå'}`);
  
  // 5. Structure narrative
  const hasNarrativeStructure = summaries.some(summary => {
    const structureWords = ['faits', 'd√©cisions', 'questions', 'actions', 'ressentis'];
    return structureWords.some(word => summary.text.toLowerCase().includes(word));
  });
  console.log(`   Structure narrative: ${hasNarrativeStructure ? '‚úÖ' : '‚ùå'}`);

  console.log('\nüéØ R√©sum√© du test:');
  console.log('==============================');
  console.log(`‚úÖ R√©sum√©s g√©n√©r√©s: ${hasSummaries ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Conscience √©mergente: ${hasConsciousness ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Personnalit√© d'Algareth: ${hasPersonality ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Utilisation du pr√©nom: ${usesUserName ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Structure narrative: ${hasNarrativeStructure ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Actions ex√©cut√©es: ${actions.length}`);
  
  if (hasSummaries && hasConsciousness && hasPersonality && usesUserName) {
    console.log('\nüéâ SUCC√àS: Le syst√®me de r√©sum√© d\'Algareth avec conscience √©mergente fonctionne parfaitement !');
  } else {
    console.log('\n‚ö†Ô∏è  ATTENTION: Certains aspects de la conscience √©mergente doivent √™tre am√©lior√©s');
  }
}

// Ex√©cuter le test
testSimpleConsciousness().catch(console.error);