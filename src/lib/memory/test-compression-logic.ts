/**
 * Test de la logique de compression sans appels LLM
 * Valide que les r√©sum√©s remplacent bien les messages originaux
 */

import { PureMemoryEngine } from './pure-memory-engine';

// Mock de l'API Gemini
const mockGemini = {
  generateContent: async (prompt: string) => ({
    response: {
      text: () => `R√©sum√© L1: ${prompt.slice(0, 50)}...`
    }
  })
};

// Mock du mod√®le
const mockModel = {
  generateContent: mockGemini.generateContent
};

async function testCompressionLogic() {
  console.log('üß™ Test de la logique de compression');
  console.log('============================================================');

  // Cr√©er un moteur avec un budget tr√®s petit pour forcer la compression
  const engine = new PureMemoryEngine({
    maxCharacters: 100, // Budget tr√®s petit
    l1Threshold: 3,     // Seuil L1 tr√®s bas
    budgetThreshold: 0.5
  });

  // Remplacer le mod√®le par le mock
  (engine as any).model = mockModel;

  console.log('üìù Ajout de 5 messages...');
  
  // Ajouter 5 messages
  for (let i = 1; i <= 5; i++) {
    await engine.addMessage(`Message utilisateur ${i}`, 'user', 'Lucie');
    await engine.addMessage(`R√©ponse Algareth ${i}`, 'assistant', 'Lucie');
  }

  const stats = engine.getStats();
  console.log('\nüìä Statistiques apr√®s ajout:');
  console.log(`   - Messages bruts: ${stats.totalMessages}`);
  console.log(`   - R√©sum√©s L1: ${stats.l1Count}`);
  console.log(`   - Budget: ${stats.budget.current}/${stats.budget.max} (${stats.budget.percentage}%)`);

  // V√©rifier que les messages ont √©t√© remplac√©s par des r√©sum√©s
  if (stats.totalMessages === 0 && stats.l1Count > 0) {
    console.log('‚úÖ SUCC√àS: Les messages ont √©t√© remplac√©s par des r√©sum√©s');
  } else {
    console.log('‚ùå √âCHEC: Les messages n\'ont pas √©t√© remplac√©s');
    console.log(`   Messages bruts restants: ${stats.totalMessages}`);
    console.log(`   R√©sum√©s cr√©√©s: ${stats.l1Count}`);
  }

  // Tester la construction de contexte
  console.log('\nüß† Test de construction de contexte...');
  const context = engine.buildContext('test query', 200);
  console.log(`üìù Contexte g√©n√©r√© (${context.length} chars):`);
  console.log(context);

  // V√©rifier que le contexte contient les r√©sum√©s
  if (context.includes('R√©sum√© L1')) {
    console.log('‚úÖ SUCC√àS: Le contexte contient les r√©sum√©s');
  } else {
    console.log('‚ùå √âCHEC: Le contexte ne contient pas les r√©sum√©s');
  }

  // Tester l'export
  console.log('\nüíæ Test d\'export...');
  const exportData = engine.exportMemory();
  console.log(`üìã Export: ${exportData.messages.length} messages, ${exportData.summaries.length} r√©sum√©s, ${exportData.archivedMessages.length} messages archiv√©s`);

  if (exportData.summaries.length > 0) {
    console.log('‚úÖ SUCC√àS: Les r√©sum√©s sont export√©s');
    console.log(`   Premier r√©sum√©: ${exportData.summaries[0].content}`);
    console.log(`   Messages couverts: ${exportData.summaries[0].covers.length}`);
    
    // Tester la r√©cup√©ration des messages archiv√©s
    console.log('\nüì¶ Test de r√©cup√©ration des messages archiv√©s...');
    const archivedMessages = engine.getArchivedMessages(exportData.summaries[0].id);
    console.log(`   Messages archiv√©s r√©cup√©r√©s: ${archivedMessages.length}`);
    
    if (archivedMessages.length > 0) {
      console.log('‚úÖ SUCC√àS: Les messages archiv√©s sont r√©cup√©rables');
      console.log(`   Premier message archiv√©: ${archivedMessages[0].content}`);
    } else {
      console.log('‚ùå √âCHEC: Impossible de r√©cup√©rer les messages archiv√©s');
    }
  } else {
    console.log('‚ùå √âCHEC: Aucun r√©sum√© dans l\'export');
  }

  console.log('\nüéØ R√©sum√© du test:');
  console.log('==============================');
  console.log(`‚úÖ Messages remplac√©s: ${stats.totalMessages === 0 ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ R√©sum√©s cr√©√©s: ${stats.l1Count > 0 ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Contexte avec r√©sum√©s: ${context.includes('R√©sum√© L1') ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Export des r√©sum√©s: ${exportData.summaries.length > 0 ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ Messages archiv√©s: ${exportData.archivedMessages.length > 0 ? 'Oui' : 'Non'}`);
  console.log(`‚úÖ R√©cup√©ration archiv√©s: ${exportData.summaries.length > 0 && engine.getArchivedMessages(exportData.summaries[0].id).length > 0 ? 'Oui' : 'Non'}`);
}

// Ex√©cuter le test
testCompressionLogic().catch(console.error);