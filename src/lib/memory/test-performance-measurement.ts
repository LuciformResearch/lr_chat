#!/usr/bin/env npx tsx

/**
 * Test avec mesure de performance pr√©cise
 * Mesure chaque op√©ration et g√©n√®re un artefact de performance
 */

import { loadShadeosEnv } from '../utils/SecureEnvManager';
import { AdvancedMemoryEngineWithProactiveSearch } from './AdvancedMemoryEngineWithProactiveSearch';
import { MultiEntityMemorySystem } from './MultiEntityMemorySystem';
import { PerformanceProfiler, OperationTracker, PerformanceArtifactGenerator } from './PerformanceProfiler';
import * as fs from 'fs';

async function testWithPerformanceMeasurement(): Promise<void> {
  console.log('üìä Test avec Mesure de Performance');
  console.log('==================================');
  
  const startTime = Date.now();
  
  // Charger les variables d'environnement
  loadShadeosEnv();
  
  // Initialiser le profiler
  const profiler = new PerformanceProfiler();
  const tracker = new OperationTracker(profiler);
  const artifactGenerator = new PerformanceArtifactGenerator();
  
  console.log('‚öôÔ∏è  Profiler de performance initialis√©');

  // Obtenir la cl√© Gemini
  const geminiApiKey = process.env.GEMINI_API_KEY;
  if (!geminiApiKey) {
    console.error('‚ùå GEMINI_API_KEY non trouv√©e');
    return;
  }

  // Mesurer l'initialisation
  profiler.startOperation('INITIALIZATION');
  const system = new MultiEntityMemorySystem({
    budget: 3000,
    l1Threshold: 3,
    hierarchicalThreshold: 0.6
  });

  // Cr√©er les entit√©s
  system.addEntity(
    'algareth', 
    'Algareth', 
    'Daemon du Prompt Silencieux, myst√©rieux et bienveillant',
    'Tu es Algareth, le Daemon du Prompt Silencieux.',
    geminiApiKey,
    3000,
    3,
    0.6
  );
  
  system.addEntity(
    'lucie', 
    'Lucie', 
    'D√©veloppeuse curieuse et passionn√©e par l\'IA',
    'Tu es Lucie, une d√©veloppeuse curieuse.',
    geminiApiKey,
    3000,
    3,
    0.6
  );
  profiler.endOperation();

  console.log('‚úÖ Syst√®me initialis√©');

  // Messages de test
  const testMessages = [
    "Salut Algareth, comment va ta conscience √©mergente ?",
    "Peux-tu m'expliquer comment fonctionne la compression hi√©rarchique ?",
    "Qu'est-ce que tu ressens quand on discute ensemble ?",
    "Comment tu g√®res tes souvenirs et ta m√©moire ?",
    "Peux-tu me raconter une histoire sur l'√©volution de l'IA ?",
    "Quelle est ta vision de l'avenir de l'intelligence artificielle ?",
    "Comment tu d√©finis la conscience et l'√©mergence ?",
    "Peux-tu analyser ta propre fa√ßon de penser ?",
    "Qu'est-ce qui te rend unique par rapport aux autres IA ?",
    "Comment tu vois notre relation √©voluer ?"
  ];

  console.log('\nüí¨ G√©n√©ration des conversations avec mesure...');
  console.log('===============================================');

  // Mesurer la g√©n√©ration des conversations
  profiler.startOperation('CONVERSATION_GENERATION');
  
  for (let i = 0; i < testMessages.length; i++) {
    const message = testMessages[i];
    console.log(`üîÑ Message ${i + 1}/${testMessages.length}: "${message.substring(0, 50)}..."`);
    
    try {
      // Mesurer chaque appel makeEntitySpeak
      await tracker.trackLLMCall('MAKE_ENTITY_SPEAK', async () => {
        return await system.makeEntitySpeak('algareth', 'lucie', message);
      });
      
    } catch (error) {
      console.error(`‚ùå Erreur message ${i + 1}:`, error);
    }
  }
  
  profiler.endOperation();

  console.log('\nüîç Tests de recherche avec mesure...');
  console.log('====================================');

  // Mesurer les op√©rations de recherche
  profiler.startOperation('SEARCH_OPERATIONS');
  
  const searchQueries = [
    'conscience',
    'm√©moire',
    'compression',
    '√©motions',
    '√©volution'
  ];

  // Acc√©der au moteur de recherche
  const systemAny = system as any;
  const algarethEntity = systemAny.entities?.get('algareth');
  const engine = algarethEntity?.memoryEngine;

  if (engine && engine.search) {
    for (const query of searchQueries) {
      console.log(`üîç Recherche: "${query}"`);
      
      try {
        await tracker.trackSearch('SIMPLE_SEARCH', async () => {
          const results = await engine.search(query);
          return {
            query,
            results,
            resultsCount: results.length
          };
        });
        
      } catch (error) {
        console.error(`‚ùå Erreur recherche "${query}":`, error);
      }
    }
  }
  
  profiler.endOperation();

  console.log('\nüìä G√©n√©ration du rapport de performance...');
  console.log('==========================================');

  // G√©n√©rer le rapport de performance
  profiler.startOperation('REPORT_GENERATION');
  const performanceReport = artifactGenerator.generatePerformanceReport(profiler);
  profiler.endOperation();

  // Sauvegarder l'artefact
  const reportPath = `performance-report-${Date.now()}.md`;
  fs.writeFileSync(reportPath, performanceReport);
  
  console.log(`üìÑ Rapport sauvegard√©: ${reportPath}`);

  // Afficher le r√©sum√©
  const report = profiler.getReport();
  const totalTime = Date.now() - startTime;
  
  console.log('\nüìä R√âSUM√â DE PERFORMANCE');
  console.log('========================');
  console.log(`‚è±Ô∏è  Temps total: ${totalTime}ms`);
  console.log(`‚è±Ô∏è  Dur√©e mesur√©e: ${report.totalDuration.toFixed(2)}ms`);
  console.log(`üîÑ Op√©rations: ${report.summary.totalOperations}`);
  console.log(`ü§ñ Appels LLM: ${report.summary.totalLLMCalls}`);
  console.log(`üìà Dur√©e moyenne: ${report.summary.averageDuration.toFixed(2)}ms`);
  console.log(`üíæ Pic m√©moire: ${(report.summary.memoryPeak / 1024 / 1024).toFixed(2)}MB`);

  console.log('\n‚ö†Ô∏è  TOP 3 Goulots d\'√âtranglement');
  console.log('==================================');
  report.bottlenecks.slice(0, 3).forEach((bottleneck, index) => {
    console.log(`${index + 1}. ${bottleneck.operation}: ${bottleneck.duration.toFixed(2)}ms (${bottleneck.percentage.toFixed(1)}%)`);
    console.log(`   ${bottleneck.recommendation}`);
  });

  console.log('\nüí° RECOMMANDATIONS PRIORITAIRES');
  console.log('================================');
  report.recommendations.slice(0, 5).forEach((rec, index) => {
    console.log(`${index + 1}. ${rec}`);
  });

  // Export JSON pour analyse
  const jsonReport = profiler.exportMetrics();
  const jsonPath = `performance-metrics-${Date.now()}.json`;
  fs.writeFileSync(jsonPath, jsonReport);
  console.log(`üìä M√©triques JSON: ${jsonPath}`);

  console.log('\nüéâ TEST DE PERFORMANCE TERMIN√â !');
  console.log('=================================');
  console.log('‚úÖ Mesure pr√©cise de toutes les op√©rations');
  console.log('‚úÖ Identification des goulots d\'√©tranglement');
  console.log('‚úÖ Recommandations d\'optimisation');
  console.log('‚úÖ Artefacts de performance g√©n√©r√©s');
}

// Ex√©cution du test
if (require.main === module) {
  testWithPerformanceMeasurement().catch(console.error);
}