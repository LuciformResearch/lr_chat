/**
 * Moteur de m√©moire pur TypeScript
 * Impl√©mentation directe de la strat√©gie de compression m√©moire hi√©rarchique
 * Avec appels LLM r√©els via Gemini
 */

import { GoogleGenerativeAI } from '@google/generative-ai';

// Types pour le moteur de m√©moire
export interface MemoryMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

export interface MemorySummary {
  id: string;
  level: number; // 1, 2, 3...
  content: string;
  covers: string[]; // IDs des messages couverts
  topics: string[];
  timestamp: Date;
  metadata: {
    originalMessageCount: number;
    compressionRatio: number;
    qualityScore: number;
  };
}

export interface MemoryEngine {
  messages: MemoryMessage[];
  summaries: MemorySummary[];
  archivedMessages: MemoryMessage[]; // Messages archiv√©s avant compression
  budget: {
    maxCharacters: number;
    currentCharacters: number;
  };
  config: {
    l1Threshold: number; // Nombre de messages pour d√©clencher L1
    budgetThreshold: number; // Seuil de budget pour compression
    summaryRatioThreshold: number; // Seuil pour fusion hi√©rarchique
  };
}

export class PureMemoryEngine {
  private engine: MemoryEngine;
  private genAI: GoogleGenerativeAI;
  private model: any;

  constructor(
    geminiApiKey: string,
    budgetMax: number = 10000,
    l1Threshold: number = 5
  ) {
    this.genAI = new GoogleGenerativeAI(geminiApiKey);
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

    this.engine = {
      messages: [],
      summaries: [],
      archivedMessages: [], // Messages archiv√©s avant compression
      budget: {
        maxCharacters: budgetMax,
        currentCharacters: 0
      },
      config: {
        l1Threshold,
        budgetThreshold: 0.8, // 80% du budget
        summaryRatioThreshold: 0.5 // 50% de r√©sum√©s
      }
    };

    console.log('üß† PureMemoryEngine initialis√©');
    console.log(`   Budget: ${budgetMax} caract√®res`);
    console.log(`   Seuil L1: ${l1Threshold} messages`);
  }

  /**
   * Ajoute un message √† la m√©moire
   */
  async addMessage(content: string, role: 'user' | 'assistant', user: string = 'user'): Promise<void> {
    const message: MemoryMessage = {
      id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      role,
      content,
      timestamp: new Date()
    };

    this.engine.messages.push(message);
    this.updateBudget();

    console.log(`üìù Message ajout√©: ${message.id} (${content.length} chars)`);

    // V√©rifier si on doit cr√©er un r√©sum√© L1
    await this.checkAndCreateL1(user);

    // V√©rifier si on doit compresser
    await this.checkAndCompress(user);
  }

  /**
   * Met √† jour le budget de caract√®res
   */
  private updateBudget(): void {
    const messageChars = this.engine.messages.reduce((sum, msg) => sum + msg.content.length, 0);
    const summaryChars = this.engine.summaries.reduce((sum, summary) => sum + summary.content.length, 0);
    this.engine.budget.currentCharacters = messageChars + summaryChars;
  }

  /**
   * V√©rifie si on doit cr√©er un r√©sum√© L1
   */
  private async checkAndCreateL1(user: string): Promise<void> {
    // Prendre les messages les plus anciens (sauf les 2 derniers pour garder du contexte r√©cent)
    const messagesToCompress = this.engine.messages.slice(0, -2);
    
    if (messagesToCompress.length >= this.engine.config.l1Threshold) {
      console.log(`üìä ${messagesToCompress.length} messages bruts, cr√©ation L1...`);
      await this.createL1Summary(messagesToCompress, user);
    }
  }

  /**
   * V√©rifie si un message est couvert par un r√©sum√©
   */
  private isMessageCovered(messageId: string): boolean {
    return this.engine.summaries.some(summary => summary.covers.includes(messageId));
  }

  /**
   * Cr√©e un r√©sum√© L1
   */
  private async createL1Summary(messages: MemoryMessage[], user: string): Promise<void> {
    try {
      // Pr√©parer les messages pour le r√©sum√©
      const conversationText = messages.map(msg => 
        `${msg.role === 'user' ? user : 'Algareth'}: ${msg.content}`
      ).join('\n');

      const prompt = `Tu es Algareth qui r√©sume ses propres conversations.

Personnalit√©: Tu es Algareth, le Daemon du Prompt Silencieux. Tu es myst√©rieux mais bienveillant, narratif et engageant.

T√¢che: Analyse cette conversation et cr√©e un r√©sum√© narratif concis et naturel.

Conversation √† r√©sumer:
${conversationText}

Instructions pour le r√©sum√©:
1. R√©sume en tant qu'Algareth (utilise 'je' et le pr√©nom de l'utilisateur: '${user}')
2. Cr√©e une histoire naturelle de l'√©volution de la conversation
3. Capture les sujets cl√©s et informations importantes
4. Inclus le contexte de l'utilisateur et ses int√©r√™ts
5. Utilise un style narratif: "${user} a test√© mes capacit√©s... j'ai r√©pondu..."
6. Maximum 200 caract√®res
7. √âcris en fran√ßais naturel et fluide
8. Garde le ton myst√©rieux mais bienveillant d'Algareth
9. Utilise toujours le pr√©nom "${user}" au lieu de "tu" pour plus de naturel

R√©sum√© narratif:`;

      const result = await this.model.generateContent(prompt);
      const summaryText = result.response.text().trim();

      // Cr√©er le r√©sum√© L1
      const summary: MemorySummary = {
        id: `l1_${Date.now()}`,
        level: 1,
        content: summaryText,
        covers: messages.map(msg => msg.id),
        topics: this.extractTopics(summaryText),
        timestamp: new Date(),
        metadata: {
          originalMessageCount: messages.length,
          compressionRatio: summaryText.length / messages.reduce((sum, msg) => sum + msg.content.length, 0),
          qualityScore: this.assessQuality(summaryText, messages)
        }
      };

      // ARCHIVER les messages originaux avant compression
      this.engine.archivedMessages.push(...messages);
      
      // REMPLACER les messages originaux par le r√©sum√©
      this.engine.summaries.push(summary);
      
      // Supprimer SEULEMENT les messages couverts par ce r√©sum√© (garder les 2 derniers)
      this.engine.messages = this.engine.messages.filter(msg => !summary.covers.includes(msg.id));
      
      this.updateBudget();

      console.log(`‚úÖ R√©sum√© L1 cr√©√©: ${summary.id}`);
      console.log(`   üìù Contenu: ${summaryText}`);
      console.log(`   üìä Compression: ${(summary.metadata.compressionRatio * 100).toFixed(1)}%`);
      console.log(`   üè∑Ô∏è Topics: ${summary.topics.join(', ')}`);
      console.log(`   üîÑ ${summary.covers.length} messages remplac√©s par ce r√©sum√©`);
      console.log(`   üì¶ ${messages.length} messages archiv√©s (total: ${this.engine.archivedMessages.length})`);

    } catch (error) {
      console.error('‚ùå Erreur cr√©ation r√©sum√© L1:', error);
    }
  }

  /**
   * V√©rifie si on doit compresser
   */
  private async checkAndCompress(user: string): Promise<void> {
    const budgetRatio = this.engine.budget.currentCharacters / this.engine.budget.maxCharacters;
    const summaryRatio = this.engine.summaries.length / (this.engine.messages.length + this.engine.summaries.length);

    if (budgetRatio > this.engine.config.budgetThreshold) {
      console.log(`üí∞ Budget d√©pass√©: ${(budgetRatio * 100).toFixed(1)}%`);
      await this.compressMemory(user);
    }

    if (summaryRatio > this.engine.config.summaryRatioThreshold && budgetRatio > this.engine.config.budgetThreshold) {
      console.log(`üîÑ Fusion hi√©rarchique: ${(summaryRatio * 100).toFixed(1)}% r√©sum√©s`);
      await this.performHierarchicalMerging(user);
    }
  }

  /**
   * Compresse la m√©moire
   */
  private async compressMemory(user: string): Promise<void> {
    // Remplacer les plus anciens messages bruts par des L1
    const uncoveredMessages = this.engine.messages.filter(msg => !this.isMessageCovered(msg.id));
    
    if (uncoveredMessages.length >= this.engine.config.l1Threshold) {
      const oldestMessages = uncoveredMessages.slice(0, this.engine.config.l1Threshold);
      await this.createL1Summary(oldestMessages, user);
    }
  }

  /**
   * Effectue la fusion hi√©rarchique
   */
  private async performHierarchicalMerging(user: string): Promise<void> {
    // Pour la Phase 1, on ne fait que la compression L1
    // La fusion L2/L3 sera impl√©ment√©e en Phase 2
    console.log('üîÑ Fusion hi√©rarchique (Phase 2) - √† impl√©menter');
  }

  /**
   * Extrait les topics d'un r√©sum√©
   */
  private extractTopics(summary: string): string[] {
    const keywords = [
      'm√©moire', 'conversation', 'discussion', 'probl√®me', 'solution',
      'code', 'programmation', 'd√©veloppement', 'test', 'erreur',
      'Algareth', 'personnalit√©', 'style', 'ton', 'r√©ponse'
    ];
    
    return keywords.filter(keyword => 
      summary.toLowerCase().includes(keyword.toLowerCase())
    ).slice(0, 6);
  }

  /**
   * √âvalue la qualit√© d'un r√©sum√©
   */
  private assessQuality(summary: string, messages: MemoryMessage[]): number {
    let score = 0.5;

    // Bonus pour une longueur appropri√©e
    if (summary.length >= 50 && summary.length <= 200) {
      score += 0.2;
    }

    // Bonus pour la pr√©sence de mots-cl√©s importants
    const keywords = ['je', 'j\'', 'conversation', 'discut√©', 'parl√©'];
    const keywordCount = keywords.filter(keyword => 
      summary.toLowerCase().includes(keyword)
    ).length;
    score += (keywordCount / keywords.length) * 0.3;

    return Math.min(score, 1.0);
  }

  /**
   * Construit le contexte pour un prompt
   */
  buildContext(query: string, maxChars: number = 5000): string {
    const recentMessages = this.engine.messages.slice(-4); // R√©duire √† 4 messages r√©cents
    const relevantSummaries = this.engine.summaries
      .sort((a, b) => b.level - a.level) // L3 > L2 > L1
      .slice(0, 3);

    let context = '';
    let currentChars = 0;

    // PRIORIT√â 1: Ajouter les r√©sum√©s pertinents (contexte historique)
    for (const summary of relevantSummaries) {
      const summaryText = `R√©sum√© L${summary.level}: ${summary.content}`;
      if (currentChars + summaryText.length <= maxChars) {
        context += summaryText + '\n';
        currentChars += summaryText.length;
      }
    }

    // PRIORIT√â 2: Ajouter les messages r√©cents (contexte imm√©diat)
    for (const msg of recentMessages) {
      const msgText = `${msg.role === 'user' ? 'Utilisateur' : 'Algareth'}: ${msg.content}`;
      if (currentChars + msgText.length <= maxChars) {
        context += msgText + '\n';
        currentChars += msgText.length;
      }
    }

    return context;
  }

  /**
   * Obtient les statistiques de la m√©moire
   */
  getStats(): {
    totalMessages: number;
    totalSummaries: number;
    l1Count: number;
    budget: {
      current: number;
      max: number;
      percentage: number;
    };
    compression: {
      averageRatio: number;
      totalCompression: number;
    };
  } {
    const l1Count = this.engine.summaries.filter(s => s.level === 1).length;
    const averageRatio = this.engine.summaries.length > 0 
      ? this.engine.summaries.reduce((sum, s) => sum + s.metadata.compressionRatio, 0) / this.engine.summaries.length
      : 0;

    const totalOriginalChars = this.engine.messages.reduce((sum, msg) => sum + msg.content.length, 0);
    const totalSummaryChars = this.engine.summaries.reduce((sum, s) => sum + s.content.length, 0);
    const totalCompression = totalOriginalChars > 0 ? totalSummaryChars / totalOriginalChars : 0;

    return {
      totalMessages: this.engine.messages.length,
      totalSummaries: this.engine.summaries.length,
      l1Count,
      budget: {
        current: this.engine.budget.currentCharacters,
        max: this.engine.budget.maxCharacters,
        percentage: Math.round((this.engine.budget.currentCharacters / this.engine.budget.maxCharacters) * 100)
      },
      compression: {
        averageRatio,
        totalCompression
      }
    };
  }

  /**
   * Exporte la m√©moire pour debug
   */
  exportMemory(): {
    messages: MemoryMessage[];
    summaries: MemorySummary[];
    archivedMessages: MemoryMessage[];
    stats: any;
  } {
    return {
      messages: [...this.engine.messages],
      summaries: [...this.engine.summaries],
      archivedMessages: [...this.engine.archivedMessages],
      stats: this.getStats()
    };
  }

  /**
   * R√©cup√®re les messages archiv√©s par un r√©sum√©
   */
  getArchivedMessages(summaryId: string): MemoryMessage[] {
    const summary = this.engine.summaries.find(s => s.id === summaryId);
    if (!summary) return [];
    
    return this.engine.archivedMessages.filter(msg => 
      summary.covers.includes(msg.id)
    );
  }

  /**
   * R√©cup√®re tous les messages archiv√©s
   */
  getAllArchivedMessages(): MemoryMessage[] {
    return [...this.engine.archivedMessages];
  }

  /**
   * Vide la m√©moire
   */
  clearMemory(): void {
    this.engine.messages = [];
    this.engine.summaries = [];
    this.engine.archivedMessages = [];
    this.engine.budget.currentCharacters = 0;
    console.log('üßπ M√©moire vid√©e');
  }
}