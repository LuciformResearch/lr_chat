/**
 * Test automatis√© de la m√©moire hi√©rarchique avec navigateur headless
 * V√©rifie que les r√©sum√©s L1 sont cr√©√©s correctement et que la persistance fonctionne
 */

import puppeteer from 'puppeteer';
import { LocalStorage } from '@/lib/storage/LocalStorage';
import { SummaryManager } from '@/lib/summarization/SummaryManager';

interface TestResult {
  success: boolean;
  message: string;
  details?: any;
}

export class HierarchicalMemoryTester {
  private browser: puppeteer.Browser | null = null;
  private page: puppeteer.Page | null = null;
  private baseUrl: string;

  constructor(baseUrl: string = 'http://localhost:3000') {
    this.baseUrl = baseUrl;
  }

  /**
   * Initialise le navigateur headless
   */
  async initialize(): Promise<void> {
    console.log('üöÄ Initialisation du navigateur headless...');
    
    this.browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
      defaultViewport: { width: 1280, height: 720 }
    });
    
    this.page = await this.browser.newPage();
    
    // Intercepter les requ√™tes r√©seau pour debug
    await this.page.setRequestInterception(true);
    this.page.on('request', (request) => {
      if (request.url().includes('/api/')) {
        console.log(`üåê API Request: ${request.method()} ${request.url()}`);
      }
      request.continue();
    });
    
    console.log('‚úÖ Navigateur initialis√©');
  }

  /**
   * Navigue vers la page de chat
   */
  async navigateToChat(): Promise<TestResult> {
    try {
      console.log('üß≠ Navigation vers la page de chat...');
      
      await this.page!.goto(`${this.baseUrl}/chat`, { 
        waitUntil: 'networkidle2',
        timeout: 10000 
      });
      
      // Attendre que la page soit charg√©e
      await this.page!.waitForSelector('input[type="text"]', { timeout: 5000 });
      
      console.log('‚úÖ Page de chat charg√©e');
      return { success: true, message: 'Navigation r√©ussie' };
    } catch (error) {
      return { success: false, message: `Erreur navigation: ${error}` };
    }
  }

  /**
   * Se connecte avec un nom d'utilisateur
   */
  async loginAsUser(username: string): Promise<TestResult> {
    try {
      console.log(`üë§ Connexion en tant que ${username}...`);
      
      // Remplir le champ nom d'utilisateur
      await this.page!.type('input[type="text"]', username);
      
      // Cliquer sur le bouton de connexion
      await this.page!.click('button[type="submit"]');
      
      // Attendre que l'interface de chat apparaisse
      await this.page!.waitForSelector('.theme-gradient-bg', { timeout: 5000 });
      
      console.log(`‚úÖ Connect√© en tant que ${username}`);
      return { success: true, message: `Connexion r√©ussie pour ${username}` };
    } catch (error) {
      return { success: false, message: `Erreur connexion: ${error}` };
    }
  }

  /**
   * Envoie un message √† Algareth
   */
  async sendMessage(message: string): Promise<TestResult> {
    try {
      console.log(`üí¨ Envoi du message: "${message}"`);
      
      // Trouver le champ de saisie
      const inputSelector = 'input[placeholder*="message"], input[placeholder*="Message"]';
      await this.page!.waitForSelector(inputSelector, { timeout: 5000 });
      
      // Saisir le message
      await this.page!.type(inputSelector, message);
      
      // Envoyer le message
      await this.page!.click('button[type="submit"]');
      
      // Attendre la r√©ponse d'Algareth
      await this.page!.waitForFunction(
        () => {
          const messages = document.querySelectorAll('[class*="message"], .space-y-4 > div');
          return messages.length >= 2; // Au moins 2 messages (user + assistant)
        },
        { timeout: 15000 }
      );
      
      console.log('‚úÖ Message envoy√© et r√©ponse re√ßue');
      return { success: true, message: 'Message envoy√© avec succ√®s' };
    } catch (error) {
      return { success: false, message: `Erreur envoi message: ${error}` };
    }
  }

  /**
   * V√©rifie les statistiques de m√©moire hi√©rarchique
   */
  async checkMemoryStats(): Promise<TestResult> {
    try {
      console.log('üìä V√©rification des statistiques de m√©moire...');
      
      // Attendre que les stats soient visibles
      await this.page!.waitForSelector('[class*="hierarchical"], [class*="memory"]', { timeout: 5000 });
      
      // Prendre une capture d'√©cran pour debug
      await this.page!.screenshot({ 
        path: '/tmp/memory-stats-debug.png',
        fullPage: false 
      });
      
      // Essayer de r√©cup√©rer les stats depuis le localStorage
      const localStorageData = await this.page!.evaluate(() => {
        return {
          hierarchicalMemory: localStorage.getItem('hierarchical_memory'),
          userSummaries: localStorage.getItem('lr_tchatagent_user_summaries'),
          conversations: localStorage.getItem('lr_tchatagent_conversations')
        };
      });
      
      console.log('üìã Donn√©es localStorage r√©cup√©r√©es:', localStorageData);
      
      return { 
        success: true, 
        message: 'Statistiques v√©rifi√©es',
        details: localStorageData
      };
    } catch (error) {
      return { success: false, message: `Erreur v√©rification stats: ${error}` };
    }
  }

  /**
   * Test complet de la m√©moire hi√©rarchique
   */
  async runFullTest(): Promise<TestResult[]> {
    const results: TestResult[] = [];
    
    try {
      // Initialisation
      await this.initialize();
      results.push({ success: true, message: 'Navigateur initialis√©' });
      
      // Navigation
      const navResult = await this.navigateToChat();
      results.push(navResult);
      if (!navResult.success) return results;
      
      // Connexion
      const loginResult = await this.loginAsUser('Lucie');
      results.push(loginResult);
      if (!loginResult.success) return results;
      
      // Conversation avec Algareth pour d√©clencher les r√©sum√©s L1
      const conversationMessages = [
        "Salut Algareth, j'esp√®re que tu vas bien aujourd'hui ?",
        "Peux-tu m'expliquer comment fonctionne ton syst√®me de m√©moire hi√©rarchique ?",
        "C'est fascinant ! Et comment d√©cides-tu quand cr√©er un r√©sum√© L1 ?",
        "Et que se passe-t-il quand tu atteins la limite de ton budget m√©moire ?",
        "Merci pour ces explications d√©taill√©es, Algareth. Tu es vraiment impressionnant !",
        "Une derni√®re question : peux-tu me raconter une de tes exp√©riences les plus int√©ressantes ?",
        "C'est captivant ! Tu as une personnalit√© vraiment unique, Algareth.",
        "J'aimerais en savoir plus sur tes capacit√©s de compression de donn√©es.",
        "Et comment g√®res-tu la continuit√© conversationnelle sur de longues sessions ?",
        "Parfait ! Merci pour cette conversation enrichissante, Algareth."
      ];
      
      console.log('üó£Ô∏è D√©but de la conversation avec Algareth...');
      
      for (let i = 0; i < conversationMessages.length; i++) {
        const message = conversationMessages[i];
        console.log(`\nüìù Message ${i + 1}/10`);
        
        const sendResult = await this.sendMessage(message);
        results.push(sendResult);
        
        if (!sendResult.success) {
          console.error(`‚ùå √âchec envoi message ${i + 1}`);
          break;
        }
        
        // Attendre un peu entre les messages
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // V√©rifier les stats apr√®s chaque 5 messages (seuil L1)
        if ((i + 1) % 5 === 0) {
          console.log(`\nüß† V√©rification apr√®s ${i + 1} messages (seuil L1)...`);
          const statsResult = await this.checkMemoryStats();
          results.push(statsResult);
        }
      }
      
      // V√©rification finale
      console.log('\nüìä V√©rification finale des statistiques...');
      const finalStatsResult = await this.checkMemoryStats();
      results.push(finalStatsResult);
      
      // V√©rifier la persistance des donn√©es
      console.log('\nüíæ V√©rification de la persistance...');
      const persistenceResult = await this.verifyPersistence();
      results.push(persistenceResult);
      
    } catch (error) {
      results.push({ success: false, message: `Erreur test complet: ${error}` });
    } finally {
      await this.cleanup();
    }
    
    return results;
  }

  /**
   * V√©rifie la persistance des donn√©es
   */
  async verifyPersistence(): Promise<TestResult> {
    try {
      console.log('üíæ V√©rification de la persistance des donn√©es...');
      
      // R√©cup√©rer les donn√©es depuis le localStorage
      const localStorageData = await this.page!.evaluate(() => {
        const data: any = {};
        
        // V√©rifier les conversations
        const conversations = localStorage.getItem('lr_tchatagent_conversations');
        if (conversations) {
          data.conversations = JSON.parse(conversations);
        }
        
        // V√©rifier les r√©sum√©s
        const summaries = localStorage.getItem('lr_tchatagent_user_summaries');
        if (summaries) {
          data.summaries = JSON.parse(summaries);
        }
        
        // V√©rifier la m√©moire hi√©rarchique (si stock√©e)
        const hierarchicalMemory = localStorage.getItem('hierarchical_memory');
        if (hierarchicalMemory) {
          data.hierarchicalMemory = JSON.parse(hierarchicalMemory);
        }
        
        return data;
      });
      
      console.log('üìã Donn√©es de persistance r√©cup√©r√©es:', localStorageData);
      
      // V√©rifier qu'on a des conversations
      const hasConversations = localStorageData.conversations && 
        localStorageData.conversations.length > 0;
      
      // V√©rifier qu'on a des r√©sum√©s (au moins 2 r√©sum√©s L1 attendus)
      const hasSummaries = localStorageData.summaries && 
        localStorageData.summaries.length >= 2;
      
      const success = hasConversations && hasSummaries;
      
      return {
        success,
        message: success ? 
          `Persistance v√©rifi√©e: ${localStorageData.conversations?.length || 0} conversations, ${localStorageData.summaries?.length || 0} r√©sum√©s` :
          'Persistance incompl√®te',
        details: {
          conversations: localStorageData.conversations?.length || 0,
          summaries: localStorageData.summaries?.length || 0,
          hasConversations,
          hasSummaries
        }
      };
      
    } catch (error) {
      return { success: false, message: `Erreur v√©rification persistance: ${error}` };
    }
  }

  /**
   * Nettoie les ressources
   */
  async cleanup(): Promise<void> {
    if (this.page) {
      await this.page.close();
    }
    if (this.browser) {
      await this.browser.close();
    }
    console.log('üßπ Nettoyage termin√©');
  }

  /**
   * G√©n√®re un rapport de test
   */
  generateReport(results: TestResult[]): string {
    const successful = results.filter(r => r.success).length;
    const total = results.length;
    const successRate = Math.round((successful / total) * 100);
    
    let report = `# Rapport de Test - M√©moire Hi√©rarchique\n\n`;
    report += `**R√©sum√©:** ${successful}/${total} tests r√©ussis (${successRate}%)\n\n`;
    
    report += `## D√©tails des Tests\n\n`;
    
    results.forEach((result, index) => {
      const status = result.success ? '‚úÖ' : '‚ùå';
      report += `${index + 1}. ${status} ${result.message}\n`;
      
      if (result.details) {
        report += `   - D√©tails: ${JSON.stringify(result.details, null, 2)}\n`;
      }
    });
    
    report += `\n## Conclusion\n\n`;
    
    if (successRate >= 80) {
      report += `üéâ **Excellent !** Le syst√®me de m√©moire hi√©rarchique fonctionne correctement.\n`;
    } else if (successRate >= 60) {
      report += `‚ö†Ô∏è **Partiellement fonctionnel.** Quelques am√©liorations n√©cessaires.\n`;
    } else {
      report += `‚ùå **Probl√®mes d√©tect√©s.** R√©vision du syst√®me recommand√©e.\n`;
    }
    
    return report;
  }
}

/**
 * Fonction principale de test
 */
export async function runHierarchicalMemoryTest(): Promise<void> {
  console.log('üß™ D√©marrage du test automatis√© de la m√©moire hi√©rarchique');
  console.log('=' .repeat(60));
  
  const tester = new HierarchicalMemoryTester();
  
  try {
    const results = await tester.runFullTest();
    
    console.log('\nüìä R√©sultats du test:');
    console.log('=' .repeat(40));
    
    results.forEach((result, index) => {
      const status = result.success ? '‚úÖ' : '‚ùå';
      console.log(`${index + 1}. ${status} ${result.message}`);
    });
    
    const report = tester.generateReport(results);
    console.log('\nüìã Rapport complet:');
    console.log(report);
    
    // Sauvegarder le rapport
    const fs = require('fs');
    const reportPath = '/tmp/hierarchical-memory-test-report.md';
    fs.writeFileSync(reportPath, report);
    console.log(`\nüíæ Rapport sauvegard√©: ${reportPath}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test si ce fichier est appel√© directement
if (require.main === module) {
  runHierarchicalMemoryTest().catch(console.error);
}