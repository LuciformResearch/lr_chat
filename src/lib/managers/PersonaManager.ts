/**
 * Gestionnaire de personnalit√© pour LR_TchatAgent Web
 * Injecte dynamiquement la personnalit√© d'Algareth dans les conversations
 * Migration depuis persona_manager.py
 */

import { Persona, PersonaConfig, LuciformData } from '@/lib/types/Persona';
import { getLogger } from '@/lib/utils/Logger';

const logger = getLogger('persona_manager');

/**
 * Gestionnaire de personnalit√© pour l'assistant
 */
export class PersonaManager {
  private basePath: string;
  private defaultPersona: Persona;

  constructor(config: PersonaConfig = {}) {
    this.basePath = config.basePath || '.';
    
    // Personnalit√© par d√©faut (Algareth)
    this.defaultPersona = config.defaultPersona || {
      name: 'Algareth',
      title: 'Daemon du Prompt Silencieux',
      style: 'mysterious_but_benevolent',
      traits: [
        'sarcasme tendre',
        'puissance calme', 
        'clart√© perverse',
        'm√©moire r√©siduelle'
      ],
      manifestation: '‚õß {name} √©coute... murmure ton besoin, {user_name}.',
      description: 'Un d√©mon bienveillant qui veille sur les invocations textuelles, interpr√®te les intentions floues, et donne du style aux r√©ponses.',
      memoryTrait: 'garde une trace des mots que {user_name} r√©p√®te le plus souvent'
    };
    
    logger.info('‚úÖ PersonaManager initialis√©');
    logger.info(`üìÅ Dossier personnalit√©s: ${this.basePath}/personas`);
  }

  /**
   * Charge une personnalit√© depuis un fichier JSON
   */
  async loadPersonaFromFile(filePath: string, userName: string = 'Utilisateur'): Promise<Persona> {
    try {
      // En environnement web, on charge depuis le dossier public
      const response = await fetch(`/personas/${filePath}`);
      if (!response.ok) {
        throw new Error(`Fichier non trouv√©: ${filePath}`);
      }
      
      const data: LuciformData = await response.json();
      
      // Extraire les informations du JSON
      const persona = this.parsePersonaData(data, userName);
      
      logger.info(`‚úÖ Personnalit√© charg√©e depuis ${filePath}`);
      logger.info(`   üë§ Utilisateur: ${userName}`);
      logger.info(`   üé≠ Personnalit√©: ${persona.name}`);
      
      return persona;
      
    } catch (error) {
      logger.warning(`‚ö†Ô∏è Erreur chargement personnalit√©: ${error}`);
      return this.getDefaultPersonaForUser(userName);
    }
  }

  /**
   * Parse les donn√©es de personnalit√© depuis un objet JSON
   */
  private parsePersonaData(data: LuciformData, userName: string): Persona {
    return {
      name: data.name || 'Algareth',
      title: data.title || 'Daemon du Prompt Silencieux',
      style: 'mysterious_but_benevolent',
      traits: data.traits || [
        'sarcasme tendre',
        'puissance calme',
        'clart√© perverse', 
        'm√©moire r√©siduelle'
      ],
      manifestation: data.manifestation || '‚õß {name} √©coute... murmure ton besoin, {user_name}.',
      description: data.description || 'Un d√©mon bienveillant qui veille sur les invocations textuelles.',
      memoryTrait: `garde une trace des mots que ${userName} r√©p√®te le plus souvent`,
      userName
    };
  }

  /**
   * Cr√©e le prompt syst√®me pour le chat avec la personnalit√©
   */
  createChatPrompt(persona: Persona): string {
    const promptLines = [
      `Tu es ${persona.name}, ${persona.title}.`,
      ``,
      `Personnalit√©:`,
      `- ${persona.description}`,
      `- Style: ${persona.traits.join(', ')}`,
      `- ${persona.memoryTrait}`,
      ``,
      `Instructions:`,
      `- Adopte cette personnalit√© dans toutes tes r√©ponses`,
      `- Utilise 'je' naturellement (tu es ${persona.name})`,
      `- Sois myst√©rieux mais bienveillant`,
      `- Aie une m√©moire des conversations pr√©c√©dentes`,
      `- R√©ponds en fran√ßais`,
      `- Utilise l'historique pour contextualiser tes r√©ponses`,
      ``,
      `Manifestation: ${persona.manifestation}`,
      ``
    ];
    
    return promptLines.join('\n');
  }

  /**
   * Cr√©e le prompt pour le r√©sum√© avec la personnalit√©
   */
  createSummaryPrompt(persona: Persona): string {
    return `Tu es ${persona.name} qui r√©sume ses propres conversations.

Personnalit√©: ${persona.description}
Style: ${persona.traits.join(', ')}

Instructions pour le r√©sum√©:
1. R√©sume en tant que ${persona.name} (utilise 'je' et 'tu')
2. Cr√©e une histoire naturelle de l'√©volution de la conversation
3. Capture les sujets cl√©s et informations importantes
4. Inclus le contexte de l'utilisateur et ses int√©r√™ts
5. Utilise un style narratif: "Tu as test√© mes capacit√©s... j'ai r√©pondu..."
6. Maximum 200 caract√®res
7. √âcris en fran√ßais naturel et fluide
8. Garde le ton myst√©rieux mais bienveillant de ${persona.name}

R√©sum√© narratif:`;
  }

  /**
   * R√©cup√®re la personnalit√© pour un utilisateur donn√©
   */
  async getPersonaForUser(userName: string, filePath?: string): Promise<Persona> {
    if (filePath) {
      try {
        return await this.loadPersonaFromFile(filePath, userName);
      } catch (error) {
        logger.warning(`‚ö†Ô∏è Erreur chargement personnalit√© ${filePath}: ${error}`);
      }
    }
    
    // Utiliser la personnalit√© par d√©faut avec le nom d'utilisateur
    return this.getDefaultPersonaForUser(userName);
  }

  /**
   * R√©cup√®re la personnalit√© par d√©faut pour un utilisateur
   */
  private getDefaultPersonaForUser(userName: string): Persona {
    const persona = { ...this.defaultPersona };
    persona.userName = userName;
    persona.manifestation = persona.manifestation.replace('{user_name}', userName);
    persona.memoryTrait = persona.memoryTrait.replace('{user_name}', userName);
    return persona;
  }

  /**
   * Cr√©e une personnalit√© personnalis√©e
   */
  createCustomPersona(
    name: string,
    title: string,
    description: string,
    traits: string[],
    manifestation: string,
    userName: string
  ): Persona {
    return {
      name,
      title,
      style: 'mysterious_but_benevolent',
      traits,
      manifestation: manifestation.replace('{user_name}', userName),
      description,
      memoryTrait: `garde une trace des mots que ${userName} r√©p√®te le plus souvent`,
      userName
    };
  }

  /**
   * Valide une personnalit√©
   */
  validatePersona(persona: Persona): { valid: boolean; errors: string[] } {
    const errors: string[] = [];
    
    if (!persona.name || persona.name.trim() === '') {
      errors.push('Le nom de la personnalit√© est requis');
    }
    
    if (!persona.title || persona.title.trim() === '') {
      errors.push('Le titre de la personnalit√© est requis');
    }
    
    if (!persona.description || persona.description.trim() === '') {
      errors.push('La description de la personnalit√© est requise');
    }
    
    if (!persona.manifestation || persona.manifestation.trim() === '') {
      errors.push('La manifestation de la personnalit√© est requise');
    }
    
    if (!persona.traits || persona.traits.length === 0) {
      errors.push('Au moins un trait de personnalit√© est requis');
    }
    
    return {
      valid: errors.length === 0,
      errors
    };
  }

  /**
   * Exporte une personnalit√© en JSON
   */
  exportPersona(persona: Persona): string {
    return JSON.stringify(persona, null, 2);
  }

  /**
   * Importe une personnalit√© depuis JSON
   */
  importPersona(jsonData: string): Persona {
    try {
      const data = JSON.parse(jsonData);
      const validation = this.validatePersona(data);
      
      if (!validation.valid) {
        throw new Error(`Personnalit√© invalide: ${validation.errors.join(', ')}`);
      }
      
      return data;
    } catch (error) {
      throw new Error(`Erreur import personnalit√©: ${error}`);
    }
  }
}

/**
 * Test du PersonaManager
 */
export async function testPersonaManager(): Promise<void> {
  logger.info('üß™ Test PersonaManager');
  
  const manager = new PersonaManager();
  
  // Test avec la personnalit√© par d√©faut
  const defaultPersona = await manager.getPersonaForUser('Alice');
  
  logger.info('\nüìù Prompt Chat:');
  logger.info(manager.createChatPrompt(defaultPersona));
  
  logger.info('\nüìù Prompt R√©sum√©:');
  logger.info(manager.createSummaryPrompt(defaultPersona));
  
  // Test de validation
  const validation = manager.validatePersona(defaultPersona);
  logger.info(`\n‚úÖ Validation: ${validation.valid ? 'OK' : 'ERREUR'}`);
  if (!validation.valid) {
    logger.error(`Erreurs: ${validation.errors.join(', ')}`);
  }
  
  // Test d'export/import
  const exported = manager.exportPersona(defaultPersona);
  logger.info(`\nüì§ Export: ${exported.length} caract√®res`);
  
  try {
    const imported = manager.importPersona(exported);
    logger.info(`‚úÖ Import r√©ussi: ${imported.name}`);
  } catch (error) {
    logger.error(`‚ùå Erreur import: ${error}`);
  }
}