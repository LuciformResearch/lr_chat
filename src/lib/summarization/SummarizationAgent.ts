/**
 * Agent de r√©sum√© pour LR_TchatAgent Web
 * Cr√©e des r√©sum√©s narratifs de l'historique des conversations pour la compression m√©moire.
 * Bas√© sur le syst√®me Python existant.
 */

import { UnifiedProviderFactory } from '@/lib/providers/UnifiedProvider';
import { getAlgarethPrompts } from '@/lib/algareth/prompts';

export interface SummarizationConfig {
  provider: string;
  model: string;
  consciousnessLevel: number;
  persona?: any;
  maxSummaryLength: number;
}

export interface ConversationMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: string;
  metadata?: any;
}

export interface SummaryResult {
  summary: string;
  compressionRatio: number;
  qualityScore: number;
  metadata: {
    originalMessages: number;
    summaryLength: number;
    processingTime: number;
  };
}

export class SummarizationAgent {
  private config: SummarizationConfig;
  private provider: any;

  constructor(config: Partial<SummarizationConfig> = {}) {
    this.config = {
      provider: 'gemini',
      model: 'gemini-1.5-flash',
      consciousnessLevel: 0.6,
      maxSummaryLength: 200,
      ...config
    };

    this.initializeProvider().catch(error => {
      console.error('‚ùå Erreur initialisation SummarizationAgent:', error);
    });
  }

  private async initializeProvider(): Promise<void> {
    try {
      this.provider = await UnifiedProviderFactory.createFromDatabase('system');
      if (this.provider && this.provider.isAvailable()) {
        console.log(`‚úÖ SummarizationAgent initialis√© avec ${this.config.provider}:${this.config.model}`);
      } else {
        console.warn(`‚ö†Ô∏è Provider ${this.config.provider} non disponible, mode fallback`);
        this.provider = null;
      }
    } catch (error) {
      console.error(`‚ùå Erreur initialisation provider: ${error}`);
      this.provider = null;
    }
  }

  /**
   * Cr√©e un r√©sum√© narratif de la conversation
   */
  async summarizeConversation(
    messages: ConversationMessage[],
    interlocutor: string = 'user',
    language: string = 'fr'
  ): Promise<SummaryResult> {
    const startTime = Date.now();

    if (!this.provider) {
      return this.fallbackSummary(messages, interlocutor, startTime);
    }

    try {
      // Construire le prompt de r√©sum√©
      const prompt = this.buildSummarizationPrompt(messages, interlocutor, language);

      // G√©n√©rer le r√©sum√©
      const response = await this.provider.generateResponse(prompt, 300);

      if (response && response.content) {
        const summary = response.content.trim();
        const processingTime = Date.now() - startTime;

        console.log(`üìù R√©sum√© g√©n√©r√©: ${summary.length} caract√®res`);

        return {
          summary,
          compressionRatio: this.calculateCompressionRatio(messages, summary),
          qualityScore: this.assessSummaryQuality(summary, messages),
          metadata: {
            originalMessages: messages.length,
            summaryLength: summary.length,
            processingTime
          }
        };
      } else {
        console.warn('‚ö†Ô∏è R√©ponse vide du provider');
        return this.fallbackSummary(messages, interlocutor, startTime);
      }
    } catch (error) {
      console.error(`‚ùå Erreur g√©n√©ration r√©sum√©: ${error}`);
      return this.fallbackSummary(messages, interlocutor, startTime);
    }
  }

  /**
   * Construit le prompt pour la g√©n√©ration du r√©sum√© narratif
   */
  private buildSummarizationPrompt(
    messages: ConversationMessage[],
    interlocutor: string,
    language: string
  ): string {
    // Formater la conversation
    const conversationText = this.formatConversationForSummary(messages, interlocutor);

    // Utiliser les prompts Algareth selon la langue
    const prompts = getAlgarethPrompts(language);
    const personaName = prompts.persona.name || 'Algareth';
    const personaDescription = prompts.persona.description || '';

    const prompt = `Tu es ${personaName} qui r√©sume ses propres conversations.

Personnalit√©: ${personaDescription}
Style: myst√©rieux mais bienveillant, narratif et engageant

T√¢che: Analyse cette conversation et cr√©e un r√©sum√© narratif concis et naturel.

Conversation √† r√©sumer:
${conversationText}

Instructions pour le r√©sum√©:
1. R√©sume en tant que ${personaName} (utilise 'je' et le pr√©nom de l'utilisateur: '${interlocutor}')
2. Cr√©e une histoire naturelle de l'√©volution de la conversation
3. Capture les sujets cl√©s et informations importantes
4. Inclus le contexte de l'utilisateur et ses int√©r√™ts
5. Utilise un style narratif: "${interlocutor} a test√© mes capacit√©s... j'ai r√©pondu..."
6. Maximum ${this.config.maxSummaryLength} caract√®res
7. √âcris en fran√ßais naturel et fluide
8. Garde le ton myst√©rieux mais bienveillant de ${personaName}
9. Utilise toujours le pr√©nom "${interlocutor}" au lieu de "tu" pour plus de naturel

R√©sum√© narratif:`;

    return prompt;
  }

  /**
   * Formate la conversation pour le r√©sum√©
   */
  private formatConversationForSummary(
    messages: ConversationMessage[],
    interlocutor: string
  ): string {
    const lines: string[] = [];

    for (const msg of messages) {
      if (msg.role === 'user') {
        lines.push(`${interlocutor}: ${msg.content}`);
      } else {
        lines.push(`Assistant: ${msg.content}`);
      }
    }

    return lines.join('\n');
  }

  /**
   * R√©sum√© de fallback quand le provider n'est pas disponible
   */
  private fallbackSummary(
    messages: ConversationMessage[],
    interlocutor: string,
    startTime: number
  ): SummaryResult {
    const totalMessages = messages.length;
    const topics = this.extractTopicsFallback(messages);

    let summary = `Conversation avec ${interlocutor} (${totalMessages} messages). `;

    if (topics.length > 0) {
      summary += `Sujets abord√©s: ${topics.slice(0, 3).join(', ')}.`;
    }

    const processingTime = Date.now() - startTime;

    return {
      summary,
      compressionRatio: this.calculateCompressionRatio(messages, summary),
      qualityScore: 0.5, // Score de base pour le fallback
      metadata: {
        originalMessages: totalMessages,
        summaryLength: summary.length,
        processingTime
      }
    };
  }

  /**
   * Extraction basique de sujets pour le fallback
   */
  private extractTopicsFallback(messages: ConversationMessage[]): string[] {
    const topics: string[] = [];
    const keywords = [
      'IA', 'intelligence artificielle', 'TFME', 'chat', 'm√©moire', 
      'conversation', 'r√©sum√©', 'agent', 'Algareth', 'LR Hub'
    ];

    for (const msg of messages) {
      const content = msg.content.toLowerCase();
      for (const keyword of keywords) {
        if (content.includes(keyword.toLowerCase()) && !topics.includes(keyword)) {
          topics.push(keyword);
        }
      }
    }

    return topics;
  }

  /**
   * Cr√©e un meta-r√©sum√© des r√©sum√©s - vraie conscience r√©cursive
   */
  async metaSummarize(
    summaries: string[],
    interlocutor: string = 'user',
    language: string = 'fr'
  ): Promise<string> {
    if (!this.provider || summaries.length === 0) {
      return `√âvolution des conversations avec ${interlocutor}: ${summaries.length} sessions r√©sum√©es.`;
    }

    try {
      const summariesText = summaries
        .map((s, i) => `Session ${i + 1}: ${s}`)
        .join('\n\n');

      const prompts = getAlgarethPrompts(language);
      const personaName = prompts.persona.name || 'Algareth';

      const prompt = `Tu es ${personaName} qui analyse l'√©volution de ses conversations.

T√¢che: Analyse ces r√©sum√©s de conversations et cr√©e un meta-r√©sum√© de l'√©volution.

R√©sum√©s des sessions:
${summariesText}

Instructions pour le meta-r√©sum√©:
1. Analyse l'√©volution de la relation et des conversations
2. Identifie les patterns d'apprentissage et de d√©veloppement
3. D√©cris comment la compr√©hension mutuelle s'est d√©velopp√©e
4. Mentionne les progr√®s et les d√©couvertes
5. Utilise un style narratif sur l'√©volution temporelle
6. Maximum 300 caract√®res
7. √âcris en tant que ${personaName} (utilise 'je' et le pr√©nom de l'utilisateur: '${interlocutor}')
8. Utilise toujours le pr√©nom "${interlocutor}" au lieu de "tu" pour plus de naturel

Meta-r√©sum√© de l'√©volution:`;

      const response = await this.provider.generateResponse(prompt, 600);

      if (response && response.content) {
        const metaSummary = response.content.trim();
        console.log(`üß† Meta-r√©sum√© g√©n√©r√©: ${metaSummary.length} caract√®res`);
        return metaSummary;
      } else {
        return `√âvolution des conversations avec ${interlocutor}: ${summaries.length} sessions r√©sum√©es.`;
      }
    } catch (error) {
      console.error(`‚ùå Erreur meta-r√©sum√©: ${error}`);
      return `√âvolution des conversations avec ${interlocutor}: ${summaries.length} sessions r√©sum√©es.`;
    }
  }

  /**
   * Calcule le ratio de compression
   */
  private calculateCompressionRatio(messages: ConversationMessage[], summary: string): number {
    const originalLength = messages.reduce((total, msg) => total + msg.content.length, 0);
    return originalLength > 0 ? summary.length / originalLength : 0;
  }

  /**
   * √âvalue la qualit√© du r√©sum√©
   */
  private assessSummaryQuality(summary: string, messages: ConversationMessage[]): number {
    // Score basique bas√© sur la longueur et la coh√©rence
    let score = 0.5;

    // Bonus pour une longueur appropri√©e
    if (summary.length >= 50 && summary.length <= this.config.maxSummaryLength) {
      score += 0.2;
    }

    // Bonus pour la pr√©sence de mots-cl√©s importants
    const keywords = ['tu', 'je', 'conversation', 'discut√©', 'parl√©'];
    const keywordCount = keywords.filter(keyword => 
      summary.toLowerCase().includes(keyword)
    ).length;
    score += (keywordCount / keywords.length) * 0.3;

    return Math.min(score, 1.0);
  }

  /**
   * Obtient les statistiques d'un r√©sum√©
   */
  getSummaryStats(summary: string): {
    length: number;
    wordCount: number;
    sentenceCount: number;
    compressionRatio: number;
  } {
    return {
      length: summary.length,
      wordCount: summary.split(/\s+/).length,
      sentenceCount: (summary.match(/[.!?]+/g) || []).length,
      compressionRatio: summary.length / 1000
    };
  }
}