/**
 * Gestionnaire de persistence pour les sessions de chat
 * Utilise localStorage avec structure organis√©e par utilisateur
 */

import { ChatSession, SessionMemory, SessionStorage } from './types';

export class LocalSessionStorage implements SessionStorage {
  private readonly STORAGE_PREFIX = 'lr_tchatagent_sessions';
  private readonly MEMORY_PREFIX = 'lr_tchatagent_session_memory';

  /**
   * Sauvegarde une session
   */
  async saveSession(session: ChatSession): Promise<void> {
    try {
      const userSessions = await this.loadSessions(session.user);
      const existingIndex = userSessions.findIndex(s => s.id === session.id);
      
      if (existingIndex >= 0) {
        // Pr√©server les donn√©es importantes lors de la mise √† jour
        const existingSession = userSessions[existingIndex];
        userSessions[existingIndex] = {
          ...session,
          // Pr√©server les donn√©es de m√©moire si elles existent
          memoryStats: session.memoryStats || existingSession.memoryStats,
          messageCount: session.messageCount || existingSession.messageCount,
          lastMessage: session.lastMessage || existingSession.lastMessage
        };
      } else {
        userSessions.push(session);
      }
      
      // Trier par date de mise √† jour (plus r√©cent en premier)
      userSessions.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());
      
      const storageKey = `${this.STORAGE_PREFIX}_${session.user}`;
      localStorage.setItem(storageKey, JSON.stringify(userSessions));
      
      console.log(`üíæ Session sauvegard√©e: ${session.id} (${session.title}) - ${session.messageCount} messages`);
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde session:', error);
      throw error;
    }
  }

  /**
   * Charge toutes les sessions d'un utilisateur
   */
  async loadSessions(user: string): Promise<ChatSession[]> {
    try {
      const storageKey = `${this.STORAGE_PREFIX}_${user}`;
      const data = localStorage.getItem(storageKey);
      
      if (!data) {
        return [];
      }
      
      const sessions = JSON.parse(data) as ChatSession[];
      
      // V√©rifier que sessions est bien un tableau
      if (!Array.isArray(sessions)) {
        console.warn(`‚ö†Ô∏è Donn√©es sessions corrompues pour ${user}, r√©initialisation`);
        return [];
      }
      
      // Trier par date de mise √† jour (plus r√©cent en premier)
      sessions.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());
      
      console.log(`üìÇ ${sessions.length} sessions charg√©es pour ${user} (tri√©es par derni√®re modification)`);
      return sessions;
    } catch (error) {
      console.error('‚ùå Erreur chargement sessions:', error);
      return [];
    }
  }

  /**
   * Supprime une session
   */
  async deleteSession(sessionId: string): Promise<void> {
    try {
      // Trouver l'utilisateur de cette session
      const allKeys = Object.keys(localStorage);
      const sessionKeys = allKeys.filter(key => key.startsWith(this.STORAGE_PREFIX));
      
      for (const key of sessionKeys) {
        const sessions = JSON.parse(localStorage.getItem(key) || '[]') as ChatSession[];
        const sessionIndex = sessions.findIndex(s => s.id === sessionId);
        
        if (sessionIndex >= 0) {
          sessions.splice(sessionIndex, 1);
          localStorage.setItem(key, JSON.stringify(sessions));
          
          // Supprimer aussi la m√©moire associ√©e
          await this.deleteSessionMemory(sessionId);
          
          console.log(`üóëÔ∏è Session supprim√©e: ${sessionId}`);
          return;
        }
      }
      
      console.warn(`‚ö†Ô∏è Session non trouv√©e: ${sessionId}`);
    } catch (error) {
      console.error('‚ùå Erreur suppression session:', error);
      throw error;
    }
  }

  /**
   * Sauvegarde la m√©moire d'une session
   */
  async saveSessionMemory(sessionId: string, memory: SessionMemory): Promise<void> {
    try {
      const storageKey = `${this.MEMORY_PREFIX}_${sessionId}`;
      localStorage.setItem(storageKey, JSON.stringify(memory));
      
      console.log(`üß† M√©moire session sauvegard√©e: ${sessionId}`);
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde m√©moire session:', error);
      throw error;
    }
  }

  /**
   * Charge la m√©moire d'une session
   */
  async loadSessionMemory(sessionId: string): Promise<SessionMemory | null> {
    try {
      const storageKey = `${this.MEMORY_PREFIX}_${sessionId}`;
      console.log(`üîç Chargement m√©moire avec cl√©: ${storageKey}`);
      const data = localStorage.getItem(storageKey);
      
      if (!data) {
        console.log(`‚ùå Aucune donn√©e trouv√©e pour la cl√©: ${storageKey}`);
        return null;
      }
      
      const memory = JSON.parse(data) as SessionMemory;
      
      // V√©rifier que memory est bien un objet valide
      if (!memory || typeof memory !== 'object') {
        console.warn(`‚ö†Ô∏è Donn√©es m√©moire corrompues pour ${sessionId}, r√©initialisation`);
        return null;
      }
      
      console.log(`üß† M√©moire session charg√©e: ${sessionId}`);
      console.log(`üìã Session ID dans la m√©moire charg√©e: ${memory.sessionId}`);
      console.log(`üìù Nombre de messages dans la m√©moire: ${memory.messages?.length || 0}`);
      return memory;
    } catch (error) {
      console.error('‚ùå Erreur chargement m√©moire session:', error);
      return null;
    }
  }

  /**
   * Supprime la m√©moire d'une session
   */
  private async deleteSessionMemory(sessionId: string): Promise<void> {
    try {
      const storageKey = `${this.MEMORY_PREFIX}_${sessionId}`;
      localStorage.removeItem(storageKey);
      console.log(`üßπ M√©moire session supprim√©e: ${sessionId}`);
    } catch (error) {
      console.error('‚ùå Erreur suppression m√©moire session:', error);
    }
  }

  /**
   * Vide toutes les sessions d'un utilisateur
   */
  async clearAllSessions(user: string): Promise<void> {
    try {
      const storageKey = `${this.STORAGE_PREFIX}_${user}`;
      const sessions = await this.loadSessions(user);
      
      // Supprimer toutes les m√©moires associ√©es
      for (const session of sessions) {
        await this.deleteSessionMemory(session.id);
      }
      
      localStorage.removeItem(storageKey);
      console.log(`üßπ Toutes les sessions supprim√©es pour ${user}`);
    } catch (error) {
      console.error('‚ùå Erreur suppression sessions:', error);
      throw error;
    }
  }

  /**
   * Obtient les statistiques de stockage
   */
  getStorageStats(): {
    totalSessions: number;
    totalMemoryEntries: number;
    storageSize: number;
  } {
    const allKeys = Object.keys(localStorage);
    const sessionKeys = allKeys.filter(key => key.startsWith(this.STORAGE_PREFIX));
    const memoryKeys = allKeys.filter(key => key.startsWith(this.MEMORY_PREFIX));
    
    let totalSessions = 0;
    for (const key of sessionKeys) {
      const sessions = JSON.parse(localStorage.getItem(key) || '[]') as ChatSession[];
      totalSessions += sessions.length;
    }
    
    const storageSize = allKeys.reduce((size, key) => {
      return size + (localStorage.getItem(key)?.length || 0);
    }, 0);
    
    return {
      totalSessions,
      totalMemoryEntries: memoryKeys.length,
      storageSize
    };
  }
}