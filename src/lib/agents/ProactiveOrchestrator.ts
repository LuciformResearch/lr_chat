/**
 * Orchestrateur Proactif - Coordonne les serviteurs pour murmurer √† Algareth
 * Analyse les questions utilisateur et active les serviteurs pertinents
 */

import { PertinenceAnalyzer, ServiteurSuggestion } from './PertinenceAnalyzer';
import { ServiteurAgent, ServiteurMurmur } from './ServiteurMurmur';
import { AlgarethContext } from './AlgarethAgent';
import { AgentManager } from './AgentManager';
import { PersonalityArchivistAgent } from './PersonalityArchivistAgent';

export class ProactiveOrchestrator {
  private pertinenceAnalyzer: PertinenceAnalyzer;
  private serviteurs: Map<string, ServiteurAgent> = new Map();
  private agentManager: AgentManager;
  private isInitialized: boolean = false;
  private personalityArchivist: PersonalityArchivistAgent;

  constructor(geminiApiKey: string, agentManager: AgentManager, dataDir?: string) {
    this.pertinenceAnalyzer = new PertinenceAnalyzer(geminiApiKey);
    this.agentManager = agentManager;
    this.personalityArchivist = new PersonalityArchivistAgent(geminiApiKey, dataDir);
    console.log('üé≠ ProactiveOrchestrator initialis√©');
  }

  /**
   * Initialise l'orchestrateur et enregistre les serviteurs
   */
  async initialize(): Promise<void> {
    try {
      console.log('üöÄ Initialisation de l\'orchestrateur proactif...');

      // Enregistrer les serviteurs disponibles
      await this.registerAvailableServiteurs();

      this.isInitialized = true;
      console.log('‚úÖ Orchestrateur proactif initialis√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur initialisation orchestrateur proactif:', error);
      throw error;
    }
  }

  /**
   * Enregistre les serviteurs disponibles
   */
  private async registerAvailableServiteurs(): Promise<void> {
    // Pour l'instant, on se concentre sur l'archiviste
    // Les autres serviteurs seront ajout√©s dans les phases suivantes
    
    console.log('üìö Enregistrement des serviteurs...');
    
    // L'archiviste sera enregistr√© via l'extension de l'ArchivistAgent
    // Les autres serviteurs seront ajout√©s progressivement
    
    console.log(`‚úÖ ${this.serviteurs.size} serviteurs enregistr√©s`);
  }

  /**
   * Enregistre un serviteur
   */
  registerServiteur(serviteur: ServiteurAgent): void {
    this.serviteurs.set(serviteur.getName(), serviteur);
    console.log(`üìù Serviteur "${serviteur.getName()}" enregistr√©`);
  }

  /**
   * Traite un message utilisateur et pr√©pare les murmures des serviteurs pertinents
   */
  async processUserMessage(userMessage: string, context: AlgarethContext): Promise<ServiteurMurmur[]> {
    if (!this.isInitialized) {
      throw new Error('Orchestrateur proactif non initialis√©');
    }

    try {
      console.log(`üé≠ Traitement proactif du message: "${userMessage.substring(0, 50)}..."`);

      // 1. Analyser la pertinence des serviteurs
      const suggestions = await this.pertinenceAnalyzer.analyzeUserQuestion(userMessage, context);
      
      if (suggestions.length === 0) {
        console.log('üîç Aucun serviteur pertinent trouv√©');
        return [];
      }

      console.log(`üîç ${suggestions.length} serviteurs pertinents trouv√©s`);

      // 2. Pr√©parer les murmures des serviteurs pertinents
      const murmurs: ServiteurMurmur[] = [];
      
      for (const suggestion of suggestions) {
        if (suggestion.pertinence > 0.6) { // Seuil de pertinence √©lev√©
          const serviteur = this.serviteurs.get(suggestion.serviteur);
          if (serviteur) {
            try {
              const murmur = await serviteur.prepareMurmur(userMessage, context, suggestion);
              murmurs.push(murmur);
              console.log(`‚úÖ Murmur de ${suggestion.serviteur} pr√©par√©`);
            } catch (error) {
              console.error(`‚ùå Erreur pr√©paration murmur ${suggestion.serviteur}:`, error);
            }
          } else {
            console.warn(`‚ö†Ô∏è Serviteur "${suggestion.serviteur}" non trouv√©`);
          }
        } else {
          console.log(`‚è≠Ô∏è Serviteur "${suggestion.serviteur}" ignor√© (pertinence: ${suggestion.pertinence})`);
        }
      }

      console.log(`üéâ ${murmurs.length} murmurs pr√©par√©s`);
      return murmurs;

    } catch (error) {
      console.error('‚ùå Erreur traitement proactif:', error);
      return [];
    }
  }

  /**
   * Obtient les murmures format√©s pour Algareth
   */
  async getFormattedMurmurs(userMessage: string, context: AlgarethContext): Promise<string> {
    try {
      // Utiliser directement l'archiviste avec personnalit√©
      const archivistResponse = await this.personalityArchivist.processRequest(userMessage, context);
      
      if (!archivistResponse.success || !archivistResponse.message) {
        return '';
      }

      // Formater la r√©ponse de l'archiviste pour Algareth
      return `CONTEXTE ENRICHI PAR TES SERVITEURS:\n\n${archivistResponse.message}\n\n`;
    } catch (error) {
      console.error('‚ùå Erreur obtention murmures archiviste:', error);
      return '';
    }
  }

  /**
   * Obtient les statistiques de l'orchestrateur
   */
  getStats(): {
    isInitialized: boolean;
    registeredServiteurs: string[];
    totalMurmurs: number;
    averageProcessingTime: number;
  } {
    return {
      isInitialized: this.isInitialized,
      registeredServiteurs: Array.from(this.serviteurs.keys()),
      totalMurmurs: 0, // TODO: Impl√©menter le comptage
      averageProcessingTime: 0 // TODO: Impl√©menter le calcul
    };
  }

  /**
   * Teste l'orchestrateur avec des cas de test
   */
  async testOrchestrator(): Promise<void> {
    console.log('üß™ Test ProactiveOrchestrator');
    
    const testCases = [
      {
        message: "Tu te souviens de mes pr√©f√©rences en couleurs ?",
        expectedServiteurs: ['archivist']
      },
      {
        message: "Comment √ßa va ?",
        expectedServiteurs: []
      },
      {
        message: "G√©n√®re une image de paysage",
        expectedServiteurs: ['image_generator']
      }
    ];

    for (const testCase of testCases) {
      const context: AlgarethContext = {
        userId: 'test_user',
        userName: 'Test User',
        currentSession: 'test_session',
        userMessage: testCase.message,
        conversationHistory: [],
        sessionStartTime: new Date().toISOString()
      };

      const murmurs = await this.processUserMessage(testCase.message, context);
      const actualServiteurs = murmurs.map(m => m.serviteur);
      
      const success = JSON.stringify(actualServiteurs.sort()) === JSON.stringify(testCase.expectedServiteurs.sort());
      console.log(`${success ? '‚úÖ' : '‚ùå'} "${testCase.message}" ‚Üí ${actualServiteurs.join(', ')} (attendu: ${testCase.expectedServiteurs.join(', ')})`);
    }
  }

  /**
   * Vide l'historique des murmures (pour les tests)
   */
  clearHistory(): void {
    console.log('üßπ Historique des murmures vid√©');
  }
}