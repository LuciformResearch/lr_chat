/**
 * Orchestrateur simplifi√© c√¥t√© serveur
 * Utilise uniquement Google Generative AI c√¥t√© serveur
 */

import { GoogleGenerativeAI } from '@google/generative-ai';
import { Pool } from 'pg';
import { PersonalityArchivistAgent } from './PersonalityArchivistAgent';
import { PromptEnhancerAgent } from './PromptEnhancerAgent';
import { GeminiImageProvider } from '../providers/GeminiImageProvider';
import { OllamaProvider } from '../providers/OllamaProvider';

export interface DivineDecision {
  shouldEnrichMemory: boolean;
  shouldGenerateImage: boolean;
  memoryQuery?: string;
  imagePrompt?: string;
  reasoning: string;
  confidence: number;
}

export interface DivineMurmur {
  type: 'memory' | 'image' | 'both' | 'none';
  content: string;
  data?: any;
  timestamp: string;
}

export interface OrchestrationContext {
  userMessage: string;
  userIdentityId: string;
  userName: string;
  conversationHistory: Array<{ role: string; content: string }>;
  currentSession: string;
  assistantName?: string;
  disableArchivist?: boolean;
  archivistVerbose?: 'none' | 'prompts' | 'outputs' | 'total';
  authUserId?: string;
}

export class ServerOrchestrator {
  private genAI: GoogleGenerativeAI;
  private model: any;
  private ollamaProvider: OllamaProvider | null = null;
  private archivist: PersonalityArchivistAgent | null = null;
  private promptEnhancer: PromptEnhancerAgent | null = null;
  private imageProvider: GeminiImageProvider | null = null;
  private dbPool: Pool | null = null;
  private debugMode: boolean = false;

  constructor(geminiApiKey: string, dbPool?: Pool, debugMode: boolean = false) {
    this.genAI = new GoogleGenerativeAI(geminiApiKey);
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    this.dbPool = dbPool || null;
    this.debugMode = debugMode;
    
    // Initialiser Ollama si en mode debug
    if (this.debugMode) {
      this.ollamaProvider = new OllamaProvider({
        model: 'gemma2:2b', // Mod√®le rapide pour le debug
        timeout: 10000,
        debugMode: true // Afficher les r√©ponses compl√®tes
      });
      console.log('ü¶ô ServerOrchestrator initialis√© en mode debug avec Ollama');
    } else {
      console.log('ü¶ã ServerOrchestrator initialis√© en mode production avec Gemini');
    }
    
    if (this.dbPool) {
      console.log('üóÑÔ∏è Pool de base de donn√©es fourni pour l\'archiviste');
    } else {
      console.log('‚ö†Ô∏è Pas de pool DB - archiviste en mode fallback');
    }
  }

  /**
   * Initialise les agents serviteurs
   */
  async initializeServants(geminiApiKey: string): Promise<void> {
    try {
      // Initialiser l'agent archiviste avec pool DB si disponible
      // Force le mode base de donn√©es si on a un pool DB, sinon mode web
      const useWebMode = !this.dbPool;
      
      if (this.debugMode) {
        // Mode debug : archiviste avec Ollama mais service s√©mantique avec Gemini
        this.archivist = new PersonalityArchivistAgent('', undefined, false, this.dbPool, true);
        console.log(`üìö Agent Archiviste initialis√© en mode debug avec Ollama`);
        
        // Initialiser le service de recherche s√©mantique avec Gemini (pour les embeddings)
        if (this.dbPool && this.archivist) {
          await this.archivist.initializeSemanticSearch(geminiApiKey);
          console.log('üîç Service de recherche s√©mantique activ√© pour l\'archiviste (embeddings Gemini)');
        } else {
          console.log('‚ö†Ô∏è Archiviste en mode fallback (pas de pool DB)');
        }
      } else {
        // Mode production : archiviste avec Gemini
        this.archivist = new PersonalityArchivistAgent(geminiApiKey, undefined, useWebMode, this.dbPool, false);
        console.log(`üìö Agent Archiviste initialis√© en mode production avec Gemini`);
        
        // Initialiser le service de recherche s√©mantique de mani√®re asynchrone
        if (this.dbPool && this.archivist) {
          await this.archivist.initializeSemanticSearch(geminiApiKey);
          console.log('üîç Service de recherche s√©mantique activ√© pour l\'archiviste');
        } else {
          console.log('‚ö†Ô∏è Archiviste en mode fallback (pas de pool DB)');
        }
      }

      // Initialiser l'agent prompt enhancer
      if (this.debugMode) {
        // Mode debug : prompt enhancer en mode fallback
        this.promptEnhancer = new PromptEnhancerAgent('', true);
        console.log('üé® Agent Prompt Enhancer initialis√© en mode debug (fallback)');
      } else {
        // Mode production : prompt enhancer avec Gemini
        this.promptEnhancer = new PromptEnhancerAgent(geminiApiKey, true);
        console.log('üé® Agent Prompt Enhancer initialis√© en mode production');
      }

      // Initialiser le provider d'images
      if (this.debugMode) {
        // Mode debug : provider d'images en mode fallback
        this.imageProvider = new GeminiImageProvider('');
        console.log('üñºÔ∏è Provider d\'images initialis√© en mode debug (fallback)');
      } else {
        // Mode production : provider d'images avec Gemini
        this.imageProvider = new GeminiImageProvider(geminiApiKey);
        console.log('üñºÔ∏è Provider d\'images initialis√© en mode production');
      }

      console.log('‚úÖ Tous les serviteurs sont pr√™ts √† aider Algareth');
    } catch (error) {
      console.error('‚ùå Erreur initialisation serviteurs:', error);
      throw error;
    }
  }

  /**
   * Analyse la requ√™te utilisateur et d√©cide des actions proactives
   */
  async analyzeAndDecide(context: OrchestrationContext): Promise<DivineDecision> {
    try {
      console.log(`ü¶ã ServerOrchestrator analyse: "${context.userMessage.substring(0, 50)}..."`);

      const analysisPrompt = `Tu es la Luciole, la compagne bienveillante d'Algareth. Tu d√©cides intelligemment quand enrichir la m√©moire et g√©n√©rer des images.

CONTEXTE:
- Message utilisateur: "${context.userMessage}"
- Utilisateur: ${context.userName} (${context.userIdentityId})
- Historique: ${context.conversationHistory.length} messages
- Session: ${context.currentSession}

R√àGLES DE D√âCISION:

1. ENRICHISSEMENT M√âMOIRE (archiviste):
   ‚úÖ ACTIVER si:
   - L'utilisateur demande des informations sur ses pr√©f√©rences pass√©es
   - L'utilisateur mentionne des sujets discut√©s pr√©c√©demment
   - L'utilisateur pose des questions personnelles n√©cessitant du contexte
   - L'utilisateur demande "tu te souviens de..." ou √©quivalent
   - L'utilisateur fait r√©f√©rence √† des conversations ant√©rieures

   ‚ùå NE PAS ACTIVER pour:
   - Salutations simples: "bonjour", "salut", "hello", "coucou"
   - Questions g√©n√©rales sans contexte personnel: "comment √ßa va ?", "√ßa va ?"
   - Demandes d'aide g√©n√©riques: "aide-moi", "peux-tu m'aider ?"
   - Questions factuelles g√©n√©rales: "quelle heure est-il ?", "quel temps fait-il ?"
   - Demandes de cr√©ation sans contexte: "√©cris-moi un po√®me", "raconte-moi une histoire"
   - Conversations de politesse: "merci", "de rien", "√† bient√¥t"

2. G√âN√âRATION D'IMAGE (prompt enhancer):
   ‚úÖ ACTIVER UNIQUEMENT si l'utilisateur demande explicitement une image:
   - "dessine-moi", "cr√©e une image de", "montre-moi visuellement", "g√©n√®re une illustration"
   - "peux-tu faire un dessin de", "j'aimerais voir", "montre-moi"
   
   ‚ùå NE PAS ACTIVER pour:
   - "c'est beau", "j'imagine", "√ßa ressemble √†", descriptions g√©n√©rales
   - Demandes de texte ou d'explications
   - Si tu h√©sites, ne g√©n√®re PAS d'image

3. PRIORIT√âS:
   - Les deux peuvent √™tre activ√©s simultan√©ment
   - Privil√©gier la pertinence sur la quantit√©
   - √âviter les actions inutiles
   - En cas de doute, choisir la solution la plus simple (pas d'enrichissement m√©moire)

R√âPONDS UNIQUEMENT EN JSON avec cette structure exacte (pas de texte avant ou apr√®s):
{
  "shouldEnrichMemory": true/false,
  "shouldGenerateImage": true/false,
  "memoryQuery": "requ√™te_pour_l_archiviste_ou_null",
  "imagePrompt": "prompt_pour_g√©n√©ration_image_ou_null",
  "reasoning": "explication_d√©taill√©e_de_la_d√©cision",
  "confidence": 0.0-1.0
}

IMPORTANT: R√©ponds UNIQUEMENT avec le JSON, rien d'autre.`;

      let responseText: string;
      
      if (this.debugMode && this.ollamaProvider) {
        // Mode debug : utiliser Ollama
        console.log('ü¶ô Analyse avec Ollama (mode debug)...');
        const ollamaResponse = await this.ollamaProvider.generateResponse(analysisPrompt, 1000);
        responseText = ollamaResponse.content || '';
        
        if (ollamaResponse.error) {
          console.warn('‚ö†Ô∏è Ollama √©chou√©, fallback vers Gemini...');
          const result = await this.model.generateContent(analysisPrompt);
          responseText = result.response?.text()?.trim() || '';
        }
      } else {
        // Mode production : utiliser Gemini
        console.log('üîë Analyse avec Gemini (mode production)...');
        const result = await this.model.generateContent(analysisPrompt);
        responseText = result.response?.text()?.trim() || '';
      }
      
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const decision = JSON.parse(jsonMatch[0]);
        console.log(`üéØ D√©cision orchestrateur:`, decision);
        return decision;
      } else {
        throw new Error('R√©ponse JSON invalide de l\'orchestrateur');
      }
    } catch (error) {
      console.error('‚ùå Erreur analyse orchestrateur:', error);
      // Fallback: d√©cision conservatrice
      return {
        shouldEnrichMemory: false,
        shouldGenerateImage: false,
        reasoning: 'Erreur d\'analyse - d√©cision conservatrice',
        confidence: 0.1
      };
    }
  }

  /**
   * Ex√©cute les actions d√©cid√©es et g√©n√®re les murmures
   */
  async executeActions(decision: DivineDecision, context: OrchestrationContext): Promise<DivineMurmur[]> {
    const murmurs: DivineMurmur[] = [];

    try {
      // Action 1: Enrichir la m√©moire si n√©cessaire
      if (!context.disableArchivist && decision.shouldEnrichMemory && this.archivist && decision.memoryQuery) {
        console.log(`üìö Enrichissement m√©moire: "${decision.memoryQuery}"`);
        console.log(`üìö Contexte pass√© √† l'archiviste: userIdentityId="${(context as any).userIdentityId || (context as any).userId}", userName="${context.userName}", session="${context.currentSession}"`);
        
        const archivistResponse = await this.archivist.processRequest(decision.memoryQuery, {
          userIdentityId: (context as any).userIdentityId || (context as any).userId,
          userName: context.userName,
          currentSession: context.currentSession,
          assistantName: context.assistantName || 'Algareth',
          archivistVerbose: (context as any).archivistVerbose || process.env.ARCHIVIST_VERBOSE || 'none',
          authUserId: (context as any).authUserId
        });

        if (archivistResponse.success) {
          // Extraire les informations cl√©s du message de l'archiviste
          const archivistMessage = archivistResponse.message;
          
          // Cr√©er un murmure plus concis et direct
          murmurs.push({
            type: 'memory',
            content: `Salut Algareth ! üìö J'ai trouv√© des informations sur ${context.userName} :\n\n${archivistMessage}\n\nUtilise ces informations pour enrichir ta r√©ponse √† ${context.userName}.`,
            data: archivistResponse,
            timestamp: new Date().toISOString()
          });
        }
      }

      // Action 2: G√©n√©rer une image si n√©cessaire
      if (decision.shouldGenerateImage && this.promptEnhancer && decision.imagePrompt) {
        console.log(`üé® G√©n√©ration image: "${decision.imagePrompt}"`);
        
        // Am√©liorer le prompt avec l'agent prompt enhancer
        const enhancerResponse = await this.promptEnhancer.processRequest(decision.imagePrompt, {
          userIdentityId: (context as any).userIdentityId || (context as any).userId,
          userName: context.userName,
          currentSession: context.currentSession
        });

        if (enhancerResponse.success && enhancerResponse.enhancedPrompt) {
          // Mode debug : simuler la g√©n√©ration d'image sans vraiment l'appeler
          const isDebugMode = process.env.ORCHESTRATOR_DEBUG_MODE === 'true';
          
          if (isDebugMode) {
            console.log('üîß Mode debug : simulation de g√©n√©ration d\'image (prompt enhancer fonctionne normalement)');
            console.log(`üé® G√©n√©ration d'images avec prompt: "${enhancerResponse.enhancedPrompt}"`);
            console.log(`üé® G√©n√©ration d'images r√©elles avec Gemini 2.5 Flash Image...`);
            console.log(`üîß [DEBUG MODE] Simulation - pas d'appel r√©el √† Gemini Image`);
            murmurs.push({
              type: 'image',
              content: `Salut Algareth, je suis le g√©n√©rateur d'images. ${context.userName} a demand√© une image et j'ai cr√©√© quelque chose de joli pour toi ! üé®\n\nPrompt am√©lior√©: "${enhancerResponse.enhancedPrompt}"\n\n[DEBUG MODE] L'image serait g√©n√©r√©e ici sans consommer de quota.`,
              data: {
                enhancedPrompt: enhancerResponse.enhancedPrompt,
                image: {
                  url: null,
                  size: '1024x1024',
                  debug: true
                },
                improvements: enhancerResponse.improvements,
                debugMode: true
              },
              timestamp: new Date().toISOString()
            });
          } else if (this.imageProvider && this.imageProvider.isProviderAvailable()) {
            // Mode normal : g√©n√©rer l'image r√©ellement
            const imageResponse = await this.imageProvider.generateImages({
              prompt: enhancerResponse.enhancedPrompt,
              style: 'photorealistic',
              quality: 'high',
              size: '1024x1024',
              count: 1
            });

            if (imageResponse.success && imageResponse.images) {
              console.log('üé® Image g√©n√©r√©e avec succ√®s:', imageResponse.images[0].url ? 'URL pr√©sente' : 'Pas d\'URL');
              murmurs.push({
                type: 'image',
                content: `Salut Algareth, je suis le g√©n√©rateur d'images. ${context.userName} a demand√© une image et j'ai cr√©√© quelque chose de joli pour toi ! üé®\n\nPrompt am√©lior√©: "${enhancerResponse.enhancedPrompt}"\n\nL'image est pr√™te et peut √™tre t√©l√©charg√©e. Peut-√™tre qu'elle pourra enrichir ta r√©ponse ?`,
                data: {
                  enhancedPrompt: enhancerResponse.enhancedPrompt,
                  image: imageResponse.images[0],
                  improvements: enhancerResponse.improvements
                },
                timestamp: new Date().toISOString()
              });
            }
          } else {
            console.log('‚ö†Ô∏è Image provider non disponible');
          }
        }
      }

      // D√©terminer le type de murmure final
      if (murmurs.length === 0) {
        murmurs.push({
          type: 'none',
          content: 'Aucune action sp√©ciale requise pour cette requ√™te.',
          timestamp: new Date().toISOString()
        });
      } else if (murmurs.length === 1) {
        // Type d√©j√† d√©fini
      } else {
        // Plusieurs murmures - marquer comme 'both'
        murmurs.forEach(murmur => {
          if (murmur.type !== 'none') {
            murmur.type = 'both';
          }
        });
      }

      console.log(`ü¶ã ${murmurs.length} murmure(s) g√©n√©r√©(s) pour Algareth`);
      return murmurs;

    } catch (error) {
      console.error('‚ùå Erreur ex√©cution actions:', error);
      return [{
        type: 'none',
        content: `Erreur lors de l'ex√©cution des actions: ${error}`,
        timestamp: new Date().toISOString()
      }];
    }
  }

  /**
   * Orchestration compl√®te
   */
  async orchestrate(context: OrchestrationContext): Promise<DivineMurmur[]> {
    try {
      console.log(`ü¶ã ServerOrchestrator orchestration pour ${context.userName}`);
      
      // 1. Analyser et d√©cider
      const decision = await this.analyzeAndDecide(context);
      
      // 2. Ex√©cuter les actions
      const murmurs = await this.executeActions(decision, context);
      
      return murmurs;
    } catch (error) {
      console.error('‚ùå Erreur orchestration:', error);
      return [{
        type: 'none',
        content: `Erreur orchestration: ${error}`,
        timestamp: new Date().toISOString()
      }];
    }
  }
}
