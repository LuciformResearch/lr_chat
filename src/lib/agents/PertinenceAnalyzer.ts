/**
 * Analyseur de Pertinence - D√©termine quels serviteurs sont pertinents pour une question utilisateur
 * Utilise un LLM pour analyser la question et sugg√©rer les serviteurs appropri√©s
 */

import { GoogleGenerativeAI } from '@google/generative-ai';
import { AlgarethContext } from './AlgarethAgent';

export interface ServiteurSuggestion {
  serviteur: string;
  pertinence: number; // 0-1
  raison: string;
  urgence: 'faible' | 'moyenne' | '√©lev√©e';
}

export class PertinenceAnalyzer {
  private genAI: GoogleGenerativeAI;
  private model: any;

  constructor(geminiApiKey: string) {
    this.genAI = new GoogleGenerativeAI(geminiApiKey);
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    console.log('üîç PertinenceAnalyzer initialis√©');
  }

  /**
   * Analyse une question utilisateur et d√©termine quels serviteurs sont pertinents
   */
  async analyzeUserQuestion(userMessage: string, context: AlgarethContext): Promise<ServiteurSuggestion[]> {
    try {
      console.log(`üîç Analyse de pertinence pour: "${userMessage.substring(0, 50)}..."`);

      const prompt = `Tu es un analyseur de pertinence pour Algareth, un agent IA conversationnel.

QUESTION UTILISATEUR: "${userMessage}"
CONTEXTE: Session avec ${context.userName}, ${context.conversationHistory.length} messages d'historique

D√©termine si ces serviteurs sont pertinents pour r√©pondre √† cette question:

1. ARCHIVISTE: Pour m√©moire √©pisodique, patterns, relation, √©motions, pr√©f√©rences pass√©es
2. IMAGE_GENERATOR: Pour demandes visuelles, cr√©atives, illustrations, g√©n√©ration d'images
3. RESEARCH_ASSISTANT: Pour informations factuelles, recherches, donn√©es, connaissances
4. CODE_ASSISTANT: Pour questions techniques, programmation, code, d√©veloppement

R√âPONDS UNIQUEMENT EN JSON avec cette structure exacte:
{
  "suggestions": [
    {
      "serviteur": "archivist|image_generator|research_assistant|code_assistant",
      "pertinence": 0.0-1.0,
      "raison": "Explication courte de pourquoi ce serviteur est pertinent",
      "urgence": "faible|moyenne|√©lev√©e"
    }
  ]
}

CRIT√àRES DE PERTINENCE:
- Pertinence > 0.7: Tr√®s pertinent, serviteur n√©cessaire
- Pertinence 0.4-0.7: Mod√©r√©ment pertinent, serviteur utile
- Pertinence < 0.4: Peu pertinent, serviteur non n√©cessaire

EXEMPLES:
- "Tu te souviens de mes pr√©f√©rences?" ‚Üí archivist (0.9)
- "G√©n√®re une image de paysage" ‚Üí image_generator (0.9)
- "Qu'est-ce que React?" ‚Üí research_assistant (0.8)
- "Comment √©crire une fonction?" ‚Üí code_assistant (0.8)
- "Comment √ßa va?" ‚Üí aucun serviteur (pertinence < 0.4)`;

      const result = await this.model.generateContent(prompt);
      const responseText = result.response.text().trim();
      
      // Nettoyer et parser la r√©ponse JSON
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        const suggestions = parsed.suggestions || [];
        
        // Filtrer les suggestions avec pertinence > 0.4
        const relevantSuggestions = suggestions.filter((s: ServiteurSuggestion) => s.pertinence > 0.4);
        
        console.log(`‚úÖ ${relevantSuggestions.length} serviteurs pertinents trouv√©s`);
        return relevantSuggestions;
      } else {
        throw new Error('R√©ponse JSON invalide');
      }
    } catch (error) {
      console.error('‚ùå Erreur analyse de pertinence:', error);
      // Fallback: retourner une suggestion basique pour l'archiviste
      return [{
        serviteur: 'archivist',
        pertinence: 0.5,
        raison: 'Fallback en cas d\'erreur',
        urgence: 'faible'
      }];
    }
  }

  /**
   * Analyse rapide pour d√©terminer si au moins un serviteur est pertinent
   */
  async hasRelevantServiteurs(userMessage: string, context: AlgarethContext): Promise<boolean> {
    const suggestions = await this.analyzeUserQuestion(userMessage, context);
    return suggestions.length > 0;
  }

  /**
   * Obtient le serviteur le plus pertinent
   */
  async getMostRelevantServiteur(userMessage: string, context: AlgarethContext): Promise<ServiteurSuggestion | null> {
    const suggestions = await this.analyzeUserQuestion(userMessage, context);
    if (suggestions.length === 0) return null;
    
    return suggestions.reduce((mostRelevant, current) => 
      current.pertinence > mostRelevant.pertinence ? current : mostRelevant
    );
  }

  /**
   * Test de l'analyseur de pertinence
   */
  async testAnalyzer(): Promise<void> {
    console.log('üß™ Test PertinenceAnalyzer');
    
    const testCases = [
      {
        message: "Tu te souviens de mes pr√©f√©rences en couleurs ?",
        expected: "archivist"
      },
      {
        message: "G√©n√®re une image de paysage montagneux",
        expected: "image_generator"
      },
      {
        message: "Qu'est-ce que React et comment √ßa marche ?",
        expected: "research_assistant"
      },
      {
        message: "Comment √©crire une fonction en JavaScript ?",
        expected: "code_assistant"
      },
      {
        message: "Comment √ßa va ?",
        expected: null
      }
    ];

    for (const testCase of testCases) {
      const context: AlgarethContext = {
        userId: 'test_user',
        userName: 'Test User',
        currentSession: 'test_session',
        userMessage: testCase.message,
        conversationHistory: [],
        sessionStartTime: new Date().toISOString()
      };

      const suggestions = await this.analyzeUserQuestion(testCase.message, context);
      const mostRelevant = suggestions.length > 0 ? suggestions[0].serviteur : null;
      
      const success = mostRelevant === testCase.expected;
      console.log(`${success ? '‚úÖ' : '‚ùå'} "${testCase.message}" ‚Üí ${mostRelevant} (attendu: ${testCase.expected})`);
    }
  }
}