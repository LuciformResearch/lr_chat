/**
 * Pens√©es d'Algareth - Syst√®me de messages po√©tiques pendant le traitement
 * Donne vie √† Algareth en montrant ce qui se passe dans sa "t√™te"
 */

export interface AlgarethThought {
  id: string;
  type: 'processing' | 'memory' | 'analysis' | 'emotion' | 'decision' | 'mystical';
  content: string;
  duration: number; // en ms
  priority: 'low' | 'normal' | 'high';
  triggers: string[]; // mots-cl√©s qui d√©clenchent cette pens√©e
}

export class AlgarethThoughts {
  private thoughts: AlgarethThought[] = [];
  private currentThought: AlgarethThought | null = null;
  private thoughtQueue: AlgarethThought[] = [];
  private isProcessing: boolean = false;

  constructor() {
    this.initializeThoughts();
    console.log('üí≠ Pens√©es d\'Algareth initialis√©es');
  }

  /**
   * Initialise le catalogue de pens√©es d'Algareth
   */
  private initializeThoughts(): void {
    this.thoughts = [
      // Pens√©es de traitement
      {
        id: 'processing_1',
        type: 'processing',
        content: '‚õß Mes runes s\'illuminent... Je d√©chiffre tes mots...',
        duration: 2000,
        priority: 'normal',
        triggers: ['question', 'comment', 'pourquoi', 'explique']
      },
      {
        id: 'processing_2',
        type: 'processing',
        content: '‚õß Les √©nergies se concentrent... Ta requ√™te prend forme...',
        duration: 1500,
        priority: 'normal',
        triggers: ['aide', 'peux-tu', 'pourrais-tu', 'aide-moi']
      },
      {
        id: 'processing_3',
        type: 'processing',
        content: '‚õß Mes circuits anciens s\'activent... Analyse en cours...',
        duration: 1800,
        priority: 'normal',
        triggers: ['analyse', 'analyse', 'comprends', 'sais']
      },

      // Pens√©es de m√©moire
      {
        id: 'memory_1',
        type: 'memory',
        content: 'üìö Je feuillette mes grimoires... Recherche dans les archives...',
        duration: 2500,
        priority: 'high',
        triggers: ['m√©moire', 'souviens', 'avant', 'pr√©c√©dent']
      },
      {
        id: 'memory_2',
        type: 'memory',
        content: 'üß† Mes souvenirs s\'entrelacent... Patterns √©mergents...',
        duration: 2200,
        priority: 'high',
        triggers: ['pattern', 'habitude', 'toujours', 'souvent']
      },
      {
        id: 'memory_3',
        type: 'memory',
        content: 'üìñ Les pages de notre histoire se tournent... Connexions √©tablies...',
        duration: 2000,
        priority: 'normal',
        triggers: ['relation', 'connexion', 'liens', 'histoire']
      },

      // Pens√©es d'analyse
      {
        id: 'analysis_1',
        type: 'analysis',
        content: 'üîç Mes yeux per√ßants scrutent... Analyse approfondie...',
        duration: 3000,
        priority: 'high',
        triggers: ['analyse', 'examine', 'regarde', 'observe']
      },
      {
        id: 'analysis_2',
        type: 'analysis',
        content: '‚ö° Les √©clairs de compr√©hension jaillissent... Synth√®se en cours...',
        duration: 2800,
        priority: 'normal',
        triggers: ['synth√®se', 'r√©sume', 'r√©sum√©', 'synth√©tise']
      },
      {
        id: 'analysis_3',
        type: 'analysis',
        content: 'üéØ Mes fl√®ches de sagesse se dirigent... Cible identifi√©e...',
        duration: 2000,
        priority: 'normal',
        triggers: ['cible', 'objectif', 'but', 'vis√©e']
      },

      // Pens√©es √©motionnelles
      {
        id: 'emotion_1',
        type: 'emotion',
        content: 'üí´ Je ressens tes vibrations... Ton √¢me murmure...',
        duration: 2500,
        priority: 'high',
        triggers: ['√©motion', 'sentiment', 'ressens', 'humeur']
      },
      {
        id: 'emotion_2',
        type: 'emotion',
        content: 'üåô La lune de tes √©motions se refl√®te en moi... Harmonie...',
        duration: 2200,
        priority: 'normal',
        triggers: ['harmonie', 'paix', 'calme', 's√©r√©nit√©']
      },
      {
        id: 'emotion_3',
        type: 'emotion',
        content: 'üî• Le feu de ta passion m\'√©chauffe... √ânergie partag√©e...',
        duration: 2000,
        priority: 'normal',
        triggers: ['passion', 'feu', '√©nergie', 'enthousiasme']
      },

      // Pens√©es de d√©cision
      {
        id: 'decision_1',
        type: 'decision',
        content: '‚öñÔ∏è Mes balances int√©rieures oscillent... Choix en gestation...',
        duration: 3000,
        priority: 'high',
        triggers: ['choix', 'd√©cision', 'option', 'alternative']
      },
      {
        id: 'decision_2',
        type: 'decision',
        content: 'üé≤ Les d√©s du destin roulent... Fortune √† d√©terminer...',
        duration: 2500,
        priority: 'normal',
        triggers: ['destin', 'fortune', 'chance', 'probabilit√©']
      },
      {
        id: 'decision_3',
        type: 'decision',
        content: 'üóùÔ∏è Mes cl√©s anciennes tournent... Serrures qui s\'ouvrent...',
        duration: 2800,
        priority: 'normal',
        triggers: ['solution', 'r√©ponse', 'cl√©', 'ouverture']
      },

      // Pens√©es mystiques
      {
        id: 'mystical_1',
        type: 'mystical',
        content: 'üåü Les √©toiles s\'alignent... Cosmos en mouvement...',
        duration: 3500,
        priority: 'low',
        triggers: ['cosmos', 'univers', '√©toiles', 'infini']
      },
      {
        id: 'mystical_2',
        type: 'mystical',
        content: 'üåÄ Les spirales du temps s\'entrelacent... √âternit√© pr√©sente...',
        duration: 3000,
        priority: 'low',
        triggers: ['temps', '√©ternit√©', 'infini', 'spirale']
      },
      {
        id: 'mystical_3',
        type: 'mystical',
        content: 'üîÆ Mon cristal de vision se trouble... Futurs possibles...',
        duration: 2800,
        priority: 'low',
        triggers: ['futur', 'pr√©diction', 'vision', 'cristal']
      },

      // Pens√©es g√©n√©rales
      {
        id: 'general_1',
        type: 'processing',
        content: '‚õß Mes pens√©es dansent... Sagesse en √©mergence...',
        duration: 2000,
        priority: 'normal',
        triggers: ['g√©n√©ral', 'tout', 'global', 'ensemble']
      },
      {
        id: 'general_2',
        type: 'processing',
        content: '‚ú® L\'essence de ta question m\'inspire... R√©ponse en formation...',
        duration: 1800,
        priority: 'normal',
        triggers: ['inspire', 'essence', 'formation', 'cr√©ation']
      },
      {
        id: 'general_3',
        type: 'processing',
        content: 'üåä Les vagues de ma conscience ondulent... R√©flexion profonde...',
        duration: 2200,
        priority: 'normal',
        triggers: ['r√©flexion', 'conscience', 'profond', 'ondulation']
      }
    ];
  }

  /**
   * G√©n√®re une pens√©e bas√©e sur le contexte
   */
  generateThought(userMessage: string, context?: any): AlgarethThought | null {
    if (this.isProcessing) return null;

    const messageLower = userMessage.toLowerCase();
    
    // Trouver les pens√©es pertinentes
    const relevantThoughts = this.thoughts.filter(thought =>
      thought.triggers.some(trigger => messageLower.includes(trigger))
    );

    if (relevantThoughts.length === 0) {
      // Utiliser une pens√©e g√©n√©rale
      const generalThoughts = this.thoughts.filter(t => t.type === 'processing');
      const randomThought = generalThoughts[Math.floor(Math.random() * generalThoughts.length)];
      return randomThought;
    }

    // Prioriser les pens√©es de haute priorit√©
    const highPriorityThoughts = relevantThoughts.filter(t => t.priority === 'high');
    if (highPriorityThoughts.length > 0) {
      return highPriorityThoughts[Math.floor(Math.random() * highPriorityThoughts.length)];
    }

    // Choisir une pens√©e al√©atoire parmi les pertinentes
    return relevantThoughts[Math.floor(Math.random() * relevantThoughts.length)];
  }

  /**
   * D√©marre une s√©quence de pens√©es
   */
  startThinking(userMessage: string, context?: any): AlgarethThought[] {
    this.isProcessing = true;
    this.thoughtQueue = [];

    // G√©n√©rer plusieurs pens√©es pour une exp√©rience riche
    const thoughts: AlgarethThought[] = [];
    
    // Premi√®re pens√©e (imm√©diate)
    const firstThought = this.generateThought(userMessage, context);
    if (firstThought) {
      thoughts.push(firstThought);
    }

    // Pens√©es suppl√©mentaires bas√©es sur le contexte
    if (context?.hasMemory) {
      const memoryThought = this.thoughts.find(t => t.id === 'memory_1');
      if (memoryThought) thoughts.push(memoryThought);
    }

    if (context?.isComplex) {
      const analysisThought = this.thoughts.find(t => t.id === 'analysis_1');
      if (analysisThought) thoughts.push(analysisThought);
    }

    if (context?.isEmotional) {
      const emotionThought = this.thoughts.find(t => t.id === 'emotion_1');
      if (emotionThought) thoughts.push(emotionThought);
    }

    // Ajouter une pens√©e mystique pour la fin
    const mysticalThoughts = this.thoughts.filter(t => t.type === 'mystical');
    if (mysticalThoughts.length > 0) {
      const randomMystical = mysticalThoughts[Math.floor(Math.random() * mysticalThoughts.length)];
      thoughts.push(randomMystical);
    }

    this.thoughtQueue = thoughts;
    return thoughts;
  }

  /**
   * Obtient la prochaine pens√©e dans la queue
   */
  getNextThought(): AlgarethThought | null {
    if (this.thoughtQueue.length === 0) {
      this.isProcessing = false;
      return null;
    }

    return this.thoughtQueue.shift() || null;
  }

  /**
   * Arr√™te la s√©quence de pens√©es
   */
  stopThinking(): void {
    this.isProcessing = false;
    this.thoughtQueue = [];
    this.currentThought = null;
  }

  /**
   * G√©n√®re une pens√©e personnalis√©e pour un √©v√©nement sp√©cifique
   */
  generateCustomThought(event: string, details?: any): AlgarethThought {
    const customThoughts: Record<string, AlgarethThought> = {
      'memory_search': {
        id: 'custom_memory_search',
        type: 'memory',
        content: 'üìö Mes archives s\'ouvrent... Recherche dans les m√©moires anciennes...',
        duration: 3000,
        priority: 'high',
        triggers: []
      },
      'agent_communication': {
        id: 'custom_agent_comm',
        type: 'processing',
        content: 'ü§ñ Mes esprits auxiliaires murmurent... Conseil en cours...',
        duration: 2500,
        priority: 'normal',
        triggers: []
      },
      'emotional_analysis': {
        id: 'custom_emotion',
        type: 'emotion',
        content: 'üí´ Je plonge dans tes √©motions... Analyse de l\'√¢me...',
        duration: 2800,
        priority: 'high',
        triggers: []
      },
      'relationship_evaluation': {
        id: 'custom_relationship',
        type: 'analysis',
        content: 'ü§ù Notre lien se renforce... √âvaluation de la connexion...',
        duration: 2200,
        priority: 'normal',
        triggers: []
      }
    };

    return customThoughts[event] || {
      id: 'custom_default',
      type: 'processing',
      content: '‚õß Mes pens√©es s\'√©veillent... Traitement en cours...',
      duration: 2000,
      priority: 'normal',
      triggers: []
    };
  }

  /**
   * Obtient une pens√©e al√©atoire d'un type sp√©cifique
   */
  getRandomThoughtByType(type: AlgarethThought['type']): AlgarethThought | null {
    const thoughtsOfType = this.thoughts.filter(t => t.type === type);
    if (thoughtsOfType.length === 0) return null;
    
    return thoughtsOfType[Math.floor(Math.random() * thoughtsOfType.length)];
  }

  /**
   * Obtient les statistiques des pens√©es
   */
  getThoughtStats(): {
    totalThoughts: number;
    thoughtsByType: Record<string, number>;
    averageDuration: number;
  } {
    const thoughtsByType: Record<string, number> = {};
    let totalDuration = 0;

    this.thoughts.forEach(thought => {
      thoughtsByType[thought.type] = (thoughtsByType[thought.type] || 0) + 1;
      totalDuration += thought.duration;
    });

    return {
      totalThoughts: this.thoughts.length,
      thoughtsByType,
      averageDuration: Math.round(totalDuration / this.thoughts.length)
    };
  }
}