/**
 * Agent Archiviste - Agent sp√©cialis√© dans l'analyse et la m√©moire √©pisodique
 * Peut √™tre interrog√© par Algareth pour obtenir des informations sur les conversations pass√©es
 */

import { BaseAgent, AgentMessage, AgentCapabilities } from './AgentCommunication';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { ArchivistDatabaseService } from '../database/ArchivistDatabaseService';

export interface ConversationMemory {
  sessionId: string;
  userId: string;
  timestamp: string;
  summary: string;
  keyTopics: string[];
  emotionalTone: string;
  importantFacts: string[];
  userMood: string;
  algarethPerformance: string;
}

export interface UserProfile {
  userId: string;
  userName: string;
  totalSessions: number;
  communicationStyle: string;
  interests: string[];
  relationshipLevel: string;
  trustLevel: number;
  ongoingTopics: string[];
  userGoals: string[];
}

export class ArchivistAgent extends BaseAgent {
  private genAI: GoogleGenerativeAI;
  private model: any;
  private dbService: ArchivistDatabaseService;

  constructor(geminiApiKey: string, dbService: ArchivistDatabaseService) {
    const capabilities: AgentCapabilities = {
      name: 'ArchivistAgent',
      description: 'Agent sp√©cialis√© dans l\'analyse et la m√©moire √©pisodique des conversations',
      capabilities: [
        'analyser_conversation',
        'r√©sumer_session',
        'identifier_patterns',
        '√©valuer_relation',
        'sugg√©rer_am√©liorations',
        'rechercher_m√©moire',
        'analyser_√©motions',
        'tracker_objectifs'
      ],
      responseTime: 'slow', // L'archiviste prend du temps √† analyser
      requiresContext: true
    };

    super('ArchivistAgent', capabilities);

    this.genAI = new GoogleGenerativeAI(geminiApiKey);
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    this.dbService = dbService;
    
    console.log('üìö Agent Archiviste initialis√© avec base de donn√©es:', capabilities.capabilities);
  }

  /**
   * Traite les messages d'Algareth
   */
  async processMessage(message: AgentMessage): Promise<string> {
    const { content, metadata } = message;
    const context = metadata?.context || {};

    console.log(`üìö Archiviste traite: "${content}"`);

    // Analyser le type de demande
    if (content.includes('analyser') && content.includes('conversation')) {
      return await this.analyzeConversation(context);
    }
    
    if (content.includes('r√©sum√©') || content.includes('r√©sumer')) {
      return await this.provideSummary(context);
    }
    
    if (content.includes('pattern') || content.includes('tendance')) {
      return await this.identifyPatterns(context);
    }
    
    if (content.includes('relation') || content.includes('confiance')) {
      return await this.evaluateRelationship(context);
    }
    
    if (content.includes('am√©lioration') || content.includes('suggestion')) {
      return await this.suggestImprovements(context);
    }
    
    if (content.includes('rechercher') || content.includes('m√©moire')) {
      return await this.searchMemory(context);
    }
    
    if (content.includes('√©motion') || content.includes('humeur')) {
      return await this.analyzeEmotions(context);
    }
    
    if (content.includes('objectif') || content.includes('but')) {
      return await this.trackGoals(context);
    }

    // Demande g√©n√©rale - fournir un aper√ßu
    return await this.provideGeneralOverview(context);
  }

  /**
   * Analyse une conversation avec l'IA
   */
  private async analyzeConversation(context: any): Promise<string> {
    const { userId, messages, sessionTitle } = context;
    
    if (!messages || messages.length === 0) {
      return "‚ùå Aucune conversation √† analyser. Fournissez des messages.";
    }

    try {
      const conversationText = messages.map((msg: any) => 
        `${msg.role === 'user' ? 'Utilisateur' : 'Algareth'}: ${msg.content}`
      ).join('\n');

      const prompt = `Tu es l'Archiviste d'Algareth. Analyse cette conversation et fournis un rapport d√©taill√©.

CONVERSATION:
${conversationText}

ANALYSE REQUISE:
1. R√©sum√© narratif (2-3 phrases)
2. Topics cl√©s identifi√©s
3. Ton √©motionnel de l'utilisateur
4. Performance d'Algareth
5. Faits importants √† retenir
6. Suggestions d'am√©lioration

R√âPONDS EN JSON:
{
  "summary": "r√©sum√© narratif",
  "keyTopics": ["topic1", "topic2"],
  "emotionalTone": "positif/n√©gatif/neutre/mixte",
  "userMood": "description de l'humeur",
  "algarethPerformance": "√©valuation de la performance",
  "importantFacts": ["fait1", "fait2"],
  "suggestions": ["suggestion1", "suggestion2"]
}`;

      const result = await this.model.generateContent(prompt);
      const responseText = result.response.text().trim();
      
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const analysis = JSON.parse(jsonMatch[0]);
        
        // Sauvegarder l'analyse
        this.saveConversationMemory(userId, sessionTitle, analysis);
        
        return `üìä ANALYSE TERMIN√âE:

üìù R√©sum√©: ${analysis.summary}
üè∑Ô∏è Topics: ${analysis.keyTopics.join(', ')}
üòä Humeur: ${analysis.userMood} (${analysis.emotionalTone})
‚≠ê Performance Algareth: ${analysis.algarethPerformance}
üìã Faits importants: ${analysis.importantFacts.join(', ')}
üí° Suggestions: ${analysis.suggestions.join(', ')}`;
      } else {
        throw new Error('R√©ponse JSON invalide');
      }
    } catch (error) {
      console.error('‚ùå Erreur analyse conversation:', error);
      return `‚ùå Erreur lors de l'analyse: ${error}`;
    }
  }

  /**
   * Fournit un r√©sum√© des sessions r√©centes
   */
  private async provideSummary(context: any): Promise<string> {
    const { userId, limit = 5 } = context;
    const userMemories = await this.dbService.getUserMemories(userId, limit);
    
    if (userMemories.length === 0) {
      return `üìö Aucune m√©moire trouv√©e pour ${userId}`;
    }
    
    let summary = `üìö R√âSUM√â DES ${userMemories.length} DERNI√àRES SESSIONS:\n\n`;
    
    userMemories.forEach((memory, index) => {
      summary += `${index + 1}. ${memory.sessionId} (${new Date(memory.timestamp).toLocaleDateString()}):\n`;
      summary += `   üìù ${memory.summary}\n`;
      summary += `   üè∑Ô∏è Topics: ${memory.keyTopics.join(', ')}\n`;
      summary += `   üòä Humeur: ${memory.userMood}\n\n`;
    });

    return summary;
  }

  /**
   * Identifie les patterns et tendances
   */
  private async identifyPatterns(context: any): Promise<string> {
    const { userId } = context;
    const userMemories = await this.dbService.getUserMemories(userId);
    
    if (userMemories.length < 3) {
      return `üìä Pas assez de donn√©es pour identifier des patterns (${userMemories.length} sessions)`;
    }

    // Analyser les patterns
    const allTopics = userMemories.flatMap(m => m.keyTopics);
    const topicCounts = allTopics.reduce((acc, topic) => {
      acc[topic] = (acc[topic] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const topTopics = Object.entries(topicCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5);

    const emotionalTones = userMemories.map(m => m.emotionalTone);
    const positiveCount = emotionalTones.filter(t => t.includes('positif')).length;
    const negativeCount = emotionalTones.filter(t => t.includes('n√©gatif')).length;

    return `üìä PATTERNS IDENTIFI√âS:

üè∑Ô∏è Topics r√©currents:
${topTopics.map(([topic, count]) => `   - ${topic}: ${count} fois`).join('\n')}

üòä Tendances √©motionnelles:
   - Positif: ${positiveCount}/${userMemories.length} sessions
   - N√©gatif: ${negativeCount}/${userMemories.length} sessions

üìà √âvolution de la relation:
   - ${userMemories.length} sessions analys√©es
   - Confiance estim√©e: ${Math.min(100, userMemories.length * 10)}%`;
  }

  /**
   * √âvalue l'√©tat de la relation
   */
  private async evaluateRelationship(context: any): Promise<string> {
    const { userId } = context;
    const userMemories = await this.dbService.getUserMemories(userId);
    const profile = await this.dbService.getUserProfile(userId);
    
    if (userMemories.length === 0) {
      return `ü§ù Relation: Nouvelle (0 sessions)`;
    }

    const recentMemories = userMemories.slice(-5);
    const positiveInteractions = recentMemories.filter(m => 
      m.emotionalTone.includes('positif') || m.algarethPerformance.includes('bon')
    ).length;

    const trustLevel = Math.min(100, userMemories.length * 8);
    const comfortLevel = Math.min(100, positiveInteractions * 20);

    let relationshipLevel = 'nouvelle';
    if (userMemories.length >= 20) relationshipLevel = 'confiance profonde';
    else if (userMemories.length >= 15) relationshipLevel = 'amiti√© √©tablie';
    else if (userMemories.length >= 10) relationshipLevel = 'relation solide';
    else if (userMemories.length >= 5) relationshipLevel = 'connaissance';
    else if (userMemories.length >= 3) relationshipLevel = 'relation naissante';

    return `ü§ù √âTAT DE LA RELATION:

üìä Niveau: ${relationshipLevel}
üîí Confiance: ${trustLevel}%
üòå Confort: ${comfortLevel}%
üìà Sessions: ${userMemories.length}
‚úÖ Interactions positives r√©centes: ${positiveInteractions}/5

üí° Recommandations:
${trustLevel > 80 ? '- Relation de confiance √©tablie, personnalisation avanc√©e possible' : ''}
${comfortLevel > 60 ? '- Utilisateur √† l\'aise, humour et familiarit√© appropri√©s' : ''}
${userMemories.length > 10 ? '- Historique riche, r√©f√©rences aux conversations pass√©es possibles' : ''}`;
  }

  /**
   * Sugg√®re des am√©liorations pour Algareth
   */
  private async suggestImprovements(context: any): Promise<string> {
    const { userId } = context;
    const userMemories = await this.dbService.getUserMemories(userId);
    
    if (userMemories.length === 0) {
      return `üí° Pas assez de donn√©es pour des suggestions (0 sessions)`;
    }

    const recentMemories = userMemories.slice(-5);
    const performanceIssues = recentMemories.filter(m => 
      m.algarethPerformance.includes('confus') || 
      m.algarethPerformance.includes('trop court') ||
      m.algarethPerformance.includes('incompr√©hensible')
    );

    const emotionalIssues = recentMemories.filter(m => 
      m.emotionalTone.includes('n√©gatif') || m.userMood.includes('frustr√©')
    );

    let suggestions = [];

    if (performanceIssues.length > 0) {
      suggestions.push('üîß Clarifier les r√©ponses techniques');
    }
    
    if (emotionalIssues.length > 0) {
      suggestions.push('üòä Adapter le ton √©motionnel');
    }
    
    if (recentMemories.some(m => m.keyTopics.includes('personnel'))) {
      suggestions.push('ü§ù Approche plus personnelle appropri√©e');
    }
    
    if (recentMemories.some(m => m.keyTopics.includes('technique'))) {
      suggestions.push('‚öôÔ∏è Approche technique d√©taill√©e');
    }

    if (suggestions.length === 0) {
      suggestions.push('‚úÖ Performance actuelle satisfaisante');
    }

    return `üí° SUGGESTIONS D'AM√âLIORATION:

${suggestions.map(s => `   ${s}`).join('\n')}

üìä Bas√© sur l'analyse de ${userMemories.length} sessions
üéØ Focus sur les 5 derni√®res interactions`;
  }

  /**
   * Recherche dans la m√©moire
   */
  private async searchMemory(context: any): Promise<string> {
    const { userId, query } = context;
    const relevantMemories = await this.dbService.searchUserMemories(userId, query);
    
    if (relevantMemories.length === 0) {
      return `üîç Aucun r√©sultat trouv√© pour "${query}"`;
    }

    let result = `üîç R√âSULTATS POUR "${query}":\n\n`;
    
    relevantMemories.forEach((memory, index) => {
      result += `${index + 1}. ${memory.sessionId}:\n`;
      result += `   üìù ${memory.summary}\n`;
      result += `   üè∑Ô∏è ${memory.keyTopics.join(', ')}\n`;
      if (memory.importantFacts.length > 0) {
        result += `   üìã Faits: ${memory.importantFacts.join(', ')}\n`;
      }
      result += '\n';
    });

    return result;
  }

  /**
   * Analyse les √©motions
   */
  private async analyzeEmotions(context: any): Promise<string> {
    const { userId } = context;
    const userMemories = await this.dbService.getUserMemories(userId);
    
    if (userMemories.length === 0) {
      return `üòä Aucune donn√©e √©motionnelle pour ${userId}`;
    }

    const recentMemories = userMemories.slice(-10);
    const emotionalTones = recentMemories.map(m => m.emotionalTone);
    const userMoods = recentMemories.map(m => m.userMood);

    const positiveCount = emotionalTones.filter(t => t.includes('positif')).length;
    const negativeCount = emotionalTones.filter(t => t.includes('n√©gatif')).length;
    const neutralCount = emotionalTones.filter(t => t.includes('neutre')).length;

    const dominantMood = userMoods.reduce((acc, mood) => {
      acc[mood] = (acc[mood] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const topMood = Object.entries(dominantMood)
      .sort(([,a], [,b]) => b - a)[0];

    return `üòä ANALYSE √âMOTIONNELLE:

üìä R√©partition des tons:
   - Positif: ${positiveCount}/${recentMemories.length} (${Math.round(positiveCount/recentMemories.length*100)}%)
   - N√©gatif: ${negativeCount}/${recentMemories.length} (${Math.round(negativeCount/recentMemories.length*100)}%)
   - Neutre: ${neutralCount}/${recentMemories.length} (${Math.round(neutralCount/recentMemories.length*100)}%)

üé≠ Humeur dominante: ${topMood ? topMood[0] : 'ind√©termin√©e'}

üí° Recommandations:
${positiveCount > negativeCount ? '- Maintenir l\'approche positive actuelle' : ''}
${negativeCount > positiveCount ? '- Adapter le ton pour am√©liorer l\'humeur' : ''}
${neutralCount > positiveCount + negativeCount ? '- Ajouter plus d\'√©motion dans les interactions' : ''}`;
  }

  /**
   * Suit les objectifs de l'utilisateur
   */
  private async trackGoals(context: any): Promise<string> {
    const { userId } = context;
    const userMemories = await this.dbService.getUserMemories(userId);
    
    if (userMemories.length === 0) {
      return `üéØ Aucun objectif identifi√© pour ${userId}`;
    }

    const allFacts = userMemories.flatMap(m => m.importantFacts);
    const goalKeywords = ['objectif', 'but', 'veut', 'souhaite', 'projet', 'plan'];
    
    const goals = allFacts.filter(fact => 
      goalKeywords.some(keyword => fact.toLowerCase().includes(keyword))
    );

    if (goals.length === 0) {
      return `üéØ Aucun objectif explicite identifi√© dans les conversations`;
    }

    return `üéØ OBJECTIFS IDENTIFI√âS:

${goals.map((goal, index) => `${index + 1}. ${goal}`).join('\n')}

üí° Suggestions:
- R√©f√©rencer ces objectifs dans les conversations futures
- Proposer de l'aide sp√©cifique pour ces buts
- Suivre les progr√®s mentionn√©s`;
  }

  /**
   * Fournit un aper√ßu g√©n√©ral
   */
  private async provideGeneralOverview(context: any): Promise<string> {
    const { userId } = context;
    const userMemories = await this.dbService.getUserMemories(userId);
    
    if (userMemories.length === 0) {
      return `üìö Aucune m√©moire disponible pour ${userId}`;
    }

    const totalSessions = userMemories.length;
    const recentSessions = userMemories.slice(-3);
    const allTopics = userMemories.flatMap(m => m.keyTopics);
    const uniqueTopics = [...new Set(allTopics)];

    return `üìö APER√áU G√âN√âRAL:

üìä Statistiques:
   - Sessions totales: ${totalSessions}
   - Topics uniques: ${uniqueTopics.length}
   - Derni√®re session: ${recentSessions[recentSessions.length - 1]?.sessionId || 'N/A'}

üè∑Ô∏è Topics principaux: ${uniqueTopics.slice(0, 5).join(', ')}

üí° Capacit√©s disponibles:
   - analyser_conversation
   - r√©sumer_session  
   - identifier_patterns
   - √©valuer_relation
   - sugg√©rer_am√©liorations
   - rechercher_m√©moire
   - analyser_√©motions
   - tracker_objectifs

üìù Demandez-moi sp√©cifiquement ce que vous voulez savoir !`;
  }

  /**
   * Sauvegarde une m√©moire de conversation
   */
  private async saveConversationMemory(userId: string, sessionTitle: string, analysis: any): Promise<void> {
    const memory: ConversationMemory = {
      sessionId: sessionTitle,
      userId,
      timestamp: new Date().toISOString(),
      summary: analysis.summary,
      keyTopics: analysis.keyTopics,
      emotionalTone: analysis.emotionalTone,
      importantFacts: analysis.importantFacts,
      userMood: analysis.userMood,
      algarethPerformance: analysis.algarethPerformance
    };

    await this.dbService.saveConversationMemory(memory);
    console.log(`üíæ M√©moire sauvegard√©e pour ${userId}: ${sessionTitle}`);
  }


  /**
   * Obtient les statistiques de l'archiviste
   */
  async getStats(): Promise<{
    totalUsers: number;
    totalMemories: number;
    averageMemoriesPerUser: number;
    recentActivity: {
      lastWeek: number;
      lastMonth: number;
    };
  }> {
    return await this.dbService.getArchivistStats();
  }

  /**
   * G√©n√®re un r√©sum√© secret pour l'utilisateur (m√©thode manquante)
   */
  async getSecretSummary(userId: string, query: string): Promise<string> {
    try {
      const memories = await this.dbService.getUserMemories(userId);
      const profile = await this.dbService.getUserProfile(userId);
      
      if (memories.length === 0) {
        return `Aucune m√©moire trouv√©e pour ${userId}`;
      }

      const recentMemories = memories.slice(-5);
      const allTopics = memories.flatMap(m => m.keyTopics);
      const uniqueTopics = [...new Set(allTopics)];
      
      let summary = `R√âSUM√â SECRET POUR ${userId}:\n\n`;
      
      if (profile) {
        summary += `PROFIL UTILISATEUR:\n`;
        summary += `- Nom: ${profile.userName}\n`;
        summary += `- Sessions totales: ${profile.totalSessions}\n`;
        summary += `- Style de communication: ${profile.communicationStyle}\n`;
        summary += `- Niveau de relation: ${profile.relationshipLevel}\n`;
        summary += `- Confiance: ${profile.trustLevel}%\n\n`;
      }
      
      summary += `CONVERSATIONS R√âCENTES:\n`;
      recentMemories.forEach((memory, index) => {
        summary += `${index + 1}. ${memory.sessionId}: ${memory.summary}\n`;
      });
      
      summary += `\nFAITS IMPORTANTS:\n`;
      const allFacts = memories.flatMap(m => m.importantFacts);
      const uniqueFacts = [...new Set(allFacts)];
      uniqueFacts.slice(0, 10).forEach((fact, index) => {
        summary += `${index + 1}. ${fact}\n`;
      });
      
      summary += `\nSUGGESTIONS POUR ALGARETH:\n`;
      summary += `- Topics r√©currents: ${uniqueTopics.slice(0, 5).join(', ')}\n`;
      summary += `- Humeur g√©n√©rale: ${memories[memories.length - 1]?.userMood || 'neutre'}\n`;
      summary += `- Performance r√©cente: ${memories[memories.length - 1]?.algarethPerformance || 'standard'}\n`;
      
      return summary;
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration r√©sum√© secret:', error);
      return `Erreur lors de la g√©n√©ration du r√©sum√© secret pour ${userId}`;
    }
  }

  /**
   * Exporte les donn√©es de l'archiviste (m√©thode manquante)
   */
  async exportArchivistData(): Promise<any> {
    try {
      const stats = await this.dbService.getArchivistStats();
      
      // R√©cup√©rer tous les utilisateurs avec leurs donn√©es
      const allUsers = await this.dbService.getArchivistStats();
      
      return {
        metadata: {
          exportDate: new Date().toISOString(),
          totalUsers: stats.totalUsers,
          totalMemories: stats.totalMemories,
          averageMemoriesPerUser: stats.averageMemoriesPerUser
        },
        stats,
        note: 'Donn√©es compl√®tes disponibles via ArchivistDatabaseService'
      };
    } catch (error) {
      console.error('‚ùå Erreur export donn√©es archiviste:', error);
      return {
        error: 'Erreur lors de l\'export des donn√©es archiviste',
        timestamp: new Date().toISOString()
      };
    }
  }
}