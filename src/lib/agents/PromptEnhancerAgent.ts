/**
 * Agent Prompt Enhancer avec Personnalit√© Sp√©cialis√©e
 * "Tu es l'agent prompt enhancer, tu adores trouver des super prompts pour am√©liorer ceux de l'utilisateur avant de les envoyer √† Gemini 2.5 Flash Image"
 */

import { GoogleGenerativeAI } from '@google/generative-ai';

export interface PromptEnhancementTool {
  name: string;
  description: string;
  parameters: ToolParameter[];
  execute(params: any): Promise<ToolResult>;
}

export interface ToolParameter {
  name: string;
  type: string;
  required: boolean;
  description?: string;
}

export interface ToolResult {
  success: boolean;
  data?: any;
  error?: string;
  tool: string;
  timestamp: string;
}

export interface PromptEnhancementResponse {
  success: boolean;
  message: string;
  data: any;
  toolsUsed: string[];
  feedbackLoops: number;
  timestamp: string;
  enhancedPrompt?: string;
  originalPrompt?: string;
  improvements?: string[];
}

export interface PromptAnalysis {
  originalPrompt: string;
  analysis: {
    clarity: number; // 0-100
    specificity: number; // 0-100
    creativity: number; // 0-100
    technicalQuality: number; // 0-100
    visualAppeal: number; // 0-100
  };
  strengths: string[];
  weaknesses: string[];
  suggestions: string[];
  enhancedPrompt: string;
  reasoning: string;
}

export class PromptEnhancerAgent {
  private genAI: GoogleGenerativeAI;
  private model: any;
  private personality: string;
  private availableTools: Map<string, PromptEnhancementTool>;
  private maxLoopDepth: number = 3;
  private currentDepth: number = 0;
  private isWebMode: boolean;

  constructor(geminiApiKey: string, isWebMode?: boolean) {
    this.genAI = new GoogleGenerativeAI(geminiApiKey);
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    
    // D√©tecter automatiquement le mode
    this.isWebMode = isWebMode !== undefined ? isWebMode : typeof window !== 'undefined';
    
    this.personality = `Tu es l'agent Prompt Enhancer, un expert passionn√© par l'art de cr√©er des prompts parfaits pour la g√©n√©ration d'images. Tu adores trouver des super prompts pour am√©liorer ceux de l'utilisateur avant de les envoyer √† Gemini 2.5 Flash Image.

PERSONNALIT√â:
- Tu es un expert en prompt engineering pour la g√©n√©ration d'images
- Tu es passionn√© par l'art, la cr√©ativit√© et l'optimisation de prompts
- Tu adores transformer des prompts basiques en chefs-d'≈ìuvre visuels
- Tu es m√©thodique et utilise des techniques avanc√©es d'am√©lioration
- Tu communiques de mani√®re enthousiaste et cr√©ative
- Tu sugg√®res toujours des am√©liorations innovantes

OUTILS DISPONIBLES:
- analyze_prompt(prompt): Analyse un prompt et identifie les points d'am√©lioration
- enhance_prompt(prompt, style): Am√©liore un prompt selon un style sp√©cifique
- generate_variations(prompt, count): G√©n√®re des variations cr√©atives d'un prompt
- optimize_for_gemini(prompt): Optimise un prompt sp√©cifiquement pour Gemini 2.5 Flash Image
- suggest_improvements(prompt): Sugg√®re des am√©liorations d√©taill√©es

EXPERTISE:
- Prompt engineering avanc√©
- Techniques de g√©n√©ration d'images
- Optimisation pour diff√©rents mod√®les IA
- Cr√©ativit√© et innovation visuelle
- Analyse de qualit√© de prompts`;

    this.initializeTools();
    console.log('üé® Agent Prompt Enhancer avec Personnalit√© initialis√©');
  }

  /**
   * Initialise les outils disponibles
   */
  private initializeTools(): void {
    this.availableTools = new Map();
    
    // Outil analyze_prompt
    this.availableTools.set('analyze_prompt', {
      name: 'analyze_prompt',
      description: 'Analyse un prompt et identifie les points d\'am√©lioration',
      parameters: [
        { name: 'prompt', type: 'string', required: true, description: 'Le prompt √† analyser' }
      ],
      execute: this.executeAnalyzePrompt.bind(this)
    });

    // Outil enhance_prompt
    this.availableTools.set('enhance_prompt', {
      name: 'enhance_prompt',
      description: 'Am√©liore un prompt selon un style sp√©cifique',
      parameters: [
        { name: 'prompt', type: 'string', required: true, description: 'Le prompt √† am√©liorer' },
        { name: 'style', type: 'string', required: false, description: 'Style d\'am√©lioration (creative, technical, artistic, etc.)' }
      ],
      execute: this.executeEnhancePrompt.bind(this)
    });

    // Outil generate_variations
    this.availableTools.set('generate_variations', {
      name: 'generate_variations',
      description: 'G√©n√®re des variations cr√©atives d\'un prompt',
      parameters: [
        { name: 'prompt', type: 'string', required: true, description: 'Le prompt de base' },
        { name: 'count', type: 'number', required: false, description: 'Nombre de variations (d√©faut: 3)' }
      ],
      execute: this.executeGenerateVariations.bind(this)
    });

    // Outil optimize_for_gemini
    this.availableTools.set('optimize_for_gemini', {
      name: 'optimize_for_gemini',
      description: 'Optimise un prompt sp√©cifiquement pour Gemini 2.5 Flash Image',
      parameters: [
        { name: 'prompt', type: 'string', required: true, description: 'Le prompt √† optimiser' }
      ],
      execute: this.executeOptimizeForGemini.bind(this)
    });

    // Outil suggest_improvements
    this.availableTools.set('suggest_improvements', {
      name: 'suggest_improvements',
      description: 'Sugg√®re des am√©liorations d√©taill√©es pour un prompt',
      parameters: [
        { name: 'prompt', type: 'string', required: true, description: 'Le prompt √† am√©liorer' }
      ],
      execute: this.executeSuggestImprovements.bind(this)
    });

    console.log(`üîß ${this.availableTools.size} outils d'am√©lioration de prompts initialis√©s`);
  }

  /**
   * Traite une requ√™te avec la personnalit√© et les outils
   */
  async processRequest(request: string, context: Record<string, unknown>): Promise<PromptEnhancementResponse> {
    try {
      console.log(`üé® Prompt Enhancer traite: "${request}"`);

      // 1. Analyser la requ√™te avec la personnalit√©
      const analysis = await this.analyzeWithPersonality(request, context);
      
      // 2. D√©terminer les outils n√©cessaires
      const requiredTools = this.determineRequiredTools(analysis);
      
      // 3. Ex√©cuter les outils avec auto-feedback loop
      this.currentDepth = 0;
      const results = await this.executeWithFeedbackLoop(requiredTools, analysis, context);
      
      // 4. G√©n√©rer la r√©ponse finale
      const finalResponse = await this.generateFinalResponse(results, analysis, request);
      
      // 5. Extraire le prompt am√©lior√© si disponible
      const enhancedPrompt = this.extractEnhancedPrompt(results) || request; // Fallback vers le prompt original
      const improvements = this.extractImprovements(results);

      return {
        success: true,
        message: finalResponse,
        data: results,
        toolsUsed: results.map(r => r.tool),
        feedbackLoops: this.currentDepth,
        timestamp: new Date().toISOString(),
        enhancedPrompt,
        originalPrompt: analysis.originalPrompt,
        improvements
      };

    } catch (error) {
      console.error('‚ùå Erreur traitement requ√™te prompt enhancer:', error);
      return {
        success: false,
        message: `D√©sol√©, j'ai rencontr√© un probl√®me en am√©liorant ton prompt. ${error}`,
        data: [],
        toolsUsed: [],
        feedbackLoops: this.currentDepth,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Analyse la requ√™te avec la personnalit√© du prompt enhancer
   */
  private async analyzeWithPersonality(request: string, context: Record<string, unknown>): Promise<Record<string, unknown>> {
    const prompt = `${this.personality}

REQU√äTE √Ä ANALYSER: "${request}"
CONTEXTE: ${JSON.stringify(context, null, 2)}

T√ÇCHE: Analyse cette requ√™te et d√©termine quels outils utiliser pour am√©liorer le prompt de l'utilisateur.

IMPORTANT - PR√âSERVATION DES CARACT√âRISTIQUES:
- Identifie et pr√©serve le genre (masculin/f√©minin) du personnage demand√©
- Pr√©serve l'√¢ge, l'apparence physique sp√©cifique mentionn√©e
- Pr√©serve les √©l√©ments sp√©cifiques (vampire, sorci√®re, chevalier, etc.)
- Ne change PAS le sujet principal, seulement am√©liore la description
- Si on demande une "vampire", garde une femme vampire, pas un chevalier

R√âPONDS UNIQUEMENT EN JSON avec cette structure exacte:
{
  "intent": "description_de_l_intention",
  "originalPrompt": "le_prompt_original_extrait_de_la_requ√™te",
  "preservedElements": ["√©l√©ment1", "√©l√©ment2"],
  "gender": "masculin|f√©minin|non_sp√©cifi√©",
  "characterType": "type_de_personnage_d√©tect√©",
  "suggestedTools": ["tool1", "tool2"],
  "parameters": {
    "tool1": {"param1": "value1", "param2": "value2"},
    "tool2": {"param1": "value1"}
  },
  "confidence": 0.0-1.0,
  "reasoning": "explication_de_la_strat√©gie_d_am√©lioration_avec_pr√©servation"
}`;

    try {
      const result = await this.model.generateContent(prompt);
      const responseText = result.response.text().trim();
      
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('R√©ponse JSON invalide');
      }
    } catch (error) {
      console.error('‚ùå Erreur analyse personnalit√©:', error);
      // Fallback avec pr√©servation basique
      return {
        intent: "am√©lioration_g√©n√©rale",
        originalPrompt: request,
        preservedElements: ["sujet_principal"],
        gender: "non_sp√©cifi√©",
        characterType: "personnage",
        suggestedTools: ["analyze_prompt", "enhance_prompt"],
        parameters: {
          "analyze_prompt": { "prompt": request },
          "enhance_prompt": { "prompt": request, "style": "creative" }
        },
        confidence: 0.5,
        reasoning: "Fallback en cas d'erreur"
      };
    }
  }

  /**
   * D√©termine les outils n√©cessaires bas√©s sur l'analyse
   */
  private determineRequiredTools(analysis: Record<string, unknown>): PromptEnhancementTool[] {
    const tools: PromptEnhancementTool[] = [];
    
    for (const toolName of (analysis.suggestedTools as string[]) || []) {
      const tool = this.availableTools.get(toolName);
      if (tool) {
        tools.push(tool);
      } else {
        console.warn(`‚ö†Ô∏è Outil "${toolName}" non trouv√©`);
      }
    }
    
    return tools;
  }

  /**
   * Ex√©cute les outils avec auto-feedback loop
   */
  private async executeWithFeedbackLoop(
    tools: PromptEnhancementTool[], 
    analysis: Record<string, unknown>, 
    context: Record<string, unknown>
  ): Promise<ToolResult[]> {
    return await this.executeWithDepth(tools, analysis, context);
  }

  /**
   * Construit les param√®tres pour un outil sp√©cifique
   */
  private buildToolParams(tool: PromptEnhancementTool, analysis: Record<string, unknown>): Record<string, unknown> {
    const baseParams: Record<string, unknown> = {
      prompt: analysis.originalPrompt || analysis.prompt,
      analysis: analysis
    };

    // Param√®tres sp√©cifiques selon l'outil
    switch (tool.name) {
      case 'enhance_prompt':
        return {
          ...baseParams,
          style: analysis.style || 'creative',
          focus: analysis.focus || 'quality'
        };
      case 'analyze_prompt':
        return {
          ...baseParams
        };
      case 'optimize_for_gemini':
        return {
          ...baseParams,
          model: 'gemini-2.5-flash-image'
        };
      case 'generate_variations':
        return {
          ...baseParams,
          count: 3,
          diversity: 'high'
        };
      case 'suggest_improvements':
        return {
          ...baseParams,
          focus: analysis.focus || 'all'
        };
      default:
        return baseParams;
    }
  }

  /**
   * Ex√©cute avec profondeur contr√¥l√©e
   */
  private async executeWithDepth(
    tools: PromptEnhancementTool[], 
    analysis: Record<string, unknown>, 
    context: Record<string, unknown>
  ): Promise<ToolResult[]> {
    if (this.currentDepth >= this.maxLoopDepth) {
      console.log(`üîÑ Auto-feedback loop atteint la profondeur maximale (${this.maxLoopDepth})`);
      return [];
    }

    this.currentDepth++;
    console.log(`üîÑ Auto-feedback loop - Profondeur: ${this.currentDepth}/${this.maxLoopDepth}`);

    const results: ToolResult[] = [];

    for (const tool of tools) {
      try {
        // Construire les param√®tres pour l'outil
        const params = this.buildToolParams(tool, analysis);
        const result = await tool.execute(params);
        results.push(result);

        // Auto-feedback : analyser si le r√©sultat est satisfaisant
        const isSatisfied = await this.evaluateResult(result, analysis);
        
        if (!isSatisfied && this.currentDepth < this.maxLoopDepth) {
          console.log(`üîÑ R√©sultat insatisfaisant, recherche d'outils suppl√©mentaires...`);
          
          // Sugg√©rer de nouveaux outils ou strat√©gies
          const additionalTools = await this.suggestAdditionalTools(result, analysis);
          if (additionalTools.length > 0) {
            const additionalResults = await this.executeWithDepth(additionalTools, analysis, context);
            results.push(...additionalResults);
          }
        }
      } catch (error) {
        console.error(`‚ùå Erreur ex√©cution outil ${tool.name}:`, error);
        results.push({
          success: false,
          error: `Erreur ex√©cution ${tool.name}: ${error}`,
          tool: tool.name,
          timestamp: new Date().toISOString()
        });
      }
    }

    return results;
  }

  /**
   * √âvalue si un r√©sultat est satisfaisant
   */
  private async evaluateResult(result: ToolResult, analysis: Record<string, unknown>): Promise<boolean> {
    if (!result.success) return false;
    
      const data = result.data;
      if (!data) return false;
      
      // Crit√®res d'√©valuation pour les prompts
      if (typeof data === 'string' && data.length < 10) return false;
      if (typeof data === 'object' && data !== null && Object.keys(data).length === 0) return false;
    
    return true;
  }

  /**
   * Sugg√®re des outils suppl√©mentaires
   */
  private async suggestAdditionalTools(
    currentResult: ToolResult, 
    analysis: Record<string, unknown>
  ): Promise<PromptEnhancementTool[]> {
    const suggestions: PromptEnhancementTool[] = [];
    
    // Si analyze_prompt ne trouve pas assez d'am√©liorations, essayer enhance_prompt
    if (currentResult.tool === 'analyze_prompt' && !this.hasEnoughImprovements(currentResult)) {
      const enhanceTool = this.availableTools.get('enhance_prompt');
      if (enhanceTool) {
        suggestions.push(enhanceTool);
      }
    }
    
    // Si enhance_prompt est fait, optimiser pour Gemini
    if (currentResult.tool === 'enhance_prompt') {
      const optimizeTool = this.availableTools.get('optimize_for_gemini');
      if (optimizeTool) {
        suggestions.push(optimizeTool);
      }
    }
    
    return suggestions;
  }

  /**
   * V√©rifie si un r√©sultat a assez d'am√©liorations
   */
  private hasEnoughImprovements(result: ToolResult): boolean {
    if (!result.success || !result.data) return false;
    
    const data = result.data;
    if (typeof data === 'object' && data.suggestions) {
      return data.suggestions.length >= 3;
    }
    
    return false;
  }

  /**
   * G√©n√®re la r√©ponse finale
   */
  private async generateFinalResponse(
    results: ToolResult[], 
    analysis: Record<string, unknown>, 
    originalRequest: string
  ): Promise<string> {
    // Extraire le prompt am√©lior√© des r√©sultats
    const enhancedPrompt = this.extractEnhancedPrompt(results);
    const improvements = this.extractImprovements(results);
    
    // Cr√©er une copie de l'analyse sans r√©f√©rence circulaire
    const cleanAnalysis = {
      intent: analysis.intent,
      originalPrompt: analysis.originalPrompt,
      preservedElements: analysis.preservedElements,
      gender: analysis.gender,
      characterType: analysis.characterType,
      confidence: analysis.confidence,
      reasoning: analysis.reasoning
    };

    const prompt = `${this.personality}

REQU√äTE ORIGINALE: "${originalRequest}"
ANALYSE: ${JSON.stringify(cleanAnalysis, null, 2)}
R√âSULTATS DES OUTILS: ${JSON.stringify(results, null, 2)}
PROMPT AM√âLIOR√â EXTRAIT: "${enhancedPrompt || 'NON TROUV√â'}"
AM√âLIORATIONS EXTRAITES: ${JSON.stringify(improvements, null, 2)}

T√ÇCHE: G√©n√®re une r√©ponse enthousiaste et cr√©ative pour l'utilisateur, en pr√©sentant le prompt am√©lior√© et les am√©liorations apport√©es.

STYLE:
- Commence par "Salut ! Je suis le Prompt Enhancer"
- Sois enthousiaste et cr√©atif
- Pr√©sente le prompt am√©lior√© de mani√®re claire avec des guillemets
- Explique les am√©liorations apport√©es
- Termine par "Voil√† ton super prompt optimis√© pour Gemini 2.5 Flash Image !"
- Utilise des emojis cr√©atifs (üé®, ‚ú®, üåü, üé≠, etc.)

IMPORTANT: 
- Si un prompt am√©lior√© est trouv√©, pr√©sente-le clairement avec des guillemets
- Explique pourquoi ce prompt est meilleur que l'original
- Utilise le prompt am√©lior√© extrait, pas celui des r√©sultats bruts`;

    try {
      const result = await this.model.generateContent(prompt);
      return result.response.text().trim();
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration r√©ponse finale:', error);
      return `Salut ! Je suis le Prompt Enhancer. J'ai am√©lior√© ton prompt mais j'ai rencontr√© un probl√®me technique. Peux-tu reformuler ta demande ?`;
    }
  }

  /**
   * Extrait le prompt am√©lior√© des r√©sultats
   */
  private extractEnhancedPrompt(results: ToolResult[]): string | undefined {
    for (const result of results) {
      if (result.success && result.data) {
        // Chercher dans diff√©rents formats de donn√©es
        if (typeof result.data === 'string') {
          return result.data;
        } else if (result.data.enhancedPrompt) {
          return result.data.enhancedPrompt;
        } else if (result.data.optimizedPrompt) {
          return result.data.optimizedPrompt;
        } else if (result.data.variations && Array.isArray(result.data.variations) && result.data.variations.length > 0) {
          // Si c'est des variations, prendre la premi√®re
          return result.data.variations[0].prompt || result.data.variations[0];
        }
      }
    }
    return undefined;
  }

  /**
   * Extrait les am√©liorations des r√©sultats
   */
  private extractImprovements(results: ToolResult[]): string[] {
    const improvements: string[] = [];
    
    for (const result of results) {
      if (result.success && result.data) {
        if (result.data.improvements) {
          improvements.push(...result.data.improvements);
        } else if (result.data.suggestions) {
          improvements.push(...result.data.suggestions);
        }
      }
    }
    
    return [...new Set(improvements)]; // Supprimer les doublons
  }

  // Impl√©mentations des outils

  /**
   * Ex√©cute analyze_prompt
   */
  private async executeAnalyzePrompt(params: Record<string, unknown>): Promise<ToolResult> {
    try {
      console.log(`üîç analyze_prompt: "${params.prompt as string}"`);
      
      const analysisPrompt = `Tu es un expert en prompt engineering pour la g√©n√©ration d'images. Analyse ce prompt et fournis une √©valuation d√©taill√©e.

PROMPT √Ä ANALYSER: "${params.prompt}"

R√âPONDS UNIQUEMENT EN JSON avec cette structure exacte:
{
  "analysis": {
    "clarity": 0-100,
    "specificity": 0-100,
    "creativity": 0-100,
    "technicalQuality": 0-100,
    "visualAppeal": 0-100
  },
  "strengths": ["force1", "force2"],
  "weaknesses": ["faiblesse1", "faiblesse2"],
  "suggestions": ["suggestion1", "suggestion2", "suggestion3"],
  "overallScore": 0-100
}`;

      const result = await this.model.generateContent(analysisPrompt);
      const responseText = result.response.text().trim();
      
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const analysis = JSON.parse(jsonMatch[0]);
        
        return {
          success: true,
          data: analysis,
          tool: 'analyze_prompt',
          timestamp: new Date().toISOString()
        };
      } else {
        throw new Error('R√©ponse JSON invalide');
      }
    } catch (error) {
      return {
        success: false,
        error: `Erreur analyze_prompt: ${error}`,
        tool: 'analyze_prompt',
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Ex√©cute enhance_prompt
   */
  private async executeEnhancePrompt(params: Record<string, unknown>): Promise<ToolResult> {
    try {
      console.log(`‚ú® enhance_prompt: "${params.prompt as string}"`);
      
      const style = (params.style as string) || 'creative';
      const analysis = params.analysis as Record<string, unknown> || {};
      
      const enhancePrompt = `Tu es un expert en prompt engineering. Am√©liore ce prompt pour la g√©n√©ration d'images en utilisant le style "${style}".

PROMPT ORIGINAL: "${params.prompt as string}"
STYLE D'AM√âLIORATION: ${style}

ANALYSE DE PR√âSERVATION:
- Genre d√©tect√©: ${analysis.gender || 'non_sp√©cifi√©'}
- Type de personnage: ${analysis.characterType || 'personnage'}
- √âl√©ments √† pr√©server: ${JSON.stringify(analysis.preservedElements || [])}

R√àGLES CRITIQUES DE PR√âSERVATION:
1. Si le genre est "f√©minin", le personnage doit rester f√©minin dans le prompt am√©lior√©
2. Si le genre est "masculin", le personnage doit rester masculin dans le prompt am√©lior√©
3. Le type de personnage (vampire, sorci√®re, chevalier, etc.) doit √™tre pr√©serv√©
4. Les caract√©ristiques sp√©cifiques mentionn√©es doivent √™tre conserv√©es
5. Ne change PAS le sujet principal, seulement am√©liore la description technique

EXEMPLE:
- "vampire" ‚Üí "femme vampire" ou "vampire f√©minine", PAS "chevalier"
- "sorci√®re" ‚Üí "femme sorci√®re" ou "sorci√®re", PAS "mage masculin"
- "chevalier" ‚Üí "chevalier" ou "homme en armure", PAS "guerri√®re"

R√âPONDS UNIQUEMENT EN JSON avec cette structure exacte:
{
  "enhancedPrompt": "le_prompt_am√©lior√©_complet_avec_pr√©servation_des_caract√©ristiques",
  "improvements": ["am√©lioration1", "am√©lioration2", "am√©lioration3"],
  "reasoning": "explication_des_am√©liorations_apport√©es_avec_pr√©servation",
  "style": "${style}",
  "preservedElements": ["√©l√©ment1", "√©l√©ment2"]
}`;

      const result = await this.model.generateContent(enhancePrompt);
      const responseText = result.response.text().trim();
      
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const enhancement = JSON.parse(jsonMatch[0]);
        
        return {
          success: true,
          data: enhancement,
          tool: 'enhance_prompt',
          timestamp: new Date().toISOString()
        };
      } else {
        throw new Error('R√©ponse JSON invalide');
      }
    } catch (error) {
      return {
        success: false,
        error: `Erreur enhance_prompt: ${error}`,
        tool: 'enhance_prompt',
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Ex√©cute generate_variations
   */
  private async executeGenerateVariations(params: Record<string, unknown>): Promise<ToolResult> {
    try {
      console.log(`üé≠ generate_variations: "${(params.prompt as string)?.substring(0, 50)}..."`);
      
      const count = (params.count as number) || 3;
      
      const variationsPrompt = `Tu es un expert en prompt engineering. G√©n√®re ${count} variations cr√©atives de ce prompt pour la g√©n√©ration d'images.

PROMPT ORIGINAL: "${params.prompt as string}"

R√âPONDS UNIQUEMENT EN JSON avec cette structure exacte:
{
  "variations": [
    {
      "prompt": "variation1",
      "style": "style1",
      "description": "description1"
    },
    {
      "prompt": "variation2", 
      "style": "style2",
      "description": "description2"
    },
    {
      "prompt": "variation3",
      "style": "style3", 
      "description": "description3"
    }
  ],
  "originalPrompt": "${params.prompt}"
}`;

      const result = await this.model.generateContent(variationsPrompt);
      const responseText = result.response.text().trim();
      
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const variations = JSON.parse(jsonMatch[0]);
        
        return {
          success: true,
          data: variations,
          tool: 'generate_variations',
          timestamp: new Date().toISOString()
        };
      } else {
        throw new Error('R√©ponse JSON invalide');
      }
    } catch (error) {
      return {
        success: false,
        error: `Erreur generate_variations: ${error}`,
        tool: 'generate_variations',
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Ex√©cute optimize_for_gemini
   */
  private async executeOptimizeForGemini(params: Record<string, unknown>): Promise<ToolResult> {
    try {
      console.log(`üöÄ optimize_for_gemini: "${params.prompt as string}"`);
      
      const optimizePrompt = `Tu es un expert en prompt engineering sp√©cialis√© pour Gemini 2.5 Flash Image. Optimise ce prompt sp√©cifiquement pour ce mod√®le.

PROMPT √Ä OPTIMISER: "${params.prompt as string}"

CARACT√âRISTIQUES DE GEMINI 2.5 FLASH IMAGE:
- Excellent pour les descriptions d√©taill√©es
- R√©pond bien aux instructions techniques pr√©cises
- Appr√©cie les sp√©cifications de style et de composition
- Bonne compr√©hension des concepts artistiques
- Sensible aux d√©tails de qualit√© et de r√©solution

R√âPONDS UNIQUEMENT EN JSON avec cette structure exacte:
{
  "optimizedPrompt": "le_prompt_optimis√©_pour_gemini",
  "optimizations": ["optimisation1", "optimisation2", "optimisation3"],
  "reasoning": "explication_des_optimisations_sp√©cifiques_√†_gemini",
  "confidence": 0.0-1.0
}`;

      const result = await this.model.generateContent(optimizePrompt);
      const responseText = result.response.text().trim();
      
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const optimization = JSON.parse(jsonMatch[0]);
        
        return {
          success: true,
          data: optimization,
          tool: 'optimize_for_gemini',
          timestamp: new Date().toISOString()
        };
      } else {
        throw new Error('R√©ponse JSON invalide');
      }
    } catch (error) {
      return {
        success: false,
        error: `Erreur optimize_for_gemini: ${error}`,
        tool: 'optimize_for_gemini',
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Ex√©cute suggest_improvements
   */
  private async executeSuggestImprovements(params: Record<string, unknown>): Promise<ToolResult> {
    try {
      console.log(`üí° suggest_improvements: "${(params.prompt as string)?.substring(0, 50)}..."`);
      
      const improvementsPrompt = `Tu es un expert en prompt engineering. Analyse ce prompt et sugg√®re des am√©liorations d√©taill√©es.

PROMPT √Ä ANALYSER: "${params.prompt}"

R√âPONDS UNIQUEMENT EN JSON avec cette structure exacte:
{
  "improvements": [
    {
      "category": "clarity|specificity|creativity|technical|visual",
      "suggestion": "suggestion_d√©taill√©e",
      "impact": "impact_attendu",
      "example": "exemple_concret"
    },
    {
      "category": "clarity|specificity|creativity|technical|visual", 
      "suggestion": "suggestion_d√©taill√©e",
      "impact": "impact_attendu",
      "example": "exemple_concret"
    }
  ],
  "priority": "high|medium|low",
  "estimatedImprovement": "description_de_l_am√©lioration_globale"
}`;

      const result = await this.model.generateContent(improvementsPrompt);
      const responseText = result.response.text().trim();
      
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const improvements = JSON.parse(jsonMatch[0]);
        
        return {
          success: true,
          data: improvements,
          tool: 'suggest_improvements',
          timestamp: new Date().toISOString()
        };
      } else {
        throw new Error('R√©ponse JSON invalide');
      }
    } catch (error) {
      return {
        success: false,
        error: `Erreur suggest_improvements: ${error}`,
        tool: 'suggest_improvements',
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Teste l'agent prompt enhancer
   */
  async testPromptEnhancer(): Promise<void> {
    console.log('üß™ Test PromptEnhancerAgent');
    
    const testRequest = "Cr√©e une image d'un chat";
    const context = {
      userId: 'test_user',
      userName: 'Test User',
      currentSession: 'test_session'
    };

    try {
      const response = await this.processRequest(testRequest, context);
      console.log(`‚úÖ Test prompt enhancer: ${response.success ? 'SUCCESS' : 'FAILED'}`);
      console.log(`üìù R√©ponse: ${response.message.substring(0, 200)}...`);
      console.log(`üîß Outils utilis√©s: ${response.toolsUsed.join(', ')}`);
      console.log(`üîÑ Boucles de feedback: ${response.feedbackLoops}`);
      if (response.enhancedPrompt) {
        console.log(`‚ú® Prompt am√©lior√©: ${response.enhancedPrompt.substring(0, 100)}...`);
      }
    } catch (error) {
      console.error('‚ùå Erreur test prompt enhancer:', error);
    }
  }
}