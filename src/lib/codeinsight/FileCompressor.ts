/**
 * FileCompressor - Compression intelligente de fichiers TypeScript
 * 
 * Prend les r√©sultats du FileAnalyzer et g√©n√®re un r√©sum√© compress√©
 * avec m√©tadonn√©es, tags et informations pour la d√©compression
 */

import { FileAnalysisResult, ScopeAnalysisResult } from './FileAnalyzer';
import { loadShadeosEnv } from '../utils/SecureEnvManager';
import * as fs from 'fs';
import * as path from 'path';

// Charger les variables d'environnement
loadShadeosEnv({ override: true });

export interface CompressedFile {
  metadata: CompressedFileMetadata;
  summary: CompressedFileSummary;
  scopes: CompressedScope[];
  compression: CompressionInfo;
  decompression: DecompressionInfo;
}

export interface CompressedFileMetadata {
  originalPath: string;
  fileName: string;
  fileType: 'typescript' | 'javascript' | 'unknown';
  compressedAt: string;
  version: string;
  totalLines: number;
  totalScopes: number;
  compressionRatio: number;
}

export interface CompressedFileSummary {
  purpose: string;
  architecture: string;
  mainPatterns: string[];
  keyDependencies: string[];
  complexity: {
    overall: 'low' | 'medium' | 'high';
    distribution: {
      low: number;
      medium: number;
      high: number;
    };
  };
  quality: {
    maintainability: 'low' | 'medium' | 'high';
    testability: 'low' | 'medium' | 'high';
    readability: 'low' | 'medium' | 'high';
  };
  risks: string[];
  recommendations: string[];
}

export interface CompressedScope {
  id: string;
  name: string;
  type: 'class' | 'function' | 'interface' | 'method' | 'constructor' | 'other';
  purpose: string;
  signature: string;
  complexity: 'low' | 'medium' | 'high';
  tags: string[];
  keyDependencies: string[];
  risks: string[];
  testIdeas: string[];
  position: {
    startLine: number;
    endLine: number;
    relativeSize: number; // Pourcentage du fichier
  };
  relationships: {
    dependsOn: string[];
    usedBy: string[];
    calls: string[];
  };
}

export interface CompressionInfo {
  algorithm: string;
  compressionLevel: number;
  originalSize: number;
  compressedSize: number;
  compressionRatio: number;
  compressionTime: number;
  llmCalls: number;
}

export interface DecompressionInfo {
  instructions: string[];
  requiredContext: string[];
  regenerationHints: string[];
  qualityChecks: string[];
  validationRules: string[];
}

export class FileCompressor {
  private useRealLLM: boolean;
  private llmCalls: number;

  constructor() {
    this.useRealLLM = !!process.env.GEMINI_API_KEY;
    this.llmCalls = 0;
    
    console.log('üóúÔ∏è FileCompressor initialis√©');
    console.log(`üß† Mode LLM: ${this.useRealLLM ? 'Vrais appels LLM' : 'Mode heuristique'}`);
  }

  /**
   * Compresse un fichier √† partir des r√©sultats du FileAnalyzer
   */
  async compressFile(analysisResult: FileAnalysisResult): Promise<CompressedFile> {
    const startTime = Date.now();
    console.log(`üóúÔ∏è Compression du fichier: ${analysisResult.filePath}`);

    try {
      // 1. G√©n√©rer les m√©tadonn√©es de compression
      const metadata = this.generateCompressionMetadata(analysisResult);
      console.log(`üìä M√©tadonn√©es g√©n√©r√©es: ${metadata.compressionRatio.toFixed(2)}% de compression`);

      // 2. Cr√©er le r√©sum√© compress√©
      const summary = await this.generateCompressedSummary(analysisResult);
      console.log(`üìã R√©sum√© g√©n√©r√©: ${summary.mainPatterns.length} patterns identifi√©s`);

      // 3. Compresser chaque scope
      const compressedScopes = await this.compressScopes(analysisResult.scopeAnalyses);
      console.log(`üèóÔ∏è Scopes compress√©s: ${compressedScopes.length} scopes trait√©s`);

      // 4. G√©n√©rer les informations de compression
      const compressionInfo = this.generateCompressionInfo(analysisResult, startTime);
      console.log(`üìà Info compression: ${compressionInfo.compressionRatio.toFixed(2)}% ratio`);

      // 5. G√©n√©rer les informations de d√©compression
      const decompressionInfo = this.generateDecompressionInfo(analysisResult, compressedScopes);
      console.log(`üîÑ Info d√©compression: ${decompressionInfo.instructions.length} instructions`);

      const endTime = Date.now();
      const totalDuration = endTime - startTime;

      console.log(`‚úÖ Compression termin√©e: ${totalDuration}ms`);

      return {
        metadata,
        summary,
        scopes: compressedScopes,
        compression: compressionInfo,
        decompression: decompressionInfo
      };

    } catch (error) {
      console.error(`‚ùå Erreur compression fichier ${analysisResult.filePath}:`, error);
      throw error;
    }
  }

  /**
   * G√©n√®re les m√©tadonn√©es de compression
   */
  private generateCompressionMetadata(analysisResult: FileAnalysisResult): CompressedFileMetadata {
    const { fileAnalysis, metadata } = analysisResult;
    const fileName = path.basename(fileAnalysis.filePath);
    const fileType = this.determineFileType(fileName);
    
    // Calculer le ratio de compression (estimation)
    const originalSize = fileAnalysis.totalLines * 50; // Estimation 50 chars par ligne
    const compressedSize = Math.max(100, originalSize * 0.1); // Au moins 10% de la taille originale
    const compressionRatio = ((originalSize - compressedSize) / originalSize) * 100;

    return {
      originalPath: fileAnalysis.filePath,
      fileName,
      fileType,
      compressedAt: new Date().toLocaleString('fr-FR', { timeZone: 'Europe/Paris' }),
      version: '1.0.0',
      totalLines: fileAnalysis.totalLines,
      totalScopes: fileAnalysis.scopes.length,
      compressionRatio: Math.round(compressionRatio * 100) / 100
    };
  }

  /**
   * G√©n√®re le r√©sum√© compress√© du fichier
   */
  private async generateCompressedSummary(analysisResult: FileAnalysisResult): Promise<CompressedFileSummary> {
    const { fileAnalysis, scopeAnalyses, summary } = analysisResult;

    // Analyser l'architecture
    const architecture = this.analyzeArchitecture(scopeAnalyses);
    
    // Identifier les patterns principaux
    const mainPatterns = this.identifyMainPatterns(scopeAnalyses);
    
    // Extraire les d√©pendances cl√©s
    const keyDependencies = this.extractKeyDependencies(fileAnalysis);
    
    // Analyser la complexit√© globale
    const complexity = this.analyzeGlobalComplexity(scopeAnalyses);
    
    // √âvaluer la qualit√©
    const quality = this.evaluateQuality(scopeAnalyses);
    
    // Identifier les risques globaux
    const risks = this.identifyGlobalRisks(scopeAnalyses);
    
    // G√©n√©rer les recommandations
    const recommendations = this.generateRecommendations(scopeAnalyses, complexity, quality);

    return {
      purpose: summary.overallPurpose,
      architecture,
      mainPatterns,
      keyDependencies,
      complexity,
      quality,
      risks,
      recommendations
    };
  }

  /**
   * Compresse les scopes individuels
   */
  private async compressScopes(scopeAnalyses: ScopeAnalysisResult[]): Promise<CompressedScope[]> {
    const compressedScopes: CompressedScope[] = [];

    for (const scopeAnalysis of scopeAnalyses) {
      const { scope, analysis } = scopeAnalysis;
      
      const compressedScope: CompressedScope = {
        id: this.generateScopeId(scope),
        name: scope.name,
        type: scope.type as any,
        purpose: analysis.overall_purpose || `Fonctionnalit√© ${scope.type}`,
        signature: scope.signature,
        complexity: analysis.complexity,
        tags: analysis.tags,
        keyDependencies: this.extractScopeDependencies(scope, analysis),
        risks: analysis.risks,
        testIdeas: analysis.test_ideas,
        position: {
          startLine: scope.startLine,
          endLine: scope.endLine,
          relativeSize: this.calculateRelativeSize(scope, scopeAnalyses)
        },
        relationships: this.analyzeScopeRelationships(scope, scopeAnalyses)
      };

      compressedScopes.push(compressedScope);
    }

    return compressedScopes;
  }

  /**
   * G√©n√®re les informations de compression
   */
  private generateCompressionInfo(analysisResult: FileAnalysisResult, startTime: number): CompressionInfo {
    const endTime = Date.now();
    const compressionTime = endTime - startTime;
    
    // Estimation des tailles
    const originalSize = analysisResult.fileAnalysis.totalLines * 50;
    const compressedSize = Math.max(100, originalSize * 0.1);
    const compressionRatio = ((originalSize - compressedSize) / originalSize) * 100;

    return {
      algorithm: 'LLM-based semantic compression',
      compressionLevel: 9, // Sur 10
      originalSize,
      compressedSize,
      compressionRatio: Math.round(compressionRatio * 100) / 100,
      compressionTime,
      llmCalls: this.llmCalls
    };
  }

  /**
   * G√©n√®re les informations de d√©compression
   */
  private generateDecompressionInfo(
    analysisResult: FileAnalysisResult, 
    compressedScopes: CompressedScope[]
  ): DecompressionInfo {
    const instructions = [
      'Utiliser les m√©tadonn√©es pour reconstruire la structure du fichier',
      'Respecter les signatures et types des scopes',
      'Maintenir les relations entre les composants',
      'Appliquer les patterns architecturaux identifi√©s',
      'Int√©grer les d√©pendances et imports n√©cessaires'
    ];

    const requiredContext = [
      'Contexte TypeScript/JavaScript',
      'Patterns architecturaux identifi√©s',
      'D√©pendances externes',
      'Conventions de nommage',
      'Structure de projet'
    ];

    const regenerationHints = [
      'Prioriser la lisibilit√© du code g√©n√©r√©',
      'Maintenir la coh√©rence avec l\'architecture originale',
      'Inclure les commentaires et documentation',
      'Respecter les bonnes pratiques TypeScript',
      'Valider la syntaxe et les types'
    ];

    const qualityChecks = [
      'V√©rifier la syntaxe TypeScript',
      'Valider les types et interfaces',
      'Contr√¥ler les imports et exports',
      'Tester la compilation',
      'V√©rifier la coh√©rence architecturale'
    ];

    const validationRules = [
      'Le code doit compiler sans erreurs',
      'Les types doivent √™tre coh√©rents',
      'Les d√©pendances doivent √™tre r√©solues',
      'La structure doit respecter l\'architecture originale',
      'Les fonctionnalit√©s doivent √™tre pr√©serv√©es'
    ];

    return {
      instructions,
      requiredContext,
      regenerationHints,
      qualityChecks,
      validationRules
    };
  }

  // M√©thodes utilitaires

  private determineFileType(fileName: string): 'typescript' | 'javascript' | 'unknown' {
    if (fileName.endsWith('.ts') || fileName.endsWith('.tsx')) {
      return 'typescript';
    } else if (fileName.endsWith('.js') || fileName.endsWith('.jsx')) {
      return 'javascript';
    }
    return 'unknown';
  }

  private analyzeArchitecture(scopeAnalyses: ScopeAnalysisResult[]): string {
    const classCount = scopeAnalyses.filter(s => s.scope.type === 'class').length;
    const functionCount = scopeAnalyses.filter(s => s.scope.type === 'function').length;
    const interfaceCount = scopeAnalyses.filter(s => s.scope.type === 'interface').length;

    if (classCount > functionCount && classCount > interfaceCount) {
      return 'Object-Oriented (Class-based)';
    } else if (functionCount > classCount) {
      return 'Functional Programming';
    } else if (interfaceCount > 0) {
      return 'Interface-driven Architecture';
    } else {
      return 'Mixed Architecture';
    }
  }

  private identifyMainPatterns(scopeAnalyses: ScopeAnalysisResult[]): string[] {
    const patterns: string[] = [];
    
    // Analyser les tags pour identifier les patterns
    const allTags = scopeAnalyses.flatMap(s => s.analysis.tags);
    const tagCounts = allTags.reduce((acc, tag) => {
      acc[tag] = (acc[tag] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    // Identifier les patterns les plus fr√©quents
    const sortedTags = Object.entries(tagCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([tag]) => tag);

    return sortedTags;
  }

  private extractKeyDependencies(fileAnalysis: any): string[] {
    return fileAnalysis.imports.slice(0, 10); // Limiter √† 10 d√©pendances principales
  }

  private analyzeGlobalComplexity(scopeAnalyses: ScopeAnalysisResult[]): any {
    const complexities = scopeAnalyses.map(s => s.analysis.complexity);
    const distribution = {
      low: complexities.filter(c => c === 'low').length,
      medium: complexities.filter(c => c === 'medium').length,
      high: complexities.filter(c => c === 'high').length
    };

    const total = complexities.length;
    const highRatio = distribution.high / total;
    const mediumRatio = distribution.medium / total;

    let overall: 'low' | 'medium' | 'high';
    if (highRatio > 0.3) {
      overall = 'high';
    } else if (mediumRatio > 0.5 || highRatio > 0.1) {
      overall = 'medium';
    } else {
      overall = 'low';
    }

    return { overall, distribution };
  }

  private evaluateQuality(scopeAnalyses: ScopeAnalysisResult[]): any {
    const maintainability = this.calculateMaintainability(scopeAnalyses);
    const testability = this.calculateTestability(scopeAnalyses);
    const readability = this.calculateReadability(scopeAnalyses);

    return { maintainability, testability, readability };
  }

  private calculateMaintainability(scopeAnalyses: ScopeAnalysisResult[]): 'low' | 'medium' | 'high' {
    const highComplexityCount = scopeAnalyses.filter(s => s.analysis.complexity === 'high').length;
    const riskCount = scopeAnalyses.reduce((sum, s) => sum + s.analysis.risks.length, 0);
    
    if (highComplexityCount > scopeAnalyses.length * 0.3 || riskCount > scopeAnalyses.length * 2) {
      return 'low';
    } else if (highComplexityCount > scopeAnalyses.length * 0.1 || riskCount > scopeAnalyses.length) {
      return 'medium';
    } else {
      return 'high';
    }
  }

  private calculateTestability(scopeAnalyses: ScopeAnalysisResult[]): 'low' | 'medium' | 'high' {
    const testIdeasCount = scopeAnalyses.reduce((sum, s) => sum + s.analysis.test_ideas.length, 0);
    const avgTestIdeas = testIdeasCount / scopeAnalyses.length;
    
    if (avgTestIdeas < 1) {
      return 'low';
    } else if (avgTestIdeas < 2) {
      return 'medium';
    } else {
      return 'high';
    }
  }

  private calculateReadability(scopeAnalyses: ScopeAnalysisResult[]): 'low' | 'medium' | 'high' {
    const avgComplexity = scopeAnalyses.reduce((sum, s) => {
      const complexityValue = s.analysis.complexity === 'high' ? 3 : s.analysis.complexity === 'medium' ? 2 : 1;
      return sum + complexityValue;
    }, 0) / scopeAnalyses.length;
    
    if (avgComplexity > 2.5) {
      return 'low';
    } else if (avgComplexity > 1.5) {
      return 'medium';
    } else {
      return 'high';
    }
  }

  private identifyGlobalRisks(scopeAnalyses: ScopeAnalysisResult[]): string[] {
    const allRisks = scopeAnalyses.flatMap(s => s.analysis.risks);
    const riskCounts = allRisks.reduce((acc, risk) => {
      acc[risk] = (acc[risk] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    // Retourner les risques les plus fr√©quents
    return Object.entries(riskCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([risk]) => risk);
  }

  private generateRecommendations(scopeAnalyses: ScopeAnalysisResult[], complexity: any, quality: any): string[] {
    const recommendations: string[] = [];

    if (complexity.overall === 'high') {
      recommendations.push('Consid√©rer la refactorisation pour r√©duire la complexit√©');
    }

    if (quality.maintainability === 'low') {
      recommendations.push('Am√©liorer la maintenabilit√© en r√©duisant les risques identifi√©s');
    }

    if (quality.testability === 'low') {
      recommendations.push('Ajouter plus de tests pour am√©liorer la testabilit√©');
    }

    if (quality.readability === 'low') {
      recommendations.push('Am√©liorer la lisibilit√© du code');
    }

    if (recommendations.length === 0) {
      recommendations.push('Code bien structur√© - continuer les bonnes pratiques');
    }

    return recommendations;
  }

  private generateScopeId(scope: any): string {
    return `${scope.type}_${scope.name}_${scope.startLine}`.replace(/[^a-zA-Z0-9_]/g, '_');
  }

  private extractScopeDependencies(scope: any, analysis: any): string[] {
    const dependencies = [...scope.dependencies];
    if (analysis.dependencies && Array.isArray(analysis.dependencies)) {
      dependencies.push(...analysis.dependencies);
    }
    return [...new Set(dependencies)].slice(0, 5); // Limiter √† 5 d√©pendances principales
  }

  private calculateRelativeSize(scope: any, allScopes: ScopeAnalysisResult[]): number {
    const totalLines = allScopes.reduce((sum, s) => sum + (s.scope.endLine - s.scope.startLine + 1), 0);
    const scopeLines = scope.endLine - scope.startLine + 1;
    return Math.round((scopeLines / totalLines) * 100 * 100) / 100; // Pourcentage avec 2 d√©cimales
  }

  private analyzeScopeRelationships(scope: any, allScopes: ScopeAnalysisResult[]): any {
    const dependsOn: string[] = [];
    const usedBy: string[] = [];
    const calls: string[] = [];

    // Analyser les d√©pendances
    if (scope.dependencies) {
      dependsOn.push(...scope.dependencies);
    }

    // Analyser les relations avec les autres scopes
    for (const otherScope of allScopes) {
      if (otherScope.scope.name !== scope.name) {
        // V√©rifier si ce scope utilise l'autre
        if (otherScope.scope.dependencies?.includes(scope.name)) {
          usedBy.push(otherScope.scope.name);
        }
        
        // V√©rifier si ce scope appelle l'autre
        if (scope.content?.includes(`${otherScope.scope.name}(`)) {
          calls.push(otherScope.scope.name);
        }
      }
    }

    return { dependsOn, usedBy, calls };
  }

  /**
   * Sauvegarde le fichier compress√©
   */
  async saveCompressedFile(compressedFile: CompressedFile, outputDir?: string): Promise<string> {
    const timestamp = new Date().toLocaleString('fr-FR', { 
      timeZone: 'Europe/Paris',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    }).replace(/[\/\s:]/g, '-');
    const fileName = path.basename(compressedFile.metadata.originalPath, path.extname(compressedFile.metadata.originalPath));
    const defaultOutputDir = path.join(process.cwd(), 'artefacts', 'Reports', 'CodeInsight', 'compressed_files');
    const finalOutputDir = outputDir || defaultOutputDir;

    // Cr√©er le dossier
    if (!fs.existsSync(finalOutputDir)) {
      fs.mkdirSync(finalOutputDir, { recursive: true });
    }

    // Sauvegarder le fichier compress√© JSON
    const jsonPath = path.join(finalOutputDir, `${fileName}_compressed_${timestamp}.json`);
    fs.writeFileSync(jsonPath, JSON.stringify(compressedFile, null, 2), 'utf-8');

    // G√©n√©rer un rapport de compression Markdown
    const markdownPath = path.join(finalOutputDir, `${fileName}_compression_report_${timestamp}.md`);
    const markdown = this.generateCompressionReport(compressedFile);
    fs.writeFileSync(markdownPath, markdown, 'utf-8');

    console.log(`üìÑ Fichier compress√© sauvegard√©:`);
    console.log(`   JSON: ${jsonPath}`);
    console.log(`   Markdown: ${markdownPath}`);

    return jsonPath;
  }

  /**
   * G√©n√®re un rapport de compression Markdown
   */
  private generateCompressionReport(compressedFile: CompressedFile): string {
    const { metadata, summary, scopes, compression, decompression } = compressedFile;

    let markdown = `# Rapport de Compression - ${metadata.fileName}

**Fichier original:** ${metadata.originalPath}  
**Date de compression:** ${metadata.compressedAt}  
**Ratio de compression:** ${metadata.compressionRatio}%  
**Temps de compression:** ${compression.compressionTime}ms

## üìä M√©tadonn√©es

- **Type:** ${metadata.fileType}
- **Lignes:** ${metadata.totalLines}
- **Scopes:** ${metadata.totalScopes}
- **Version:** ${metadata.version}

## üèóÔ∏è Architecture

- **Type:** ${summary.architecture}
- **But:** ${summary.purpose}
- **Patterns principaux:** ${summary.mainPatterns.join(', ')}

## üìà Complexit√©

- **Globale:** ${summary.complexity.overall}
- **Distribution:**
  - Faible: ${summary.complexity.distribution.low}
  - Moyenne: ${summary.complexity.distribution.medium}
  - √âlev√©e: ${summary.complexity.distribution.high}

## üéØ Qualit√©

- **Maintenabilit√©:** ${summary.quality.maintainability}
- **Testabilit√©:** ${summary.quality.testability}
- **Lisibilit√©:** ${summary.quality.readability}

## ‚ö†Ô∏è Risques Identifi√©s

${summary.risks.map(risk => `- ${risk}`).join('\n')}

## üí° Recommandations

${summary.recommendations.map(rec => `- ${rec}`).join('\n')}

## üóúÔ∏è Informations de Compression

- **Algorithme:** ${compression.algorithm}
- **Niveau:** ${compression.compressionLevel}/10
- **Taille originale:** ${compression.originalSize} caract√®res
- **Taille compress√©e:** ${compression.compressedSize} caract√®res
- **Ratio:** ${compression.compressionRatio}%
- **Appels LLM:** ${compression.llmCalls}

## üîÑ Instructions de D√©compression

${decompression.instructions.map(instruction => `- ${instruction}`).join('\n')}

## üìã Scopes Compress√©s

${scopes.map((scope, index) => `
### ${index + 1}. ${scope.type} ${scope.name}

**ID:** ${scope.id}  
**But:** ${scope.purpose}  
**Complexit√©:** ${scope.complexity}  
**Position:** Lignes ${scope.position.startLine}-${scope.position.endLine} (${scope.position.relativeSize}%)  
**Tags:** ${scope.tags.join(', ')}

**D√©pendances cl√©s:**
${scope.keyDependencies.map(dep => `- ${dep}`).join('\n')}

**Risques:**
${scope.risks.map(risk => `- ${risk}`).join('\n')}

**Tests sugg√©r√©s:**
${scope.testIdeas.map(idea => `- ${idea}`).join('\n')}

**Relations:**
- D√©pend de: ${scope.relationships.dependsOn.join(', ') || 'Aucune'}
- Utilis√© par: ${scope.relationships.usedBy.join(', ') || 'Aucun'}
- Appelle: ${scope.relationships.calls.join(', ') || 'Aucun'}
`).join('\n')}

---
*G√©n√©r√© automatiquement par FileCompressor*
`;

    return markdown;
  }
}