#!/usr/bin/env node
/**
 * Test de l'AgenticDecompressionEngine avec vrais appels LLM
 * 
 * Valide que les mocks ont √©t√© remplac√©s par de vrais appels LLM
 */

import { AgenticDecompressionEngine, AgenticDecompressionRequest } from './AgenticDecompressionEngine';
import { loadShadeosEnv } from '../utils/SecureEnvManager';

// Charger les variables d'environnement
loadShadeosEnv({ override: true });

async function testAgenticDecompressionEngine() {
  console.log('üß™ Test de l\'AgenticDecompressionEngine avec vrais appels LLM');
  console.log('================================================================\n');

  try {
    // V√©rifier la cl√© API
    const geminiApiKey = process.env.GEMINI_API_KEY;
    if (!geminiApiKey) {
      console.log('‚ùå GEMINI_API_KEY non trouv√©e dans ~/.shadeos_env');
      console.log('   Le test fonctionnera en mode heuristique (fallback)');
    } else {
      console.log('‚úÖ GEMINI_API_KEY trouv√©e');
      console.log(`üîë Cl√© API: ${geminiApiKey.substring(0, 20)}...`);
    }

    // Cr√©er l'engine
    console.log('\nüîß Initialisation de l\'AgenticDecompressionEngine...');
    const engine = new AgenticDecompressionEngine();
    console.log('‚úÖ Engine initialis√©');

    // Cr√©er une requ√™te de test
    const testRequest: AgenticDecompressionRequest = {
      compressedItems: [
        {
          name: 'TestClass',
          level: 2,
          description: 'Classe de test pour d√©compression agentique',
          compressedContent: 'class TestClass { constructor() { this.value = 42; } }',
          metadata: {
            originalSize: 100,
            compressedSize: 50,
            compressionRatio: 0.5,
            quality: 8.5
          }
        }
      ],
      targetContext: 'Test de d√©compression agentique avec LLM',
      reconstructionLevel: 'standard',
      preserveOriginalStructure: true,
      includeMetadata: true,
      enableAlgarethInsights: true,
      learningMode: 'active',
      contextEnrichment: true,
      preserveExperience: true,
      targetQuality: 'premium',
      optimizationLevel: 'balanced'
    };

    console.log('\nüìã Requ√™te de test:');
    console.log(`   Contexte: ${testRequest.targetContext}`);
    console.log(`   Niveau: ${testRequest.reconstructionLevel}`);
    console.log(`   Qualit√©: ${testRequest.targetQuality}`);
    console.log(`   Mode d'apprentissage: ${testRequest.learningMode}`);

    // Test 1: Analyse du contexte
    console.log('\nüß† Test 1: Analyse du contexte avec LLM');
    console.log('----------------------------------------');
    
    const startTime = Date.now();
    const result = await engine.decompressWithAlgareth(testRequest);
    const endTime = Date.now();

    console.log('‚úÖ D√©compression agentique termin√©e');
    console.log(`   Temps d'ex√©cution: ${endTime - startTime}ms`);
    console.log(`   Succ√®s: ${result.success}`);
    console.log(`   D√©compress√©: ${result.decompressed.length} √©l√©ments`);
    console.log(`   Erreurs: ${result.errors.length}`);
    console.log(`   Warnings: ${result.warnings.length}`);

    // Test 2: Insights Algareth
    console.log('\nüí° Test 2: Insights Algareth');
    console.log('-----------------------------');
    
    if (result.algarethInsights && result.algarethInsights.length > 0) {
      console.log(`‚úÖ ${result.algarethInsights.length} insights g√©n√©r√©s:`);
      result.algarethInsights.forEach((insight, index) => {
        console.log(`   ${index + 1}. [${insight.type}] ${insight.description}`);
        console.log(`      Confiance: ${insight.confidence}, Impact: ${insight.impact}`);
        console.log(`      Source: ${insight.source}, Actionable: ${insight.actionable}`);
      });
    } else {
      console.log('‚ö†Ô∏è Aucun insight g√©n√©r√©');
    }

    // Test 3: M√©triques d'apprentissage
    console.log('\nüìä Test 3: M√©triques d\'apprentissage');
    console.log('-------------------------------------');
    
    if (result.learningMetrics) {
      console.log('‚úÖ M√©triques d\'apprentissage:');
      console.log(`   Patterns appris: ${result.learningMetrics.patternsLearned}`);
      console.log(`   Am√©liorations contexte: ${result.learningMetrics.contextImprovements}`);
      console.log(`   Gains d'optimisation: ${result.learningMetrics.optimizationGains}`);
      console.log(`   Exp√©rience accumul√©e: ${result.learningMetrics.experienceAccumulated}`);
      console.log(`   Efficacit√© d'apprentissage: ${result.learningMetrics.learningEfficiency}`);
      console.log(`   Vitesse d'adaptation: ${result.learningMetrics.adaptationSpeed}`);
    } else {
      console.log('‚ö†Ô∏è Aucune m√©trique d\'apprentissage');
    }

    // Test 4: Suggestions d'optimisation
    console.log('\nüöÄ Test 4: Suggestions d\'optimisation');
    console.log('--------------------------------------');
    
    if (result.optimizationSuggestions && result.optimizationSuggestions.length > 0) {
      console.log(`‚úÖ ${result.optimizationSuggestions.length} suggestions d'optimisation:`);
      result.optimizationSuggestions.forEach((suggestion, index) => {
        console.log(`   ${index + 1}. [${suggestion.type}] ${suggestion.description}`);
        console.log(`      Am√©lioration attendue: ${suggestion.expectedImprovement}%`);
        console.log(`      Complexit√©: ${suggestion.implementationComplexity}, Priorit√©: ${suggestion.priority}`);
        console.log(`      Confiance Algareth: ${suggestion.algarethConfidence}`);
      });
    } else {
      console.log('‚ö†Ô∏è Aucune suggestion d\'optimisation');
    }

    // Test 5: Exp√©rience acquise
    console.log('\nüéì Test 5: Exp√©rience acquise');
    console.log('-----------------------------');
    
    if (result.experienceGained) {
      console.log('‚úÖ Exp√©rience acquise:');
      console.log(`   Nouveaux patterns: ${result.experienceGained.newPatterns.length}`);
      console.log(`   Enrichissements contexte: ${result.experienceGained.contextEnrichments.length}`);
      console.log(`   Opportunit√©s d'optimisation: ${result.experienceGained.optimizationOpportunities.length}`);
      console.log(`   Am√©liorations qualit√©: ${result.experienceGained.qualityImprovements.length}`);
      console.log(`   Le√ßons apprises: ${result.experienceGained.lessonsLearned.length}`);
    } else {
      console.log('‚ö†Ô∏è Aucune exp√©rience acquise');
    }

    // Test 6: Statistiques de l'engine
    console.log('\nüìà Test 6: Statistiques de l\'engine');
    console.log('------------------------------------');
    
    const stats = engine.getAgenticDecompressionStats();
    console.log('‚úÖ Statistiques:');
    console.log(`   Total d√©compressions: ${stats.totalDecompressions}`);
    console.log(`   D√©compressions r√©ussies: ${stats.successfulDecompressions}`);
    console.log(`   Taux de succ√®s: ${(stats.successRate * 100).toFixed(1)}%`);
    console.log(`   Score qualit√© moyen: ${stats.avgQualityScore.toFixed(1)}/10`);
    console.log(`   Total insights: ${stats.totalInsights}`);
    console.log(`   Insights moyens: ${stats.avgInsights.toFixed(1)}`);

    // R√©sum√©
    console.log('\nüéâ R√©sum√© du test');
    console.log('=================');
    
    if (geminiApiKey) {
      console.log('‚úÖ Test avec vrais appels LLM r√©ussi');
      console.log('üß† L\'AgenticDecompressionEngine utilise maintenant de vrais appels LLM');
      console.log('üîß Les mocks ont √©t√© remplac√©s par des analyses r√©elles');
    } else {
      console.log('‚ö†Ô∏è Test en mode heuristique (pas de cl√© API)');
      console.log('üîß L\'engine fonctionne avec des fallbacks');
    }
    
    console.log(`üìä R√©sultat: ${result.success ? 'Succ√®s' : '√âchec'}`);
    console.log(`‚è±Ô∏è Temps: ${endTime - startTime}ms`);
    console.log(`üí° Insights: ${result.algarethInsights?.length || 0}`);
    console.log(`üöÄ Optimisations: ${result.optimizationSuggestions?.length || 0}`);

    console.log('\n‚úÖ Test de l\'AgenticDecompressionEngine termin√© avec succ√®s !');
    console.log('============================================================');
    console.log('üéØ L\'engine utilise maintenant de vrais appels LLM au lieu de mocks');
    console.log('üß† Analyse contextuelle intelligente avec Algareth');
    console.log('üí° G√©n√©ration d\'insights bas√©e sur l\'exp√©rience');
    console.log('üöÄ Suggestions d\'optimisation contextuelles');

  } catch (error) {
    console.error('‚ùå Erreur lors du test de l\'AgenticDecompressionEngine:', error);
    process.exit(1);
  }
}

// Ex√©cuter le test si ce fichier est appel√© directement
if (require.main === module) {
  testAgenticDecompressionEngine().catch(console.error);
}

export { testAgenticDecompressionEngine };