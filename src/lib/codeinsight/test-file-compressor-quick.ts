#!/usr/bin/env node
/**
 * Test rapide du FileCompressor
 * 
 * Teste avec un fichier tr√®s simple pour validation rapide
 */

import { FileAnalyzer } from './FileAnalyzer';
import { FileCompressor } from './FileCompressor';
import { loadShadeosEnv } from '../utils/SecureEnvManager';
import * as fs from 'fs';
import * as path from 'path';

// Charger les variables d'environnement
loadShadeosEnv({ override: true });

async function testFileCompressorQuick() {
  console.log('üß™ Test rapide du FileCompressor');
  console.log('================================\n');

  try {
    // V√©rifier la cl√© API
    const geminiApiKey = process.env.GEMINI_API_KEY;
    if (!geminiApiKey) {
      console.log('‚ùå GEMINI_API_KEY non trouv√©e');
      console.log('   Le test fonctionnera en mode heuristique');
    } else {
      console.log('‚úÖ GEMINI_API_KEY trouv√©e');
      console.log(`üîë Cl√© API: ${geminiApiKey.substring(0, 20)}...`);
    }

    // Cr√©er un fichier de test tr√®s simple
    const testFilePath = path.join(process.cwd(), 'test-compression-quick.ts');
    const testCode = `// Fichier de test simple pour compression
import { Component } from '@angular/core';

/**
 * Interface simple
 */
export interface SimpleData {
  id: number;
  name: string;
}

/**
 * Service simple
 */
@Injectable()
export class SimpleService {
  constructor() {}
  
  /**
   * M√©thode simple
   */
  getData(): SimpleData {
    return { id: 1, name: 'test' };
  }
}

/**
 * Fonction utilitaire
 */
export function formatName(data: SimpleData): string {
  return \`\${data.name} (\${data.id})\`;
}`;

    // √âcrire le fichier de test
    fs.writeFileSync(testFilePath, testCode, 'utf-8');
    console.log(`üìÑ Fichier de test cr√©√©: ${testFilePath}`);

    // √âtape 1: Analyser le fichier avec FileAnalyzer
    console.log('\nüîç √âtape 1: Analyse du fichier...');
    const fileAnalyzer = new FileAnalyzer();
    const analysisResult = await fileAnalyzer.analyzeFile(testFilePath);
    console.log(`‚úÖ Analyse termin√©e: ${analysisResult.metadata.totalScopes} scopes analys√©s`);

    // √âtape 2: Compresser le fichier avec FileCompressor
    console.log('\nüóúÔ∏è √âtape 2: Compression du fichier...');
    const fileCompressor = new FileCompressor();
    const compressedFile = await fileCompressor.compressFile(analysisResult);
    console.log(`‚úÖ Compression termin√©e: ${compressedFile.metadata.compressionRatio}% de compression`);

    // Afficher les r√©sultats
    console.log('\nüìä R√©sultats de la compression:');
    console.log(`   Fichier: ${compressedFile.metadata.fileName}`);
    console.log(`   Type: ${compressedFile.metadata.fileType}`);
    console.log(`   Lignes: ${compressedFile.metadata.totalLines}`);
    console.log(`   Scopes: ${compressedFile.metadata.totalScopes}`);
    console.log(`   Ratio de compression: ${compressedFile.metadata.compressionRatio}%`);

    console.log('\nüèóÔ∏è Architecture:');
    console.log(`   Type: ${compressedFile.summary.architecture}`);
    console.log(`   But: ${compressedFile.summary.purpose}`);
    console.log(`   Patterns: ${compressedFile.summary.mainPatterns.join(', ')}`);

    console.log('\nüìà Complexit√©:');
    console.log(`   Globale: ${compressedFile.summary.complexity.overall}`);
    console.log(`   Distribution: ${compressedFile.summary.complexity.distribution.low} faible, ${compressedFile.summary.complexity.distribution.medium} moyenne, ${compressedFile.summary.complexity.distribution.high} √©lev√©e`);

    console.log('\nüéØ Qualit√©:');
    console.log(`   Maintenabilit√©: ${compressedFile.summary.quality.maintainability}`);
    console.log(`   Testabilit√©: ${compressedFile.summary.quality.testability}`);
    console.log(`   Lisibilit√©: ${compressedFile.summary.quality.readability}`);

    console.log('\n‚ö†Ô∏è Risques identifi√©s:');
    compressedFile.summary.risks.forEach(risk => {
      console.log(`   - ${risk}`);
    });

    console.log('\nüí° Recommandations:');
    compressedFile.summary.recommendations.forEach(rec => {
      console.log(`   - ${rec}`);
    });

    console.log('\nüóúÔ∏è Informations de compression:');
    console.log(`   Algorithme: ${compressedFile.compression.algorithm}`);
    console.log(`   Niveau: ${compressedFile.compression.compressionLevel}/10`);
    console.log(`   Taille originale: ${compressedFile.compression.originalSize} caract√®res`);
    console.log(`   Taille compress√©e: ${compressedFile.compression.compressedSize} caract√®res`);
    console.log(`   Temps: ${compressedFile.compression.compressionTime}ms`);
    console.log(`   Appels LLM: ${compressedFile.compression.llmCalls}`);

    console.log('\nüîÑ Instructions de d√©compression:');
    compressedFile.decompression.instructions.forEach(instruction => {
      console.log(`   - ${instruction}`);
    });

    console.log('\nüìã Scopes compress√©s:');
    compressedFile.scopes.forEach((scope, index) => {
      console.log(`   ${index + 1}. ${scope.type} ${scope.name}`);
      console.log(`      ID: ${scope.id}`);
      console.log(`      Complexit√©: ${scope.complexity}`);
      console.log(`      Position: ${scope.position.startLine}-${scope.position.endLine} (${scope.position.relativeSize}%)`);
      console.log(`      Tags: ${scope.tags.join(', ')}`);
      console.log(`      D√©pendances: ${scope.keyDependencies.length}`);
      console.log(`      Risques: ${scope.risks.length}`);
      console.log(`      Tests: ${scope.testIdeas.length}`);
    });

    // Sauvegarder les r√©sultats
    console.log('\nüíæ Sauvegarde des r√©sultats...');
    const savedPath = await fileCompressor.saveCompressedFile(compressedFile);
    console.log(`‚úÖ Fichier compress√© sauvegard√©: ${savedPath}`);

    // Nettoyer le fichier de test
    fs.unlinkSync(testFilePath);
    console.log('üßπ Fichier de test supprim√©');

    console.log('\nüéâ Test rapide du FileCompressor r√©ussi !');
    console.log('========================================');
    console.log('‚úÖ Analyse de fichier fonctionne');
    console.log('‚úÖ Compression de fichier fonctionne');
    console.log('‚úÖ G√©n√©ration de m√©tadonn√©es fonctionne');
    console.log('‚úÖ Sauvegarde des r√©sultats fonctionne');

    return compressedFile;

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

// Ex√©cuter le test si ce fichier est appel√© directement
if (require.main === module) {
  testFileCompressorQuick().catch(console.error);
}

export { testFileCompressorQuick };