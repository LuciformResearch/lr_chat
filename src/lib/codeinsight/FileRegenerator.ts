/**
 * FileRegenerator - R√©g√©n√©ration de fichiers TypeScript complets
 * 
 * Prend les donn√©es compress√©es et r√©g√©n√®re le code TypeScript complet
 * avec validation et v√©rification de la qualit√©
 */

import { CompressedFile } from './FileCompressor';
import { loadShadeosEnv } from '../utils/SecureEnvManager';
import * as fs from 'fs';
import * as path from 'path';

// Charger les variables d'environnement
loadShadeosEnv({ override: true });

export interface RegenerationResult {
  success: boolean;
  regeneratedCode: string;
  originalCode?: string;
  validation: ValidationResult;
  metadata: RegenerationMetadata;
  errors: string[];
  warnings: string[];
}

export interface ValidationResult {
  syntaxValid: boolean;
  typeValid: boolean;
  compilationValid: boolean;
  structureValid: boolean;
  importsValid: boolean;
  exportsValid: boolean;
  overallScore: number; // 0-100
}

export interface RegenerationMetadata {
  originalPath: string;
  regeneratedAt: string;
  regenerationTime: number;
  originalLines: number;
  regeneratedLines: number;
  originalScopes: number;
  regeneratedScopes: number;
  compressionRatio: number;
  fidelityScore: number; // 0-100
  qualityScore: number; // 0-100
}

export class FileRegenerator {
  private useRealLLM: boolean;
  private llmCalls: number;

  constructor() {
    this.useRealLLM = !!process.env.GEMINI_API_KEY;
    this.llmCalls = 0;
    
    console.log('üîÑ FileRegenerator initialis√©');
    console.log(`üß† Mode LLM: ${this.useRealLLM ? 'Vrais appels LLM' : 'Mode heuristique'}`);
  }

  /**
   * R√©g√©n√®re un fichier complet √† partir des donn√©es compress√©es
   */
  async regenerateFile(compressedFile: CompressedFile): Promise<RegenerationResult> {
    const startTime = Date.now();
    console.log(`üîÑ R√©g√©n√©ration du fichier: ${compressedFile.metadata.fileName}`);

    try {
      // 1. G√©n√©rer le code TypeScript
      console.log('üìù G√©n√©ration du code TypeScript...');
      const regeneratedCode = await this.generateTypeScriptCode(compressedFile);
      console.log(`‚úÖ Code g√©n√©r√©: ${regeneratedCode.split('\n').length} lignes`);

      // 2. Valider le code g√©n√©r√©
      console.log('üîç Validation du code...');
      const validation = await this.validateGeneratedCode(regeneratedCode, compressedFile);
      console.log(`‚úÖ Validation termin√©e: Score ${validation.overallScore}/100`);

      // 3. Calculer les m√©tadonn√©es
      const endTime = Date.now();
      const regenerationTime = endTime - startTime;
      const metadata = this.calculateRegenerationMetadata(compressedFile, regeneratedCode, regenerationTime);

      // 4. D√©terminer le succ√®s
      const success = validation.overallScore >= 70; // Seuil de succ√®s
      const errors: string[] = [];
      const warnings: string[] = [];

      if (!validation.syntaxValid) {
        errors.push('Erreurs de syntaxe d√©tect√©es');
      }
      if (!validation.typeValid) {
        errors.push('Erreurs de types d√©tect√©es');
      }
      if (!validation.compilationValid) {
        errors.push('Erreurs de compilation d√©tect√©es');
      }
      if (validation.overallScore < 90) {
        warnings.push('Qualit√© du code r√©g√©n√©r√© peut √™tre am√©lior√©e');
      }

      console.log(`‚úÖ R√©g√©n√©ration termin√©e: ${success ? 'SUCC√àS' : '√âCHEC'}`);
      console.log(`   Score: ${validation.overallScore}/100`);
      console.log(`   Erreurs: ${errors.length}`);
      console.log(`   Avertissements: ${warnings.length}`);

      return {
        success,
        regeneratedCode,
        validation,
        metadata,
        errors,
        warnings
      };

    } catch (error) {
      console.error(`‚ùå Erreur r√©g√©n√©ration fichier ${compressedFile.metadata.fileName}:`, error);
      
      const endTime = Date.now();
      const regenerationTime = endTime - startTime;
      
      return {
        success: false,
        regeneratedCode: '',
        validation: {
          syntaxValid: false,
          typeValid: false,
          compilationValid: false,
          structureValid: false,
          importsValid: false,
          exportsValid: false,
          overallScore: 0
        },
        metadata: {
          originalPath: compressedFile.metadata.originalPath,
          regeneratedAt: new Date().toLocaleString('fr-FR', { timeZone: 'Europe/Paris' }),
          regenerationTime,
          originalLines: compressedFile.metadata.totalLines,
          regeneratedLines: 0,
          originalScopes: compressedFile.metadata.totalScopes,
          regeneratedScopes: 0,
          compressionRatio: compressedFile.metadata.compressionRatio,
          fidelityScore: 0,
          qualityScore: 0
        },
        errors: [error.toString()],
        warnings: []
      };
    }
  }

  /**
   * G√©n√®re le code TypeScript √† partir des donn√©es compress√©es
   */
  private async generateTypeScriptCode(compressedFile: CompressedFile): Promise<string> {
    if (!this.useRealLLM) {
      throw new Error('‚ùå GEMINI_API_KEY manquante - Le FileRegenerator n√©cessite un appel LLM pour la r√©g√©n√©ration');
    }

    // Mode LLM obligatoire
    const regenerationPrompt = this.buildRegenerationPrompt(compressedFile);
    
    try {
      console.log('üß† Appel LLM pour r√©g√©n√©ration...');
      const response = await this.callLLM(regenerationPrompt);
      this.llmCalls++;

      console.log('üîç Parsing de la r√©ponse de r√©g√©n√©ration...');
      const regeneratedCode = this.parseRegenerationResponse(response);
      
      console.log(`‚úÖ Code r√©g√©n√©r√©: ${regeneratedCode.split('\n').length} lignes`);
      return regeneratedCode;

    } catch (error) {
      console.error('‚ùå Erreur r√©g√©n√©ration LLM:', error);
      throw new Error(`√âchec de la r√©g√©n√©ration LLM: ${error}`);
    }
  }

  /**
   * Construit le prompt pour la r√©g√©n√©ration
   */
  private buildRegenerationPrompt(compressedFile: CompressedFile): string {
    const { metadata, summary, scopes, decompression } = compressedFile;

    const scopesInfo = scopes.map(scope => {
      return `### ${scope.type.toUpperCase()} ${scope.name}
- **But:** ${scope.purpose}
- **Signature:** ${scope.signature}
- **Complexit√©:** ${scope.complexity}
- **Position:** Lignes ${scope.position.startLine}-${scope.position.endLine}
- **Tags:** ${scope.tags.join(', ')}
- **D√©pendances:** ${scope.keyDependencies.join(', ')}
- **Risques identifi√©s:** ${scope.risks.join('; ')}
- **Tests sugg√©r√©s:** ${scope.testIdeas.join('; ')}
- **Am√©liorations sugg√©r√©es:** ${scope.improvements?.join('; ') || 'Aucune'}`;
    }).join('\n\n');

    return `Tu es un expert en g√©n√©ration de code TypeScript. R√©g√©n√®re le fichier complet √† partir des donn√©es compress√©es et AM√âLIORE-LE selon l'analyse initiale.

M√âTADONN√âES:
- **Fichier:** ${metadata.fileName}
- **Type:** ${metadata.fileType}
- **Architecture:** ${summary.architecture}
- **But global:** ${summary.purpose}
- **Patterns:** ${summary.mainPatterns.join(', ')}
- **D√©pendances cl√©s:** ${summary.keyDependencies.join(', ')}

SCOPES √Ä R√âG√âN√âRER ET AM√âLIORER:
${scopesInfo}

INSTRUCTIONS DE D√âCOMPRESSION:
${decompression.instructions.map(inst => `- ${inst}`).join('\n')}

CONTEXTE REQUIS:
${decompression.requiredContext.map(ctx => `- ${ctx}`).join('\n')}

CONSEILS DE R√âG√âN√âRATION:
${decompression.regenerationHints.map(hint => `- ${hint}`).join('\n')}

R√àGLES DE QUALIT√â:
${decompression.qualityChecks.map(check => `- ${check}`).join('\n')}

R√àGLES DE VALIDATION:
${decompression.validationRules.map(rule => `- ${rule}`).join('\n')}

AM√âLIORATIONS √Ä APPLIQUER:
- Corriger les risques identifi√©s dans l'analyse
- Ajouter la gestion d'erreurs manquante
- Am√©liorer la validation des donn√©es
- Optimiser les performances si n√©cessaire
- Ajouter la documentation manquante
- Corriger les types et signatures
- Am√©liorer la lisibilit√© du code

G√âN√àRE le code TypeScript complet en respectant:
1. La structure et l'architecture originales
2. Les signatures et types des scopes
3. Les relations entre les composants
4. Les patterns architecturaux identifi√©s
5. Les bonnes pratiques TypeScript
6. La documentation et les commentaires
7. Les imports et exports n√©cessaires
8. LES AM√âLIORATIONS SUGG√âR√âES PAR L'ANALYSE

R√àGLES D'EXPORT OBLIGATOIRES:
- TOUTES les interfaces doivent √™tre export√©es avec "export interface"
- TOUTES les classes doivent √™tre export√©es avec "export class"
- TOUTES les fonctions doivent √™tre export√©es avec "export function"
- TOUTES les types doivent √™tre export√©s avec "export type"
- TOUTES les enums doivent √™tre export√©s avec "export enum"

R√©ponds UNIQUEMENT avec le code TypeScript complet, sans explications ni commentaires suppl√©mentaires.`;
  }

  /**
   * Appelle le LLM pour la r√©g√©n√©ration
   */
  private async callLLM(prompt: string): Promise<string> {
    // Simuler l'appel LLM (√† remplacer par l'impl√©mentation r√©elle)
    const { GoogleGenerativeAI } = await import('@google/generative-ai');
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    
    const result = await model.generateContent(prompt);
    return result.response.text();
  }

  /**
   * Parse la r√©ponse de r√©g√©n√©ration
   */
  private parseRegenerationResponse(response: string): string {
    // Nettoyer la r√©ponse
    let cleanCode = response.trim();
    
    // Supprimer les markdown fences si pr√©sents
    cleanCode = cleanCode.replace(/```typescript\n?/g, '').replace(/```\n?/g, '');
    
    // Supprimer les commentaires d'explication
    const lines = cleanCode.split('\n');
    const codeLines = lines.filter(line => {
      // Garder les lignes qui commencent par du code TypeScript
      return line.trim().length > 0 && 
             !line.trim().startsWith('Voici le code') &&
             !line.trim().startsWith('Le code g√©n√©r√©') &&
             !line.trim().startsWith('Code TypeScript');
    });
    
    return codeLines.join('\n');
  }

  /**
   * G√©n√®re le code de mani√®re heuristique
   */
  private generateCodeHeuristically(compressedFile: CompressedFile): string {
    const { metadata, summary, scopes } = compressedFile;
    
    let code = `// Fichier r√©g√©n√©r√©: ${metadata.fileName}
// Architecture: ${summary.architecture}
// But: ${summary.purpose}

`;

    // Analyser les d√©pendances n√©cessaires
    const requiredImports = this.analyzeRequiredImports(scopes, summary);
    
    // Ajouter les imports
    if (requiredImports.length > 0) {
      code += `// Imports
${requiredImports.map(imp => `import ${imp};`).join('\n')}

`;
    }

    // G√©n√©rer chaque scope
    for (const scope of scopes) {
      code += this.generateScopeCode(scope);
      code += '\n\n';
    }

    return code;
  }

  /**
   * Analyse les imports n√©cessaires
   */
  private analyzeRequiredImports(scopes: any[], summary: any): string[] {
    const imports: string[] = [];
    
    // V√©rifier si on a des classes avec @Injectable
    const hasInjectableClass = scopes.some(scope => 
      scope.type === 'class' && scope.tags.some((tag: string) => tag.includes('service'))
    );
    
    if (hasInjectableClass) {
      imports.push("{ Injectable } from '@angular/core'");
    }
    
    // V√©rifier si on a des classes avec HttpClient
    const hasHttpClient = scopes.some(scope => 
      scope.type === 'class' && scope.keyDependencies.some((dep: string) => dep.includes('Http'))
    );
    
    if (hasHttpClient) {
      imports.push("{ HttpClient } from '@angular/common/http'");
    }
    
    // V√©rifier si on a des Observables
    const hasObservables = scopes.some(scope => 
      scope.signature.includes('Observable') || 
      scope.keyDependencies.some((dep: string) => dep.includes('Observable'))
    );
    
    if (hasObservables) {
      imports.push("{ Observable } from 'rxjs'");
    }
    
    // V√©rifier si on a des composants
    const hasComponents = scopes.some(scope => 
      scope.type === 'class' && scope.tags.some((tag: string) => tag.includes('component'))
    );
    
    if (hasComponents) {
      imports.push("{ Component } from '@angular/core'");
    }
    
    return imports;
  }

  /**
   * G√©n√®re le code pour un scope individuel
   */
  private generateScopeCode(scope: any): string {
    let code = '';

    // Commentaire de documentation
    code += `/**
 * ${scope.purpose}
 */\n`;

    // G√©n√©rer selon le type
    switch (scope.type) {
      case 'interface':
        code += this.generateInterfaceCode(scope);
        break;
      case 'class':
        code += this.generateClassCode(scope);
        break;
      case 'function':
        code += this.generateFunctionCode(scope);
        break;
      case 'method':
        code += this.generateMethodCode(scope);
        break;
      default:
        code += `// ${scope.type} ${scope.name} - Non impl√©ment√©\n`;
    }

    return code;
  }

  /**
   * G√©n√®re le code pour une interface
   */
  private generateInterfaceCode(scope: any): string {
    let code = `export interface ${scope.name} {\n`;
    
    // G√©n√©rer les propri√©t√©s basiques selon le nom et les tags
    if (scope.name.includes('Data') || scope.name.includes('User') || scope.tags.includes('data')) {
      code += `  id: number;\n`;
      code += `  name: string;\n`;
    }
    
    if (scope.name.includes('User') || scope.tags.includes('user')) {
      code += `  email: string;\n`;
      code += `  isActive?: boolean;\n`;
      code += `  roles: string[];\n`;
      code += `  lastLogin?: Date;\n`;
      code += `  preferences: UserPreferences;\n`;
    }
    
    if (scope.name.includes('Preferences') || scope.tags.includes('preferences')) {
      code += `  theme: 'light' | 'dark';\n`;
      code += `  language: string;\n`;
      code += `  notifications: boolean;\n`;
      code += `  timezone: string;\n`;
    }
    
    if (scope.name.includes('Search') || scope.name.includes('Params') || scope.tags.includes('search')) {
      code += `  query: string;\n`;
      code += `  limit?: number;\n`;
      code += `  offset?: number;\n`;
      code += `  filters: SearchFilters;\n`;
      code += `  sortBy?: string;\n`;
      code += `  sortOrder?: 'asc' | 'desc';\n`;
    }
    
    if (scope.name.includes('Filters') || scope.tags.includes('filters')) {
      code += `  isActive?: boolean;\n`;
      code += `  roles?: string[];\n`;
      code += `  dateRange?: {\n`;
      code += `    start: Date;\n`;
      code += `    end: Date;\n`;
      code += `  };\n`;
    }
    
    // Propri√©t√©s g√©n√©riques pour les interfaces simples
    if (scope.name.includes('Simple') || scope.tags.includes('simple')) {
      code += `  id: number;\n`;
      code += `  name: string;\n`;
    }
    
    code += `}\n`;
    return code;
  }

  /**
   * G√©n√®re le code pour une classe
   */
  private generateClassCode(scope: any): string {
    let code = '';
    
    // Ajouter le d√©corateur si c'est un service
    if (scope.name.includes('Service') || scope.tags.includes('service')) {
      code += `@Injectable({\n`;
      code += `  providedIn: 'root'\n`;
      code += `})\n`;
    }
    
    code += `export class ${scope.name} {\n`;
    
    // Propri√©t√©s de classe
    if (scope.name.includes('Service') || scope.tags.includes('service')) {
      code += `  private apiUrl = 'https://api.example.com/${scope.name.toLowerCase().replace('service', '')}s';\n\n`;
    }
    
    // Constructeur
    if (scope.keyDependencies.some((dep: string) => dep.includes('Http'))) {
      code += `  constructor(private http: HttpClient) {}\n\n`;
    } else {
      code += `  constructor() {}\n\n`;
    }
    
    // M√©thodes basiques selon le type de classe
    if (scope.name.includes('Service') || scope.tags.includes('service')) {
      code += `  getItems(): Observable<any[]> {\n`;
      code += `    return this.http.get<any[]>(this.apiUrl);\n`;
      code += `  }\n\n`;
      
      code += `  getItemById(id: number): Observable<any> {\n`;
      code += `    return this.http.get<any>(\`\${this.apiUrl}/\${id}\`);\n`;
      code += `  }\n\n`;
      
      code += `  createItem(item: any): Observable<any> {\n`;
      code += `    return this.http.post<any>(this.apiUrl, item);\n`;
      code += `  }\n`;
    } else if (scope.name.includes('Simple') || scope.tags.includes('simple')) {
      // Classe simple sans HTTP
      code += `  getData(): any {\n`;
      code += `    return { id: 1, name: 'test' };\n`;
      code += `  }\n`;
    }
    
    code += `}\n`;
    return code;
  }

  /**
   * G√©n√®re le code pour une fonction
   */
  private generateFunctionCode(scope: any): string {
    let code = `export function ${scope.name}(`;
    
    // Param√®tres basiques selon le nom et les tags
    if (scope.name.includes('format') || scope.tags.includes('formatting')) {
      code += `data: any, includeEmail = false`;
    } else if (scope.name.includes('isValid') || scope.tags.includes('validation')) {
      code += `value: string`;
    } else if (scope.name.includes('process') || scope.tags.includes('processing')) {
      code += `items: any[], filters: any, sortOptions?: { field: string; order: 'asc' | 'desc' }`;
    } else if (scope.name.includes('generate') || scope.tags.includes('statistics')) {
      code += `users: any[]`;
    } else {
      code += `...args: any[]`;
    }
    
    code += `): `;
    
    // Type de retour
    if (scope.name.includes('format') || scope.tags.includes('formatting')) {
      code += `string`;
    } else if (scope.name.includes('isValid') || scope.tags.includes('validation')) {
      code += `boolean`;
    } else if (scope.name.includes('process') || scope.tags.includes('processing')) {
      code += `any[]`;
    } else if (scope.name.includes('generate') || scope.tags.includes('statistics')) {
      code += `{ total: number; active: number; inactive: number; byRole: Record<string, number>; byTheme: Record<string, number> }`;
    } else {
      code += `any`;
    }
    
    code += ` {\n`;
    
    // Corps de la fonction
    if (scope.name.includes('format') || scope.tags.includes('formatting')) {
      code += `  const baseName = \`\${data.name} (\${data.id})\`;\n`;
      code += `  return includeEmail ? \`\${baseName} - \${data.email}\` : baseName;\n`;
    } else if (scope.name.includes('isValid') || scope.tags.includes('validation')) {
      code += `  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n`;
      code += `  return regex.test(value);\n`;
    } else if (scope.name.includes('process') || scope.tags.includes('processing')) {
      code += `  let processedItems = [...items];\n`;
      code += `  \n`;
      code += `  if (filters.isActive !== undefined) {\n`;
      code += `    processedItems = processedItems.filter(item => item.isActive === filters.isActive);\n`;
      code += `  }\n`;
      code += `  \n`;
      code += `  if (filters.roles?.length) {\n`;
      code += `    processedItems = processedItems.filter(item => \n`;
      code += `      item.roles.some(role => filters.roles.includes(role))\n`;
      code += `    );\n`;
      code += `  }\n`;
      code += `  \n`;
      code += `  if (sortOptions) {\n`;
      code += `    processedItems.sort((a, b) => {\n`;
      code += `      const aValue = a[sortOptions.field];\n`;
      code += `      const bValue = b[sortOptions.field];\n`;
      code += `      if (aValue < bValue) return sortOptions.order === 'asc' ? -1 : 1;\n`;
      code += `      if (aValue > bValue) return sortOptions.order === 'asc' ? 1 : -1;\n`;
      code += `      return 0;\n`;
      code += `    });\n`;
      code += `  }\n`;
      code += `  \n`;
      code += `  return processedItems;\n`;
    } else if (scope.name.includes('generate') || scope.tags.includes('statistics')) {
      code += `  const stats = {\n`;
      code += `    total: users.length,\n`;
      code += `    active: users.filter(u => u.isActive).length,\n`;
      code += `    inactive: users.filter(u => !u.isActive).length,\n`;
      code += `    byRole: {} as Record<string, number>,\n`;
      code += `    byTheme: {} as Record<string, number>\n`;
      code += `  };\n`;
      code += `  \n`;
      code += `  users.forEach(user => {\n`;
      code += `    user.roles.forEach(role => {\n`;
      code += `      stats.byRole[role] = (stats.byRole[role] || 0) + 1;\n`;
      code += `    });\n`;
      code += `    const theme = user.preferences.theme;\n`;
      code += `    stats.byTheme[theme] = (stats.byTheme[theme] || 0) + 1;\n`;
      code += `  });\n`;
      code += `  \n`;
      code += `  return stats;\n`;
    } else {
      code += `  // Impl√©mentation basique\n`;
      code += `  return null;\n`;
    }
    
    code += `}\n`;
    return code;
  }

  /**
   * G√©n√®re le code pour une m√©thode
   */
  private generateMethodCode(scope: any): string {
    let code = `  ${scope.name}(`;
    
    // Param√®tres basiques
    if (scope.name.includes('get') && scope.name.includes('ById')) {
      code += `id: number`;
    } else if (scope.name.includes('create')) {
      code += `item: any`;
    } else if (scope.name.includes('search')) {
      code += `params: any`;
    } else {
      code += `...args: any[]`;
    }
    
    code += `): `;
    
    // Type de retour
    if (scope.name.includes('get') || scope.name.includes('create')) {
      code += `Observable<any>`;
    } else if (scope.name.includes('search')) {
      code += `Observable<any[]>`;
    } else {
      code += `any`;
    }
    
    code += ` {\n`;
    
    // Corps de la m√©thode
    if (scope.name.includes('get') && scope.name.includes('ById')) {
      code += `    return this.http.get<any>(\`\${this.apiUrl}/\${id}\`);\n`;
    } else if (scope.name.includes('create')) {
      code += `    return this.http.post<any>(this.apiUrl, item);\n`;
    } else if (scope.name.includes('search')) {
      code += `    const queryParams = new URLSearchParams();\n`;
      code += `    queryParams.set('q', params.query);\n`;
      code += `    return this.http.get<any[]>(\`\${this.apiUrl}/search?\${queryParams.toString()}\`);\n`;
    } else {
      code += `    // Impl√©mentation basique\n`;
      code += `    return null;\n`;
    }
    
    code += `  }\n`;
    return code;
  }

  /**
   * Valide le code g√©n√©r√©
   */
  private async validateGeneratedCode(code: string, compressedFile: CompressedFile): Promise<ValidationResult> {
    const validation: ValidationResult = {
      syntaxValid: false,
      typeValid: false,
      compilationValid: false,
      structureValid: false,
      importsValid: false,
      exportsValid: false,
      overallScore: 0
    };

    try {
      // 1. Validation de syntaxe basique
      validation.syntaxValid = this.validateSyntax(code);
      
      // 2. Validation de structure
      validation.structureValid = this.validateStructure(code, compressedFile);
      
      // 3. Validation des imports
      validation.importsValid = this.validateImports(code, compressedFile);
      
      // 4. Validation des exports
      validation.exportsValid = this.validateExports(code, compressedFile);
      
      // 5. Validation des types (simulation)
      validation.typeValid = this.validateTypes(code);
      
      // 6. Validation de compilation (simulation)
      validation.compilationValid = this.validateCompilation(code);
      
      // 7. Calcul du score global
      const scores = [
        validation.syntaxValid ? 20 : 0,
        validation.structureValid ? 20 : 0,
        validation.importsValid ? 15 : 0,
        validation.exportsValid ? 15 : 0,
        validation.typeValid ? 15 : 0,
        validation.compilationValid ? 15 : 0
      ];
      
      validation.overallScore = scores.reduce((sum, score) => sum + score, 0);
      
    } catch (error) {
      console.error('‚ùå Erreur validation:', error);
    }

    return validation;
  }

  /**
   * Valide la syntaxe du code
   */
  private validateSyntax(code: string): boolean {
    try {
      // V√©rifications basiques de syntaxe
      const lines = code.split('\n');
      
      // V√©rifier les accolades √©quilibr√©es
      let braceCount = 0;
      let parenCount = 0;
      let bracketCount = 0;
      
      for (const line of lines) {
        for (const char of line) {
          if (char === '{') braceCount++;
          if (char === '}') braceCount--;
          if (char === '(') parenCount++;
          if (char === ')') parenCount--;
          if (char === '[') bracketCount++;
          if (char === ']') bracketCount--;
        }
      }
      
      return braceCount === 0 && parenCount === 0 && bracketCount === 0;
      
    } catch (error) {
      return false;
    }
  }

  /**
   * Valide la structure du code
   */
  private validateStructure(code: string, compressedFile: CompressedFile): boolean {
    try {
      // V√©rifier que tous les scopes sont pr√©sents
      for (const scope of compressedFile.scopes) {
        if (!code.includes(scope.name)) {
          return false;
        }
      }
      
      return true;
      
    } catch (error) {
      return false;
    }
  }

  /**
   * Valide les imports
   */
  private validateImports(code: string, compressedFile: CompressedFile): boolean {
    try {
      // V√©rifier que les imports n√©cessaires sont pr√©sents
      const hasInjectable = compressedFile.scopes.some(scope => 
        scope.type === 'class' && scope.tags.includes('service')
      );
      
      if (hasInjectable && !code.includes("from '@angular/core'")) {
        return false;
      }
      
      const hasHttpClient = compressedFile.scopes.some(scope => 
        scope.type === 'class' && scope.keyDependencies.some((dep: string) => dep.includes('Http'))
      );
      
      if (hasHttpClient && !code.includes("from '@angular/common/http'")) {
        return false;
      }
      
      const hasObservables = compressedFile.scopes.some(scope => 
        scope.signature.includes('Observable')
      );
      
      if (hasObservables && !code.includes("from 'rxjs'")) {
        return false;
      }
      
      return true;
      
    } catch (error) {
      return false;
    }
  }

  /**
   * Valide les exports
   */
  private validateExports(code: string, compressedFile: CompressedFile): boolean {
    try {
      // V√©rifier que les scopes publics sont export√©s
      for (const scope of compressedFile.scopes) {
        if (scope.type === 'interface' || scope.type === 'class' || scope.type === 'function') {
          // V√©rifier que le scope est export√©
          if (!code.includes(`export ${scope.type} ${scope.name}`) && 
              !code.includes(`export interface ${scope.name}`) &&
              !code.includes(`export class ${scope.name}`) &&
              !code.includes(`export function ${scope.name}`)) {
            return false;
          }
        }
      }
      
      return true;
      
    } catch (error) {
      return false;
    }
  }

  /**
   * Valide les types (simulation)
   */
  private validateTypes(code: string): boolean {
    try {
      // V√©rifications basiques de types
      return code.includes(':') && code.includes('string') && code.includes('number');
      
    } catch (error) {
      return false;
    }
  }

  /**
   * Valide la compilation (simulation)
   */
  private validateCompilation(code: string): boolean {
    try {
      // V√©rifications basiques de compilation
      return code.length > 100 && code.includes('export');
      
    } catch (error) {
      return false;
    }
  }

  /**
   * Calcule les m√©tadonn√©es de r√©g√©n√©ration
   */
  private calculateRegenerationMetadata(
    compressedFile: CompressedFile, 
    regeneratedCode: string, 
    regenerationTime: number
  ): RegenerationMetadata {
    const regeneratedLines = regeneratedCode.split('\n').length;
    const regeneratedScopes = compressedFile.scopes.length;
    
    // Calculer le score de fid√©lit√© (simulation)
    const fidelityScore = Math.min(100, (regeneratedScopes / compressedFile.metadata.totalScopes) * 100);
    
    // Calculer le score de qualit√© (simulation)
    const qualityScore = Math.min(100, (regeneratedLines / compressedFile.metadata.totalLines) * 100);

    return {
      originalPath: compressedFile.metadata.originalPath,
      regeneratedAt: new Date().toLocaleString('fr-FR', { timeZone: 'Europe/Paris' }),
      regenerationTime,
      originalLines: compressedFile.metadata.totalLines,
      regeneratedLines,
      originalScopes: compressedFile.metadata.totalScopes,
      regeneratedScopes,
      compressionRatio: compressedFile.metadata.compressionRatio,
      fidelityScore: Math.round(fidelityScore * 10) / 10,
      qualityScore: Math.round(qualityScore * 10) / 10
    };
  }

  /**
   * Sauvegarde le fichier r√©g√©n√©r√©
   */
  async saveRegeneratedFile(
    result: RegenerationResult, 
    outputDir?: string
  ): Promise<string> {
    const timestamp = new Date().toLocaleString('fr-FR', { 
      timeZone: 'Europe/Paris',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    }).replace(/[\/\s:]/g, '-');
    const fileName = path.basename(result.metadata.originalPath, path.extname(result.metadata.originalPath));
    const defaultOutputDir = path.join(process.cwd(), 'artefacts', 'Reports', 'CodeInsight', 'regenerated_files');
    const finalOutputDir = outputDir || defaultOutputDir;

    // Cr√©er le dossier
    if (!fs.existsSync(finalOutputDir)) {
      fs.mkdirSync(finalOutputDir, { recursive: true });
    }

    // Sauvegarder le fichier TypeScript r√©g√©n√©r√©
    const tsPath = path.join(finalOutputDir, `${fileName}_regenerated_${timestamp}.ts`);
    fs.writeFileSync(tsPath, result.regeneratedCode, 'utf-8');

    // Sauvegarder le rapport de r√©g√©n√©ration
    const reportPath = path.join(finalOutputDir, `${fileName}_regeneration_report_${timestamp}.json`);
    fs.writeFileSync(reportPath, JSON.stringify(result, null, 2), 'utf-8');

    console.log(`üìÑ Fichier r√©g√©n√©r√© sauvegard√©:`);
    console.log(`   TypeScript: ${tsPath}`);
    console.log(`   Rapport: ${reportPath}`);

    return tsPath;
  }
}