/**
 * API Route pour l'orchestrateur divin
 * G√®re la cr√©ation du pool DB c√¥t√© serveur et l'orchestration
 */

import { NextRequest, NextResponse } from 'next/server';
import { Pool } from 'pg';
import { ServerOrchestrator } from '@/lib/agents/ServerOrchestrator';
import { withAuth, AuthContext } from '@/lib/auth/middleware';
import { db } from '@/lib/db';
import { EncryptionService } from '@/lib/encryption/EncryptionService';
import { api_keys } from '@/lib/db/schema';
import { eq } from 'drizzle-orm';

export const POST = withAuth(async (request: NextRequest) => {
  try {
    const body = await request.json();
    const { userMessage, userIdentityId, userName, conversationHistory, currentSession, debugMode, disableArchivist, archivistVerbose } = body;

    if (!userMessage || !userIdentityId || !userName) {
      return NextResponse.json(
        { error: 'Param√®tres manquants' },
        { status: 400 }
      );
    }

    // R√©cup√©rer l'utilisateur authentifi√© depuis le middleware
    const authUser = AuthContext.getUser(request);
    if (!authUser) {
      return NextResponse.json(
        { error: 'Utilisateur non authentifi√©' },
        { status: 401 }
      );
    }

    console.log(`ü¶ã Orchestrateur c√¥t√© serveur pour: ${userName} (AuthUser: ${authUser.id})`);

    // Cr√©er le pool de base de donn√©es c√¥t√© serveur (Neon via DATABASE_URL)
    let dbPool: Pool | null = null;
    try {
      if (!process.env.DATABASE_URL) {
        throw new Error('DATABASE_URL manquant');
      }
      dbPool = new Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: { rejectUnauthorized: false },
      });
      console.log('üóÑÔ∏è Pool de base de donn√©es (Neon) cr√©√© via DATABASE_URL');
    } catch (dbError) {
      console.warn('‚ö†Ô∏è Erreur cr√©ation pool DB (DATABASE_URL):', dbError);
      console.warn('‚ö†Ô∏è Archiviste fonctionnera en mode fallback');
    }

    // Charger les cl√©s API depuis PostgreSQL c√¥t√© serveur (utilisateur authentifi√©)
    if (!dbPool) {
      return NextResponse.json(
        { error: 'Base de donn√©es non disponible' },
        { status: 500 }
      );
    }
    
    // Utiliser Drizzle ORM comme Algareth pour la coh√©rence
    const apiKeysResult = await db.select().from(api_keys)
      .where(eq(api_keys.userId, authUser.id));
    
    const apiKeys: Record<string, string> = {};
    apiKeysResult.forEach(key => {
      if (key.isActive) {
        try {
          // D√©chiffrer la cl√© API avant de l'utiliser
          const decryptedKey = EncryptionService.decrypt(key.apiKey);
          apiKeys[key.provider] = decryptedKey;
          console.log(`üîì [ORCHESTRATOR] Cl√© ${key.provider} d√©chiffr√©e avec succ√®s`);
        } catch (error) {
          console.error(`‚ùå [ORCHESTRATOR] Erreur d√©chiffrement cl√© ${key.provider}:`, error);
          // Ignorer les cl√©s corrompues
        }
      }
    });

    console.log('üîë Cl√©s API charg√©es c√¥t√© serveur:', Object.keys(apiKeys));

    // V√©rifier la configuration du provider (utiliser Gemini par d√©faut)
    const providerName = 'gemini';
    const geminiApiKey = apiKeys[providerName];
    
    if (!geminiApiKey) {
      console.warn('‚ö†Ô∏è Aucune cl√© API Gemini trouv√©e pour l\'utilisateur authentifi√©');
      return NextResponse.json(
        { 
          error: 'Cl√© API Gemini non configur√©e pour cet utilisateur',
          suggestion: 'Veuillez configurer votre cl√© API Gemini dans les param√®tres'
        },
        { status: 400 }
      );
    }

    // Configurer la cl√© API dans l'environnement AVANT d'initialiser l'orchestrateur
    process.env.GEMINI_API_KEY = geminiApiKey;
    console.log('üîë Cl√© API Gemini configur√©e dans l\'environnement');
    
    // Activer le mode debug si demand√©
    if (debugMode) {
      process.env.ORCHESTRATOR_DEBUG_MODE = 'true';
      console.log('üîß Mode debug activ√© pour cette requ√™te');
    }

    // D√©terminer le nom de la persona assistant √† partir de l'identit√© s√©lectionn√©e
    const selectedIdentity = AuthContext.getSelectedIdentity(request);
    const basePersona = selectedIdentity?.chat_persona_config?.base_persona || selectedIdentity?.persona || 'algareth';
    const assistantName = basePersona.charAt(0).toUpperCase() + basePersona.slice(1);

    // Cr√©er l'orchestrateur avec le pool DB et le mode debug
    const orchestrator = new ServerOrchestrator(geminiApiKey, dbPool, debugMode);
    await orchestrator.initializeServants(geminiApiKey);

    // Effectuer l'orchestration
    const context = {
      userMessage,
      userIdentityId,
      userName,
      conversationHistory: conversationHistory || [],
      currentSession: currentSession || 'default',
      assistantName,
      authUserId: authUser.id,
      disableArchivist: !!disableArchivist,
      archivistVerbose: archivistVerbose || process.env.ARCHIVIST_VERBOSE || 'none'
    };

    const divineMurmurs = await orchestrator.orchestrate(context);

    // Fermer le pool DB
    if (dbPool) {
      await dbPool.end();
    }

    return NextResponse.json({
      success: true,
      divineMurmurs,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur orchestration:', error);
    return NextResponse.json(
      { 
        error: 'Erreur lors de l\'orchestration',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    );
  }
});
