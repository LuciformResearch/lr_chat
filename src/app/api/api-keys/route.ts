import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db/index';
import { api_keys } from '@/lib/db/schema';
import { eq, and } from 'drizzle-orm';
import { withAuth, AuthContext } from '@/lib/auth/middleware';
import { EncryptionService } from '@/lib/encryption/EncryptionService';

/**
 * GET /api/api-keys
 * R√©cup√®re les cl√©s API pour l'utilisateur authentifi√©
 * Query Params: ?provider=<provider>
 * Protected by authentication middleware.
 */
export const GET = withAuth(async (request: NextRequest) => {
  const { searchParams } = new URL(request.url);
  const provider = searchParams.get('provider');

  try {
    // R√©cup√©rer l'utilisateur authentifi√© depuis le middleware
    const authUser = AuthContext.getUser(request);
    if (!authUser) {
      return NextResponse.json({ error: 'Utilisateur non authentifi√©' }, { status: 401 });
    }

    // DEBUG: Log de l'utilisateur r√©cup√©r√©
    console.log(`üîç [API-KEYS] Utilisateur r√©cup√©r√©:`, {
      id: authUser.id,
      email: authUser.email,
      organizationId: authUser.organizationId
    });

    // Les cl√©s API sont toujours li√©es √† l'AuthUser, pas √† l'identit√© utilisateur
    const userId = authUser.id;

    // Construire la requ√™te avec tous les filtres en une fois
    const conditions = [eq(api_keys.userId, userId)];
    if (provider) {
      conditions.push(eq(api_keys.provider, provider));
    }
    
    const query = db.select().from(api_keys).where(and(...conditions));
    
    // DEBUG: Log de la requ√™te SQL g√©n√©r√©e
    console.log(`üîç [API-KEYS] Requ√™te SQL pour userId=${userId}, provider=${provider}`);
    
    const keys = await query;
    
    // DEBUG: Log des cl√©s trouv√©es
    console.log(`üîç [API-KEYS] Cl√©s trouv√©es pour userId=${userId}:`, keys.map(k => ({
      provider: k.provider,
      isActive: k.isActive,
      preview: k.apiKey.substring(0, 10) + '...' + k.apiKey.slice(-4)
    })));
    
    // Retourner les cl√©s sous forme d'objet simple (d√©chiffr√©es)
    const result: Record<string, string> = {};
    keys.forEach(key => {
      if (key.isActive) {
        try {
          // D√©chiffrer la cl√© API avant de la retourner
          const decryptedKey = EncryptionService.decrypt(key.apiKey);
          result[key.provider] = decryptedKey;
          console.log(`üîì [API-KEYS] Cl√© d√©chiffr√©e pour ${key.provider}`);
        } catch (error) {
          console.error(`‚ùå [API-KEYS] Erreur d√©chiffrement pour ${key.provider}:`, error);
          // Si le d√©chiffrement √©choue, on peut soit ignorer cette cl√© soit retourner une erreur
          // Pour l'instant, on ignore la cl√© corrompue
        }
      }
    });
    
    console.log(`üîç [API-KEYS] R√©sultat final:`, Object.keys(result));
    
    return NextResponse.json(result);
  } catch (error) {
    console.error('Failed to get API keys:', error);
    return NextResponse.json({ error: 'Failed to retrieve API keys' }, { status: 500 });
  }
});

/**
 * POST /api/api-keys
 * Sauvegarde une cl√© API pour l'utilisateur authentifi√©
 * Body: { provider: string, apiKey: string }
 * Protected by authentication middleware.
 */
export const POST = withAuth(async (request: NextRequest) => {
  try {
    const body = await request.json();
    const { provider, apiKey } = body;

    if (!provider || !apiKey) {
      return NextResponse.json({ error: 'provider and apiKey are required' }, { status: 400 });
    }

    // R√©cup√©rer l'utilisateur authentifi√© depuis le middleware
    const authUser = AuthContext.getUser(request);
    if (!authUser) {
      return NextResponse.json({ error: 'Utilisateur non authentifi√©' }, { status: 401 });
    }

    // Les cl√©s API sont toujours li√©es √† l'AuthUser, pas √† l'identit√© utilisateur
    const userId = authUser.id;

    // Supprimer toutes les anciennes cl√©s (actives et d√©sactiv√©es) pour cet utilisateur et provider
    console.log(`üîß Suppression anciennes cl√©s API pour userId=${userId}, provider=${provider}`);
    const deleteResult = await db.delete(api_keys)
      .where(eq(api_keys.userId, userId))
      .where(eq(api_keys.provider, provider));
    console.log(`üîß R√©sultat suppression:`, deleteResult);

    // Chiffrer la cl√© API avant de la sauvegarder
    console.log(`üîê [API-KEYS] Chiffrement de la cl√© pour ${provider}`);
    const encryptedApiKey = EncryptionService.encrypt(apiKey);
    console.log(`üîê [API-KEYS] Cl√© chiffr√©e avec succ√®s pour ${provider}`);

    // Ins√©rer la nouvelle cl√© (chiffr√©e)
    const [newKey] = await db.insert(api_keys)
      .values({ 
        userId: userId, 
        provider: provider, 
        apiKey: encryptedApiKey, 
        isActive: true 
      })
      .returning();

    return NextResponse.json(newKey, { status: 201 });
  } catch (error) {
    console.error('Failed to save API key:', error);
    return NextResponse.json({ error: 'Failed to save API key' }, { status: 500 });
  }
});