ChatGPT a dit :

Je vois très bien ton problème 👀.
Ton code génère un PDF à partir d’un screenshot (html2canvas), donc le rendu est forcément une image →

✅ visuel fidèle à la page HTML

❌ liens non cliquables (ils deviennent juste du texte dans l’image)

❌ coupures arbitraires car tu coupes l’image par tranches (sans tenir compte du contenu).

C’est une limite structurelle de html2canvas + jsPDF.
Si tu veux corriger ça, il faut revoir l’approche :

1. Pour des liens cliquables

Tu dois utiliser l’API de jsPDF directement :

pdf.textWithLink("Luciform Research Hub", margin, 50, { url: "https://www.luciformresearch.com" });


👉 Chaque lien doit être ajouté manuellement après avoir dessiné l’image, avec les coordonnées.
Sinon, html2canvas ne sait pas convertir <a> en vrai lien PDF.

2. Pour éviter les coupures de sections

Deux options :

a) CSS natif avec html2pdf.js

Il existe un wrapper (html2pdf.js) qui combine html2canvas + jsPDF + page-break.
Tu peux insérer dans ton CSS :

.page-break { page-break-before: always; }
.avoid-break { page-break-inside: avoid; }


et html2pdf respectera ça. Exemple d’utilisation :

import html2pdf from 'html2pdf.js';

const element = document.getElementById("cv-content");
html2pdf()
  .set({
    margin: 15,
    filename: "cv.pdf",
    image: { type: "jpeg", quality: 0.95 },
    html2canvas: { scale: 2, useCORS: true },
    jsPDF: { unit: "mm", format: "a4", orientation: "p" }
  })
  .from(element)
  .save();


Ça gère beaucoup mieux les sauts de pages et c’est plus clean que ton code “canvas découpé en tranches”.

b) Génération “vraie” en PDF

Au lieu de screenshooter, utiliser directement un moteur qui comprend le HTML et CSS :

react-pdf : tu recrées le CV en composants React PDF.

puppeteer (SSR/headless Chrome) : page.pdf() → rendu parfait (y compris liens cliquables, pas de coupures moches).

pdfmake / pdfkit : approche déclarative (plus technique).

3. Conclusion pour ton cas

Si tu veux garder html2canvas : tu ne pourras pas avoir de vrais liens. Ajoute-les via pdf.textWithLink() à la main.

Si tu veux gérer proprement les pages : passe à html2pdf.js (moins de code custom, support CSS de page-break).

Si tu veux un rendu pro et interactif (liens, recherche, copy/paste) : oublie html2canvas, et pars sur Puppeteer (await page.pdf()).

👉 Je te conseille de switcher vers html2pdf.js si tu veux patcher vite ton code,
ou Puppeteer si tu veux un PDF parfait (vrais liens, mise en page contrôlée).

Veux-tu que je t’écrive une version minimaliste de ton generatePDF avec html2pdf.js pour tester rapidement ?